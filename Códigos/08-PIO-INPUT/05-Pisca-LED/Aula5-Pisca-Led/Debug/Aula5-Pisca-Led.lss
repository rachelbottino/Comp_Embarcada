
Aula5-Pisca-Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005534  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405534  00405534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000874  20400000  0040553c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000e0  20400874  00405db0  00020874  2**2
                  ALLOC
  4 .stack        00002004  20400954  00405e90  00020874  2**0
                  ALLOC
  5 .heap         00000200  20402958  00407e94  00020874  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208a2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000aefa  00000000  00000000  000208fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001940  00000000  00000000  0002b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000067f4  00000000  00000000  0002d135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b18  00000000  00000000  00033929  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae0  00000000  00000000  00034441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001db4c  00000000  00000000  00034f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a377  00000000  00000000  00052a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008a4e9  00000000  00000000  0005cde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bd8  00000000  00000000  000e72d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402958 	.word	0x20402958
  400004:	00401691 	.word	0x00401691
  400008:	00401741 	.word	0x00401741
  40000c:	00401741 	.word	0x00401741
  400010:	00401741 	.word	0x00401741
  400014:	00401741 	.word	0x00401741
  400018:	00401741 	.word	0x00401741
	...
  40002c:	00401741 	.word	0x00401741
  400030:	00401741 	.word	0x00401741
  400034:	00000000 	.word	0x00000000
  400038:	00401741 	.word	0x00401741
  40003c:	004020cd 	.word	0x004020cd
  400040:	00401741 	.word	0x00401741
  400044:	00401741 	.word	0x00401741
  400048:	00401741 	.word	0x00401741
  40004c:	00401741 	.word	0x00401741
  400050:	00401741 	.word	0x00401741
  400054:	00401741 	.word	0x00401741
  400058:	00401741 	.word	0x00401741
  40005c:	00401741 	.word	0x00401741
  400060:	00401741 	.word	0x00401741
  400064:	00000000 	.word	0x00000000
  400068:	00400e75 	.word	0x00400e75
  40006c:	00400e8d 	.word	0x00400e8d
  400070:	00400ea5 	.word	0x00400ea5
  400074:	00401741 	.word	0x00401741
  400078:	00401741 	.word	0x00401741
  40007c:	00401741 	.word	0x00401741
  400080:	00400ebd 	.word	0x00400ebd
  400084:	00400ed5 	.word	0x00400ed5
  400088:	00401741 	.word	0x00401741
  40008c:	00401741 	.word	0x00401741
  400090:	00401741 	.word	0x00401741
  400094:	00401741 	.word	0x00401741
  400098:	00401741 	.word	0x00401741
  40009c:	00401741 	.word	0x00401741
  4000a0:	00401741 	.word	0x00401741
  4000a4:	00401741 	.word	0x00401741
  4000a8:	00401741 	.word	0x00401741
  4000ac:	00401741 	.word	0x00401741
  4000b0:	00401741 	.word	0x00401741
  4000b4:	00401741 	.word	0x00401741
  4000b8:	00401741 	.word	0x00401741
  4000bc:	00401741 	.word	0x00401741
  4000c0:	00401741 	.word	0x00401741
  4000c4:	00401741 	.word	0x00401741
  4000c8:	00401741 	.word	0x00401741
  4000cc:	00401741 	.word	0x00401741
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401741 	.word	0x00401741
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401741 	.word	0x00401741
  4000e0:	00401741 	.word	0x00401741
  4000e4:	00401741 	.word	0x00401741
  4000e8:	00401741 	.word	0x00401741
  4000ec:	00401741 	.word	0x00401741
  4000f0:	00401741 	.word	0x00401741
  4000f4:	00401741 	.word	0x00401741
  4000f8:	00401741 	.word	0x00401741
  4000fc:	00401741 	.word	0x00401741
  400100:	00401741 	.word	0x00401741
  400104:	00401741 	.word	0x00401741
  400108:	00401741 	.word	0x00401741
  40010c:	00401741 	.word	0x00401741
  400110:	00401741 	.word	0x00401741
	...
  400120:	00401741 	.word	0x00401741
  400124:	00401741 	.word	0x00401741
  400128:	00401741 	.word	0x00401741
  40012c:	00401741 	.word	0x00401741
  400130:	00401741 	.word	0x00401741
  400134:	00000000 	.word	0x00000000
  400138:	00401741 	.word	0x00401741
  40013c:	00401741 	.word	0x00401741

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400874 	.word	0x20400874
  40015c:	00000000 	.word	0x00000000
  400160:	0040553c 	.word	0x0040553c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400878 	.word	0x20400878
  400190:	0040553c 	.word	0x0040553c
  400194:	0040553c 	.word	0x0040553c
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00401071 	.word	0x00401071
  40021c:	004010dd 	.word	0x004010dd
  400220:	0040114d 	.word	0x0040114d

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	004010a9 	.word	0x004010a9
  400290:	004011c5 	.word	0x004011c5

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	004011e1 	.word	0x004011e1
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	004011fd 	.word	0x004011fd
  400408:	00401219 	.word	0x00401219

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	004018b5 	.word	0x004018b5
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	00400f71 	.word	0x00400f71
  40050c:	00400fed 	.word	0x00400fed
  400510:	00401749 	.word	0x00401749
  400514:	00400489 	.word	0x00400489

00400518 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400518:	b580      	push	{r7, lr}
  40051a:	b086      	sub	sp, #24
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400524:	2300      	movs	r3, #0
  400526:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400528:	68fb      	ldr	r3, [r7, #12]
  40052a:	2b00      	cmp	r3, #0
  40052c:	d012      	beq.n	400554 <_read+0x3c>
		return -1;
  40052e:	f04f 33ff 	mov.w	r3, #4294967295
  400532:	e013      	b.n	40055c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400534:	4b0b      	ldr	r3, [pc, #44]	; (400564 <_read+0x4c>)
  400536:	681b      	ldr	r3, [r3, #0]
  400538:	4a0b      	ldr	r2, [pc, #44]	; (400568 <_read+0x50>)
  40053a:	6812      	ldr	r2, [r2, #0]
  40053c:	68b9      	ldr	r1, [r7, #8]
  40053e:	4610      	mov	r0, r2
  400540:	4798      	blx	r3
		ptr++;
  400542:	68bb      	ldr	r3, [r7, #8]
  400544:	3301      	adds	r3, #1
  400546:	60bb      	str	r3, [r7, #8]
		nChars++;
  400548:	697b      	ldr	r3, [r7, #20]
  40054a:	3301      	adds	r3, #1
  40054c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	3b01      	subs	r3, #1
  400552:	607b      	str	r3, [r7, #4]
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	2b00      	cmp	r3, #0
  400558:	dcec      	bgt.n	400534 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40055a:	697b      	ldr	r3, [r7, #20]
}
  40055c:	4618      	mov	r0, r3
  40055e:	3718      	adds	r7, #24
  400560:	46bd      	mov	sp, r7
  400562:	bd80      	pop	{r7, pc}
  400564:	20400944 	.word	0x20400944
  400568:	2040094c 	.word	0x2040094c

0040056c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	b086      	sub	sp, #24
  400570:	af00      	add	r7, sp, #0
  400572:	60f8      	str	r0, [r7, #12]
  400574:	60b9      	str	r1, [r7, #8]
  400576:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400578:	2300      	movs	r3, #0
  40057a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	2b01      	cmp	r3, #1
  400580:	d01e      	beq.n	4005c0 <_write+0x54>
  400582:	68fb      	ldr	r3, [r7, #12]
  400584:	2b02      	cmp	r3, #2
  400586:	d01b      	beq.n	4005c0 <_write+0x54>
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	2b03      	cmp	r3, #3
  40058c:	d018      	beq.n	4005c0 <_write+0x54>
		return -1;
  40058e:	f04f 33ff 	mov.w	r3, #4294967295
  400592:	e019      	b.n	4005c8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400594:	4b0e      	ldr	r3, [pc, #56]	; (4005d0 <_write+0x64>)
  400596:	681a      	ldr	r2, [r3, #0]
  400598:	4b0e      	ldr	r3, [pc, #56]	; (4005d4 <_write+0x68>)
  40059a:	6818      	ldr	r0, [r3, #0]
  40059c:	68bb      	ldr	r3, [r7, #8]
  40059e:	1c59      	adds	r1, r3, #1
  4005a0:	60b9      	str	r1, [r7, #8]
  4005a2:	781b      	ldrb	r3, [r3, #0]
  4005a4:	4619      	mov	r1, r3
  4005a6:	4790      	blx	r2
  4005a8:	4603      	mov	r3, r0
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	da02      	bge.n	4005b4 <_write+0x48>
			return -1;
  4005ae:	f04f 33ff 	mov.w	r3, #4294967295
  4005b2:	e009      	b.n	4005c8 <_write+0x5c>
		}
		++nChars;
  4005b4:	697b      	ldr	r3, [r7, #20]
  4005b6:	3301      	adds	r3, #1
  4005b8:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	3b01      	subs	r3, #1
  4005be:	607b      	str	r3, [r7, #4]
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	2b00      	cmp	r3, #0
  4005c4:	d1e6      	bne.n	400594 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c6:	697b      	ldr	r3, [r7, #20]
}
  4005c8:	4618      	mov	r0, r3
  4005ca:	3718      	adds	r7, #24
  4005cc:	46bd      	mov	sp, r7
  4005ce:	bd80      	pop	{r7, pc}
  4005d0:	20400948 	.word	0x20400948
  4005d4:	2040094c 	.word	0x2040094c

004005d8 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4005d8:	b480      	push	{r7}
  4005da:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4005dc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4005e0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4005e4:	4b09      	ldr	r3, [pc, #36]	; (40060c <SCB_EnableICache+0x34>)
  4005e6:	2200      	movs	r2, #0
  4005e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4005ec:	4a07      	ldr	r2, [pc, #28]	; (40060c <SCB_EnableICache+0x34>)
  4005ee:	4b07      	ldr	r3, [pc, #28]	; (40060c <SCB_EnableICache+0x34>)
  4005f0:	695b      	ldr	r3, [r3, #20]
  4005f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4005f6:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4005f8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4005fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  400600:	bf00      	nop
  400602:	46bd      	mov	sp, r7
  400604:	f85d 7b04 	ldr.w	r7, [sp], #4
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	e000ed00 	.word	0xe000ed00

00400610 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  400610:	b480      	push	{r7}
  400612:	b08b      	sub	sp, #44	; 0x2c
  400614:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400616:	4b26      	ldr	r3, [pc, #152]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40061c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40061e:	69fb      	ldr	r3, [r7, #28]
  400620:	0b5b      	lsrs	r3, r3, #13
  400622:	f3c3 030e 	ubfx	r3, r3, #0, #15
  400626:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	f003 0307 	and.w	r3, r3, #7
  40062e:	3304      	adds	r3, #4
  400630:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  400632:	69fb      	ldr	r3, [r7, #28]
  400634:	08db      	lsrs	r3, r3, #3
  400636:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40063a:	617b      	str	r3, [r7, #20]
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	fab3 f383 	clz	r3, r3
  400646:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  40064c:	f003 031f 	and.w	r3, r3, #31
  400650:	613b      	str	r3, [r7, #16]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400652:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400656:	697b      	ldr	r3, [r7, #20]
  400658:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40065a:	6a3a      	ldr	r2, [r7, #32]
  40065c:	693b      	ldr	r3, [r7, #16]
  40065e:	fa02 f303 	lsl.w	r3, r2, r3
  400662:	4619      	mov	r1, r3
  400664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400666:	69bb      	ldr	r3, [r7, #24]
  400668:	fa02 f303 	lsl.w	r3, r2, r3
  40066c:	430b      	orrs	r3, r1
  40066e:	60bb      	str	r3, [r7, #8]
              SCB->DCISW = sw;
  400670:	4a0f      	ldr	r2, [pc, #60]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400672:	68bb      	ldr	r3, [r7, #8]
  400674:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  400678:	6a3b      	ldr	r3, [r7, #32]
  40067a:	1e5a      	subs	r2, r3, #1
  40067c:	623a      	str	r2, [r7, #32]
  40067e:	2b00      	cmp	r3, #0
  400680:	d1eb      	bne.n	40065a <SCB_EnableDCache+0x4a>
        } while(sets--);
  400682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400684:	1e5a      	subs	r2, r3, #1
  400686:	627a      	str	r2, [r7, #36]	; 0x24
  400688:	2b00      	cmp	r3, #0
  40068a:	d1e4      	bne.n	400656 <SCB_EnableDCache+0x46>
  40068c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400690:	4a07      	ldr	r2, [pc, #28]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400692:	4b07      	ldr	r3, [pc, #28]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400694:	695b      	ldr	r3, [r3, #20]
  400696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40069a:	6153      	str	r3, [r2, #20]
  40069c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4006a0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4006a4:	bf00      	nop
  4006a6:	372c      	adds	r7, #44	; 0x2c
  4006a8:	46bd      	mov	sp, r7
  4006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ae:	4770      	bx	lr
  4006b0:	e000ed00 	.word	0xe000ed00

004006b4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4006b4:	b580      	push	{r7, lr}
  4006b6:	b082      	sub	sp, #8
  4006b8:	af00      	add	r7, sp, #0
  4006ba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4006bc:	6878      	ldr	r0, [r7, #4]
  4006be:	4b03      	ldr	r3, [pc, #12]	; (4006cc <sysclk_enable_peripheral_clock+0x18>)
  4006c0:	4798      	blx	r3
}
  4006c2:	bf00      	nop
  4006c4:	3708      	adds	r7, #8
  4006c6:	46bd      	mov	sp, r7
  4006c8:	bd80      	pop	{r7, pc}
  4006ca:	bf00      	nop
  4006cc:	00401235 	.word	0x00401235

004006d0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4006d0:	b580      	push	{r7, lr}
  4006d2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4006d4:	200a      	movs	r0, #10
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <ioport_init+0x28>)
  4006d8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4006da:	200b      	movs	r0, #11
  4006dc:	4b06      	ldr	r3, [pc, #24]	; (4006f8 <ioport_init+0x28>)
  4006de:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4006e0:	200c      	movs	r0, #12
  4006e2:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <ioport_init+0x28>)
  4006e4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4006e6:	2010      	movs	r0, #16
  4006e8:	4b03      	ldr	r3, [pc, #12]	; (4006f8 <ioport_init+0x28>)
  4006ea:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4006ec:	2011      	movs	r0, #17
  4006ee:	4b02      	ldr	r3, [pc, #8]	; (4006f8 <ioport_init+0x28>)
  4006f0:	4798      	blx	r3
	arch_ioport_init();
}
  4006f2:	bf00      	nop
  4006f4:	bd80      	pop	{r7, pc}
  4006f6:	bf00      	nop
  4006f8:	004006b5 	.word	0x004006b5

004006fc <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  4006fc:	b480      	push	{r7}
  4006fe:	b089      	sub	sp, #36	; 0x24
  400700:	af00      	add	r7, sp, #0
  400702:	6078      	str	r0, [r7, #4]
  400704:	687b      	ldr	r3, [r7, #4]
  400706:	61fb      	str	r3, [r7, #28]
  400708:	69fb      	ldr	r3, [r7, #28]
  40070a:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40070c:	69bb      	ldr	r3, [r7, #24]
  40070e:	095a      	lsrs	r2, r3, #5
  400710:	69fb      	ldr	r3, [r7, #28]
  400712:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	f003 031f 	and.w	r3, r3, #31
  40071a:	2101      	movs	r1, #1
  40071c:	fa01 f303 	lsl.w	r3, r1, r3
  400720:	613a      	str	r2, [r7, #16]
  400722:	60fb      	str	r3, [r7, #12]
  400724:	693b      	ldr	r3, [r7, #16]
  400726:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400728:	68ba      	ldr	r2, [r7, #8]
  40072a:	4b06      	ldr	r3, [pc, #24]	; (400744 <ioport_disable_pin+0x48>)
  40072c:	4413      	add	r3, r2
  40072e:	025b      	lsls	r3, r3, #9
  400730:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400736:	bf00      	nop
  400738:	3724      	adds	r7, #36	; 0x24
  40073a:	46bd      	mov	sp, r7
  40073c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400740:	4770      	bx	lr
  400742:	bf00      	nop
  400744:	00200707 	.word	0x00200707

00400748 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400748:	b480      	push	{r7}
  40074a:	b08d      	sub	sp, #52	; 0x34
  40074c:	af00      	add	r7, sp, #0
  40074e:	6078      	str	r0, [r7, #4]
  400750:	6039      	str	r1, [r7, #0]
  400752:	687b      	ldr	r3, [r7, #4]
  400754:	62fb      	str	r3, [r7, #44]	; 0x2c
  400756:	683b      	ldr	r3, [r7, #0]
  400758:	62bb      	str	r3, [r7, #40]	; 0x28
  40075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40075c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400760:	095a      	lsrs	r2, r3, #5
  400762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400764:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400766:	6a3b      	ldr	r3, [r7, #32]
  400768:	f003 031f 	and.w	r3, r3, #31
  40076c:	2101      	movs	r1, #1
  40076e:	fa01 f303 	lsl.w	r3, r1, r3
  400772:	61fa      	str	r2, [r7, #28]
  400774:	61bb      	str	r3, [r7, #24]
  400776:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400778:	617b      	str	r3, [r7, #20]
  40077a:	69fb      	ldr	r3, [r7, #28]
  40077c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40077e:	693a      	ldr	r2, [r7, #16]
  400780:	4b37      	ldr	r3, [pc, #220]	; (400860 <ioport_set_pin_mode+0x118>)
  400782:	4413      	add	r3, r2
  400784:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400786:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400788:	697b      	ldr	r3, [r7, #20]
  40078a:	f003 0308 	and.w	r3, r3, #8
  40078e:	2b00      	cmp	r3, #0
  400790:	d003      	beq.n	40079a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	69ba      	ldr	r2, [r7, #24]
  400796:	665a      	str	r2, [r3, #100]	; 0x64
  400798:	e002      	b.n	4007a0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  40079a:	68fb      	ldr	r3, [r7, #12]
  40079c:	69ba      	ldr	r2, [r7, #24]
  40079e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007a0:	697b      	ldr	r3, [r7, #20]
  4007a2:	f003 0310 	and.w	r3, r3, #16
  4007a6:	2b00      	cmp	r3, #0
  4007a8:	d004      	beq.n	4007b4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	69ba      	ldr	r2, [r7, #24]
  4007ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007b2:	e003      	b.n	4007bc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007b4:	68fb      	ldr	r3, [r7, #12]
  4007b6:	69ba      	ldr	r2, [r7, #24]
  4007b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4007bc:	697b      	ldr	r3, [r7, #20]
  4007be:	f003 0320 	and.w	r3, r3, #32
  4007c2:	2b00      	cmp	r3, #0
  4007c4:	d003      	beq.n	4007ce <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4007c6:	68fb      	ldr	r3, [r7, #12]
  4007c8:	69ba      	ldr	r2, [r7, #24]
  4007ca:	651a      	str	r2, [r3, #80]	; 0x50
  4007cc:	e002      	b.n	4007d4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4007ce:	68fb      	ldr	r3, [r7, #12]
  4007d0:	69ba      	ldr	r2, [r7, #24]
  4007d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4007d4:	697b      	ldr	r3, [r7, #20]
  4007d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4007da:	2b00      	cmp	r3, #0
  4007dc:	d003      	beq.n	4007e6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	69ba      	ldr	r2, [r7, #24]
  4007e2:	621a      	str	r2, [r3, #32]
  4007e4:	e002      	b.n	4007ec <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4007e6:	68fb      	ldr	r3, [r7, #12]
  4007e8:	69ba      	ldr	r2, [r7, #24]
  4007ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4007ec:	697b      	ldr	r3, [r7, #20]
  4007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4007f2:	2b00      	cmp	r3, #0
  4007f4:	d004      	beq.n	400800 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	69ba      	ldr	r2, [r7, #24]
  4007fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4007fe:	e003      	b.n	400808 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400800:	68fb      	ldr	r3, [r7, #12]
  400802:	69ba      	ldr	r2, [r7, #24]
  400804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400808:	697b      	ldr	r3, [r7, #20]
  40080a:	f003 0301 	and.w	r3, r3, #1
  40080e:	2b00      	cmp	r3, #0
  400810:	d006      	beq.n	400820 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400812:	68fb      	ldr	r3, [r7, #12]
  400814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400816:	69bb      	ldr	r3, [r7, #24]
  400818:	431a      	orrs	r2, r3
  40081a:	68fb      	ldr	r3, [r7, #12]
  40081c:	671a      	str	r2, [r3, #112]	; 0x70
  40081e:	e006      	b.n	40082e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400820:	68fb      	ldr	r3, [r7, #12]
  400822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400824:	69bb      	ldr	r3, [r7, #24]
  400826:	43db      	mvns	r3, r3
  400828:	401a      	ands	r2, r3
  40082a:	68fb      	ldr	r3, [r7, #12]
  40082c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40082e:	697b      	ldr	r3, [r7, #20]
  400830:	f003 0302 	and.w	r3, r3, #2
  400834:	2b00      	cmp	r3, #0
  400836:	d006      	beq.n	400846 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400838:	68fb      	ldr	r3, [r7, #12]
  40083a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40083c:	69bb      	ldr	r3, [r7, #24]
  40083e:	431a      	orrs	r2, r3
  400840:	68fb      	ldr	r3, [r7, #12]
  400842:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400844:	e006      	b.n	400854 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400846:	68fb      	ldr	r3, [r7, #12]
  400848:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40084a:	69bb      	ldr	r3, [r7, #24]
  40084c:	43db      	mvns	r3, r3
  40084e:	401a      	ands	r2, r3
  400850:	68fb      	ldr	r3, [r7, #12]
  400852:	675a      	str	r2, [r3, #116]	; 0x74
  400854:	bf00      	nop
  400856:	3734      	adds	r7, #52	; 0x34
  400858:	46bd      	mov	sp, r7
  40085a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40085e:	4770      	bx	lr
  400860:	00200707 	.word	0x00200707

00400864 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400864:	b480      	push	{r7}
  400866:	b08d      	sub	sp, #52	; 0x34
  400868:	af00      	add	r7, sp, #0
  40086a:	6078      	str	r0, [r7, #4]
  40086c:	460b      	mov	r3, r1
  40086e:	70fb      	strb	r3, [r7, #3]
  400870:	687b      	ldr	r3, [r7, #4]
  400872:	62fb      	str	r3, [r7, #44]	; 0x2c
  400874:	78fb      	ldrb	r3, [r7, #3]
  400876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40087c:	627b      	str	r3, [r7, #36]	; 0x24
  40087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400880:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400882:	6a3b      	ldr	r3, [r7, #32]
  400884:	095b      	lsrs	r3, r3, #5
  400886:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400888:	69fa      	ldr	r2, [r7, #28]
  40088a:	4b17      	ldr	r3, [pc, #92]	; (4008e8 <ioport_set_pin_dir+0x84>)
  40088c:	4413      	add	r3, r2
  40088e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400890:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400896:	2b01      	cmp	r3, #1
  400898:	d109      	bne.n	4008ae <ioport_set_pin_dir+0x4a>
  40089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40089c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40089e:	697b      	ldr	r3, [r7, #20]
  4008a0:	f003 031f 	and.w	r3, r3, #31
  4008a4:	2201      	movs	r2, #1
  4008a6:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008a8:	69bb      	ldr	r3, [r7, #24]
  4008aa:	611a      	str	r2, [r3, #16]
  4008ac:	e00c      	b.n	4008c8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008b2:	2b00      	cmp	r3, #0
  4008b4:	d108      	bne.n	4008c8 <ioport_set_pin_dir+0x64>
  4008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008b8:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008ba:	693b      	ldr	r3, [r7, #16]
  4008bc:	f003 031f 	and.w	r3, r3, #31
  4008c0:	2201      	movs	r2, #1
  4008c2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008c4:	69bb      	ldr	r3, [r7, #24]
  4008c6:	615a      	str	r2, [r3, #20]
  4008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008ca:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008cc:	68fb      	ldr	r3, [r7, #12]
  4008ce:	f003 031f 	and.w	r3, r3, #31
  4008d2:	2201      	movs	r2, #1
  4008d4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008d6:	69bb      	ldr	r3, [r7, #24]
  4008d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4008dc:	bf00      	nop
  4008de:	3734      	adds	r7, #52	; 0x34
  4008e0:	46bd      	mov	sp, r7
  4008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008e6:	4770      	bx	lr
  4008e8:	00200707 	.word	0x00200707

004008ec <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4008ec:	b480      	push	{r7}
  4008ee:	b08b      	sub	sp, #44	; 0x2c
  4008f0:	af00      	add	r7, sp, #0
  4008f2:	6078      	str	r0, [r7, #4]
  4008f4:	460b      	mov	r3, r1
  4008f6:	70fb      	strb	r3, [r7, #3]
  4008f8:	687b      	ldr	r3, [r7, #4]
  4008fa:	627b      	str	r3, [r7, #36]	; 0x24
  4008fc:	78fb      	ldrb	r3, [r7, #3]
  4008fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400904:	61fb      	str	r3, [r7, #28]
  400906:	69fb      	ldr	r3, [r7, #28]
  400908:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40090a:	69bb      	ldr	r3, [r7, #24]
  40090c:	095b      	lsrs	r3, r3, #5
  40090e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400910:	697a      	ldr	r2, [r7, #20]
  400912:	4b10      	ldr	r3, [pc, #64]	; (400954 <ioport_set_pin_level+0x68>)
  400914:	4413      	add	r3, r2
  400916:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400918:	613b      	str	r3, [r7, #16]

	if (level) {
  40091a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40091e:	2b00      	cmp	r3, #0
  400920:	d009      	beq.n	400936 <ioport_set_pin_level+0x4a>
  400922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400924:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400926:	68fb      	ldr	r3, [r7, #12]
  400928:	f003 031f 	and.w	r3, r3, #31
  40092c:	2201      	movs	r2, #1
  40092e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400930:	693b      	ldr	r3, [r7, #16]
  400932:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400934:	e008      	b.n	400948 <ioport_set_pin_level+0x5c>
  400936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400938:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40093a:	68bb      	ldr	r3, [r7, #8]
  40093c:	f003 031f 	and.w	r3, r3, #31
  400940:	2201      	movs	r2, #1
  400942:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400944:	693b      	ldr	r3, [r7, #16]
  400946:	635a      	str	r2, [r3, #52]	; 0x34
  400948:	bf00      	nop
  40094a:	372c      	adds	r7, #44	; 0x2c
  40094c:	46bd      	mov	sp, r7
  40094e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400952:	4770      	bx	lr
  400954:	00200707 	.word	0x00200707

00400958 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400958:	b480      	push	{r7}
  40095a:	b08d      	sub	sp, #52	; 0x34
  40095c:	af00      	add	r7, sp, #0
  40095e:	6078      	str	r0, [r7, #4]
  400960:	460b      	mov	r3, r1
  400962:	70fb      	strb	r3, [r7, #3]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	62fb      	str	r3, [r7, #44]	; 0x2c
  400968:	78fb      	ldrb	r3, [r7, #3]
  40096a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400970:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400974:	095a      	lsrs	r2, r3, #5
  400976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400978:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40097a:	6a3b      	ldr	r3, [r7, #32]
  40097c:	f003 031f 	and.w	r3, r3, #31
  400980:	2101      	movs	r1, #1
  400982:	fa01 f303 	lsl.w	r3, r1, r3
  400986:	61fa      	str	r2, [r7, #28]
  400988:	61bb      	str	r3, [r7, #24]
  40098a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40098e:	75fb      	strb	r3, [r7, #23]
  400990:	69fb      	ldr	r3, [r7, #28]
  400992:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400994:	693a      	ldr	r2, [r7, #16]
  400996:	4b23      	ldr	r3, [pc, #140]	; (400a24 <ioport_set_pin_sense_mode+0xcc>)
  400998:	4413      	add	r3, r2
  40099a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  40099c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40099e:	7dfb      	ldrb	r3, [r7, #23]
  4009a0:	3b01      	subs	r3, #1
  4009a2:	2b03      	cmp	r3, #3
  4009a4:	d82e      	bhi.n	400a04 <ioport_set_pin_sense_mode+0xac>
  4009a6:	a201      	add	r2, pc, #4	; (adr r2, 4009ac <ioport_set_pin_sense_mode+0x54>)
  4009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009ac:	004009e1 	.word	0x004009e1
  4009b0:	004009f3 	.word	0x004009f3
  4009b4:	004009bd 	.word	0x004009bd
  4009b8:	004009cf 	.word	0x004009cf
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4009bc:	68fb      	ldr	r3, [r7, #12]
  4009be:	69ba      	ldr	r2, [r7, #24]
  4009c0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4009c4:	68fb      	ldr	r3, [r7, #12]
  4009c6:	69ba      	ldr	r2, [r7, #24]
  4009c8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4009cc:	e01f      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4009ce:	68fb      	ldr	r3, [r7, #12]
  4009d0:	69ba      	ldr	r2, [r7, #24]
  4009d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4009d6:	68fb      	ldr	r3, [r7, #12]
  4009d8:	69ba      	ldr	r2, [r7, #24]
  4009da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4009de:	e016      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4009e0:	68fb      	ldr	r3, [r7, #12]
  4009e2:	69ba      	ldr	r2, [r7, #24]
  4009e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4009e8:	68fb      	ldr	r3, [r7, #12]
  4009ea:	69ba      	ldr	r2, [r7, #24]
  4009ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4009f0:	e00d      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4009f2:	68fb      	ldr	r3, [r7, #12]
  4009f4:	69ba      	ldr	r2, [r7, #24]
  4009f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009fa:	68fb      	ldr	r3, [r7, #12]
  4009fc:	69ba      	ldr	r2, [r7, #24]
  4009fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a02:	e004      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a0c:	e003      	b.n	400a16 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a0e:	68fb      	ldr	r3, [r7, #12]
  400a10:	69ba      	ldr	r2, [r7, #24]
  400a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400a16:	bf00      	nop
  400a18:	3734      	adds	r7, #52	; 0x34
  400a1a:	46bd      	mov	sp, r7
  400a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	00200707 	.word	0x00200707

00400a28 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400a28:	b480      	push	{r7}
  400a2a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a2c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400a30:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a34:	4a0c      	ldr	r2, [pc, #48]	; (400a68 <tcm_disable+0x40>)
  400a36:	4b0c      	ldr	r3, [pc, #48]	; (400a68 <tcm_disable+0x40>)
  400a38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400a3c:	f023 0301 	bic.w	r3, r3, #1
  400a40:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a44:	4a08      	ldr	r2, [pc, #32]	; (400a68 <tcm_disable+0x40>)
  400a46:	4b08      	ldr	r3, [pc, #32]	; (400a68 <tcm_disable+0x40>)
  400a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400a4c:	f023 0301 	bic.w	r3, r3, #1
  400a50:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a54:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400a58:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400a5c:	bf00      	nop
  400a5e:	46bd      	mov	sp, r7
  400a60:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a64:	4770      	bx	lr
  400a66:	bf00      	nop
  400a68:	e000ed00 	.word	0xe000ed00

00400a6c <board_init>:
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b1e      	ldr	r3, [pc, #120]	; (400aec <board_init+0x80>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  400a78:	4b1d      	ldr	r3, [pc, #116]	; (400af0 <board_init+0x84>)
  400a7a:	4798      	blx	r3
	SCB_EnableDCache();
  400a7c:	4b1d      	ldr	r3, [pc, #116]	; (400af4 <board_init+0x88>)
  400a7e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a80:	4b1d      	ldr	r3, [pc, #116]	; (400af8 <board_init+0x8c>)
  400a82:	4a1e      	ldr	r2, [pc, #120]	; (400afc <board_init+0x90>)
  400a84:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a86:	4b1c      	ldr	r3, [pc, #112]	; (400af8 <board_init+0x8c>)
  400a88:	4a1d      	ldr	r2, [pc, #116]	; (400b00 <board_init+0x94>)
  400a8a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400a8c:	4b1d      	ldr	r3, [pc, #116]	; (400b04 <board_init+0x98>)
  400a8e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a90:	4b1d      	ldr	r3, [pc, #116]	; (400b08 <board_init+0x9c>)
  400a92:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a94:	2101      	movs	r1, #1
  400a96:	2048      	movs	r0, #72	; 0x48
  400a98:	4b1c      	ldr	r3, [pc, #112]	; (400b0c <board_init+0xa0>)
  400a9a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a9c:	2101      	movs	r1, #1
  400a9e:	2048      	movs	r0, #72	; 0x48
  400aa0:	4b1b      	ldr	r3, [pc, #108]	; (400b10 <board_init+0xa4>)
  400aa2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400aa4:	2100      	movs	r1, #0
  400aa6:	200b      	movs	r0, #11
  400aa8:	4b18      	ldr	r3, [pc, #96]	; (400b0c <board_init+0xa0>)
  400aaa:	4798      	blx	r3
  400aac:	2188      	movs	r1, #136	; 0x88
  400aae:	200b      	movs	r0, #11
  400ab0:	4b18      	ldr	r3, [pc, #96]	; (400b14 <board_init+0xa8>)
  400ab2:	4798      	blx	r3
  400ab4:	2102      	movs	r1, #2
  400ab6:	200b      	movs	r0, #11
  400ab8:	4b17      	ldr	r3, [pc, #92]	; (400b18 <board_init+0xac>)
  400aba:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400abc:	2100      	movs	r1, #0
  400abe:	2015      	movs	r0, #21
  400ac0:	4b14      	ldr	r3, [pc, #80]	; (400b14 <board_init+0xa8>)
  400ac2:	4798      	blx	r3
  400ac4:	2015      	movs	r0, #21
  400ac6:	4b15      	ldr	r3, [pc, #84]	; (400b1c <board_init+0xb0>)
  400ac8:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400aca:	4a15      	ldr	r2, [pc, #84]	; (400b20 <board_init+0xb4>)
  400acc:	4b14      	ldr	r3, [pc, #80]	; (400b20 <board_init+0xb4>)
  400ace:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400ad2:	f043 0310 	orr.w	r3, r3, #16
  400ad6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400ada:	2103      	movs	r1, #3
  400adc:	2024      	movs	r0, #36	; 0x24
  400ade:	4b0d      	ldr	r3, [pc, #52]	; (400b14 <board_init+0xa8>)
  400ae0:	4798      	blx	r3
  400ae2:	2024      	movs	r0, #36	; 0x24
  400ae4:	4b0d      	ldr	r3, [pc, #52]	; (400b1c <board_init+0xb0>)
  400ae6:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400ae8:	bf00      	nop
  400aea:	bd80      	pop	{r7, pc}
  400aec:	400e1850 	.word	0x400e1850
  400af0:	004005d9 	.word	0x004005d9
  400af4:	00400611 	.word	0x00400611
  400af8:	400e0c00 	.word	0x400e0c00
  400afc:	5a00080c 	.word	0x5a00080c
  400b00:	5a00070c 	.word	0x5a00070c
  400b04:	00400a29 	.word	0x00400a29
  400b08:	004006d1 	.word	0x004006d1
  400b0c:	00400865 	.word	0x00400865
  400b10:	004008ed 	.word	0x004008ed
  400b14:	00400749 	.word	0x00400749
  400b18:	00400959 	.word	0x00400959
  400b1c:	004006fd 	.word	0x004006fd
  400b20:	40088000 	.word	0x40088000

00400b24 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400b24:	b480      	push	{r7}
  400b26:	b085      	sub	sp, #20
  400b28:	af00      	add	r7, sp, #0
  400b2a:	60f8      	str	r0, [r7, #12]
  400b2c:	60b9      	str	r1, [r7, #8]
  400b2e:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400b30:	68fb      	ldr	r3, [r7, #12]
  400b32:	68ba      	ldr	r2, [r7, #8]
  400b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400b38:	687b      	ldr	r3, [r7, #4]
  400b3a:	005b      	lsls	r3, r3, #1
  400b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b40:	fbb2 f3f3 	udiv	r3, r2, r3
  400b44:	3b01      	subs	r3, #1
  400b46:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400b4a:	68fb      	ldr	r3, [r7, #12]
  400b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400b50:	bf00      	nop
  400b52:	3714      	adds	r7, #20
  400b54:	46bd      	mov	sp, r7
  400b56:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b5a:	4770      	bx	lr

00400b5c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400b5c:	b480      	push	{r7}
  400b5e:	b085      	sub	sp, #20
  400b60:	af00      	add	r7, sp, #0
  400b62:	60f8      	str	r0, [r7, #12]
  400b64:	60b9      	str	r1, [r7, #8]
  400b66:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400b68:	687b      	ldr	r3, [r7, #4]
  400b6a:	f003 0310 	and.w	r3, r3, #16
  400b6e:	2b00      	cmp	r3, #0
  400b70:	d020      	beq.n	400bb4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400b72:	68fb      	ldr	r3, [r7, #12]
  400b74:	68ba      	ldr	r2, [r7, #8]
  400b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400b7a:	687b      	ldr	r3, [r7, #4]
  400b7c:	f003 0320 	and.w	r3, r3, #32
  400b80:	2b00      	cmp	r3, #0
  400b82:	d004      	beq.n	400b8e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400b84:	68fb      	ldr	r3, [r7, #12]
  400b86:	68ba      	ldr	r2, [r7, #8]
  400b88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400b8c:	e003      	b.n	400b96 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400b8e:	68fb      	ldr	r3, [r7, #12]
  400b90:	68ba      	ldr	r2, [r7, #8]
  400b92:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400b96:	687b      	ldr	r3, [r7, #4]
  400b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400b9c:	2b00      	cmp	r3, #0
  400b9e:	d004      	beq.n	400baa <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	68ba      	ldr	r2, [r7, #8]
  400ba4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400ba8:	e008      	b.n	400bbc <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	68ba      	ldr	r2, [r7, #8]
  400bae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400bb2:	e003      	b.n	400bbc <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400bb4:	68fb      	ldr	r3, [r7, #12]
  400bb6:	68ba      	ldr	r2, [r7, #8]
  400bb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  400bbc:	bf00      	nop
  400bbe:	3714      	adds	r7, #20
  400bc0:	46bd      	mov	sp, r7
  400bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bc6:	4770      	bx	lr

00400bc8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400bc8:	b480      	push	{r7}
  400bca:	b083      	sub	sp, #12
  400bcc:	af00      	add	r7, sp, #0
  400bce:	6078      	str	r0, [r7, #4]
  400bd0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400bd2:	687b      	ldr	r3, [r7, #4]
  400bd4:	683a      	ldr	r2, [r7, #0]
  400bd6:	641a      	str	r2, [r3, #64]	; 0x40
}
  400bd8:	bf00      	nop
  400bda:	370c      	adds	r7, #12
  400bdc:	46bd      	mov	sp, r7
  400bde:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be2:	4770      	bx	lr

00400be4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400be4:	b480      	push	{r7}
  400be6:	b083      	sub	sp, #12
  400be8:	af00      	add	r7, sp, #0
  400bea:	6078      	str	r0, [r7, #4]
  400bec:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400bee:	687b      	ldr	r3, [r7, #4]
  400bf0:	683a      	ldr	r2, [r7, #0]
  400bf2:	645a      	str	r2, [r3, #68]	; 0x44
}
  400bf4:	bf00      	nop
  400bf6:	370c      	adds	r7, #12
  400bf8:	46bd      	mov	sp, r7
  400bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bfe:	4770      	bx	lr

00400c00 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c0c:	4618      	mov	r0, r3
  400c0e:	370c      	adds	r7, #12
  400c10:	46bd      	mov	sp, r7
  400c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c16:	4770      	bx	lr

00400c18 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400c18:	b480      	push	{r7}
  400c1a:	b083      	sub	sp, #12
  400c1c:	af00      	add	r7, sp, #0
  400c1e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400c20:	687b      	ldr	r3, [r7, #4]
  400c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400c24:	4618      	mov	r0, r3
  400c26:	370c      	adds	r7, #12
  400c28:	46bd      	mov	sp, r7
  400c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c2e:	4770      	bx	lr

00400c30 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400c30:	b480      	push	{r7}
  400c32:	b083      	sub	sp, #12
  400c34:	af00      	add	r7, sp, #0
  400c36:	4603      	mov	r3, r0
  400c38:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c3a:	4909      	ldr	r1, [pc, #36]	; (400c60 <NVIC_EnableIRQ+0x30>)
  400c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c40:	095b      	lsrs	r3, r3, #5
  400c42:	79fa      	ldrb	r2, [r7, #7]
  400c44:	f002 021f 	and.w	r2, r2, #31
  400c48:	2001      	movs	r0, #1
  400c4a:	fa00 f202 	lsl.w	r2, r0, r2
  400c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400c52:	bf00      	nop
  400c54:	370c      	adds	r7, #12
  400c56:	46bd      	mov	sp, r7
  400c58:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c5c:	4770      	bx	lr
  400c5e:	bf00      	nop
  400c60:	e000e100 	.word	0xe000e100

00400c64 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400c64:	b480      	push	{r7}
  400c66:	b083      	sub	sp, #12
  400c68:	af00      	add	r7, sp, #0
  400c6a:	4603      	mov	r3, r0
  400c6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400c6e:	4909      	ldr	r1, [pc, #36]	; (400c94 <NVIC_DisableIRQ+0x30>)
  400c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c74:	095b      	lsrs	r3, r3, #5
  400c76:	79fa      	ldrb	r2, [r7, #7]
  400c78:	f002 021f 	and.w	r2, r2, #31
  400c7c:	2001      	movs	r0, #1
  400c7e:	fa00 f202 	lsl.w	r2, r0, r2
  400c82:	3320      	adds	r3, #32
  400c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400c88:	bf00      	nop
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c92:	4770      	bx	lr
  400c94:	e000e100 	.word	0xe000e100

00400c98 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400c98:	b480      	push	{r7}
  400c9a:	b083      	sub	sp, #12
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	4603      	mov	r3, r0
  400ca0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400ca2:	4909      	ldr	r1, [pc, #36]	; (400cc8 <NVIC_ClearPendingIRQ+0x30>)
  400ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400ca8:	095b      	lsrs	r3, r3, #5
  400caa:	79fa      	ldrb	r2, [r7, #7]
  400cac:	f002 021f 	and.w	r2, r2, #31
  400cb0:	2001      	movs	r0, #1
  400cb2:	fa00 f202 	lsl.w	r2, r0, r2
  400cb6:	3360      	adds	r3, #96	; 0x60
  400cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400cbc:	bf00      	nop
  400cbe:	370c      	adds	r7, #12
  400cc0:	46bd      	mov	sp, r7
  400cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cc6:	4770      	bx	lr
  400cc8:	e000e100 	.word	0xe000e100

00400ccc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400ccc:	b480      	push	{r7}
  400cce:	b083      	sub	sp, #12
  400cd0:	af00      	add	r7, sp, #0
  400cd2:	4603      	mov	r3, r0
  400cd4:	6039      	str	r1, [r7, #0]
  400cd6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400cdc:	2b00      	cmp	r3, #0
  400cde:	da0b      	bge.n	400cf8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400ce0:	490d      	ldr	r1, [pc, #52]	; (400d18 <NVIC_SetPriority+0x4c>)
  400ce2:	79fb      	ldrb	r3, [r7, #7]
  400ce4:	f003 030f 	and.w	r3, r3, #15
  400ce8:	3b04      	subs	r3, #4
  400cea:	683a      	ldr	r2, [r7, #0]
  400cec:	b2d2      	uxtb	r2, r2
  400cee:	0152      	lsls	r2, r2, #5
  400cf0:	b2d2      	uxtb	r2, r2
  400cf2:	440b      	add	r3, r1
  400cf4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  400cf6:	e009      	b.n	400d0c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400cf8:	4908      	ldr	r1, [pc, #32]	; (400d1c <NVIC_SetPriority+0x50>)
  400cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400cfe:	683a      	ldr	r2, [r7, #0]
  400d00:	b2d2      	uxtb	r2, r2
  400d02:	0152      	lsls	r2, r2, #5
  400d04:	b2d2      	uxtb	r2, r2
  400d06:	440b      	add	r3, r1
  400d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400d0c:	bf00      	nop
  400d0e:	370c      	adds	r7, #12
  400d10:	46bd      	mov	sp, r7
  400d12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d16:	4770      	bx	lr
  400d18:	e000ed00 	.word	0xe000ed00
  400d1c:	e000e100 	.word	0xe000e100

00400d20 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d20:	b580      	push	{r7, lr}
  400d22:	b084      	sub	sp, #16
  400d24:	af00      	add	r7, sp, #0
  400d26:	6078      	str	r0, [r7, #4]
  400d28:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d2a:	6878      	ldr	r0, [r7, #4]
  400d2c:	4b26      	ldr	r3, [pc, #152]	; (400dc8 <pio_handler_process+0xa8>)
  400d2e:	4798      	blx	r3
  400d30:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400d32:	6878      	ldr	r0, [r7, #4]
  400d34:	4b25      	ldr	r3, [pc, #148]	; (400dcc <pio_handler_process+0xac>)
  400d36:	4798      	blx	r3
  400d38:	4602      	mov	r2, r0
  400d3a:	68fb      	ldr	r3, [r7, #12]
  400d3c:	4013      	ands	r3, r2
  400d3e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400d40:	68fb      	ldr	r3, [r7, #12]
  400d42:	2b00      	cmp	r3, #0
  400d44:	d03c      	beq.n	400dc0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400d46:	2300      	movs	r3, #0
  400d48:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400d4a:	e034      	b.n	400db6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d4c:	4a20      	ldr	r2, [pc, #128]	; (400dd0 <pio_handler_process+0xb0>)
  400d4e:	68bb      	ldr	r3, [r7, #8]
  400d50:	011b      	lsls	r3, r3, #4
  400d52:	4413      	add	r3, r2
  400d54:	681a      	ldr	r2, [r3, #0]
  400d56:	683b      	ldr	r3, [r7, #0]
  400d58:	429a      	cmp	r2, r3
  400d5a:	d126      	bne.n	400daa <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d5c:	4a1c      	ldr	r2, [pc, #112]	; (400dd0 <pio_handler_process+0xb0>)
  400d5e:	68bb      	ldr	r3, [r7, #8]
  400d60:	011b      	lsls	r3, r3, #4
  400d62:	4413      	add	r3, r2
  400d64:	3304      	adds	r3, #4
  400d66:	681a      	ldr	r2, [r3, #0]
  400d68:	68fb      	ldr	r3, [r7, #12]
  400d6a:	4013      	ands	r3, r2
  400d6c:	2b00      	cmp	r3, #0
  400d6e:	d01c      	beq.n	400daa <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d70:	4a17      	ldr	r2, [pc, #92]	; (400dd0 <pio_handler_process+0xb0>)
  400d72:	68bb      	ldr	r3, [r7, #8]
  400d74:	011b      	lsls	r3, r3, #4
  400d76:	4413      	add	r3, r2
  400d78:	330c      	adds	r3, #12
  400d7a:	681b      	ldr	r3, [r3, #0]
  400d7c:	4914      	ldr	r1, [pc, #80]	; (400dd0 <pio_handler_process+0xb0>)
  400d7e:	68ba      	ldr	r2, [r7, #8]
  400d80:	0112      	lsls	r2, r2, #4
  400d82:	440a      	add	r2, r1
  400d84:	6810      	ldr	r0, [r2, #0]
  400d86:	4912      	ldr	r1, [pc, #72]	; (400dd0 <pio_handler_process+0xb0>)
  400d88:	68ba      	ldr	r2, [r7, #8]
  400d8a:	0112      	lsls	r2, r2, #4
  400d8c:	440a      	add	r2, r1
  400d8e:	3204      	adds	r2, #4
  400d90:	6812      	ldr	r2, [r2, #0]
  400d92:	4611      	mov	r1, r2
  400d94:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d96:	4a0e      	ldr	r2, [pc, #56]	; (400dd0 <pio_handler_process+0xb0>)
  400d98:	68bb      	ldr	r3, [r7, #8]
  400d9a:	011b      	lsls	r3, r3, #4
  400d9c:	4413      	add	r3, r2
  400d9e:	3304      	adds	r3, #4
  400da0:	681b      	ldr	r3, [r3, #0]
  400da2:	43db      	mvns	r3, r3
  400da4:	68fa      	ldr	r2, [r7, #12]
  400da6:	4013      	ands	r3, r2
  400da8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400daa:	68bb      	ldr	r3, [r7, #8]
  400dac:	3301      	adds	r3, #1
  400dae:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400db0:	68bb      	ldr	r3, [r7, #8]
  400db2:	2b06      	cmp	r3, #6
  400db4:	d803      	bhi.n	400dbe <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400db6:	68fb      	ldr	r3, [r7, #12]
  400db8:	2b00      	cmp	r3, #0
  400dba:	d1c7      	bne.n	400d4c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400dbc:	e000      	b.n	400dc0 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400dbe:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400dc0:	bf00      	nop
  400dc2:	3710      	adds	r7, #16
  400dc4:	46bd      	mov	sp, r7
  400dc6:	bd80      	pop	{r7, pc}
  400dc8:	00400c01 	.word	0x00400c01
  400dcc:	00400c19 	.word	0x00400c19
  400dd0:	20400890 	.word	0x20400890

00400dd4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400dd4:	b580      	push	{r7, lr}
  400dd6:	b086      	sub	sp, #24
  400dd8:	af00      	add	r7, sp, #0
  400dda:	60f8      	str	r0, [r7, #12]
  400ddc:	60b9      	str	r1, [r7, #8]
  400dde:	607a      	str	r2, [r7, #4]
  400de0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400de2:	4b21      	ldr	r3, [pc, #132]	; (400e68 <pio_handler_set+0x94>)
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	2b06      	cmp	r3, #6
  400de8:	d901      	bls.n	400dee <pio_handler_set+0x1a>
		return 1;
  400dea:	2301      	movs	r3, #1
  400dec:	e038      	b.n	400e60 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400dee:	2300      	movs	r3, #0
  400df0:	75fb      	strb	r3, [r7, #23]
  400df2:	e011      	b.n	400e18 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400df4:	7dfb      	ldrb	r3, [r7, #23]
  400df6:	011b      	lsls	r3, r3, #4
  400df8:	4a1c      	ldr	r2, [pc, #112]	; (400e6c <pio_handler_set+0x98>)
  400dfa:	4413      	add	r3, r2
  400dfc:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400dfe:	693b      	ldr	r3, [r7, #16]
  400e00:	681a      	ldr	r2, [r3, #0]
  400e02:	68bb      	ldr	r3, [r7, #8]
  400e04:	429a      	cmp	r2, r3
  400e06:	d104      	bne.n	400e12 <pio_handler_set+0x3e>
  400e08:	693b      	ldr	r3, [r7, #16]
  400e0a:	685a      	ldr	r2, [r3, #4]
  400e0c:	687b      	ldr	r3, [r7, #4]
  400e0e:	429a      	cmp	r2, r3
  400e10:	d008      	beq.n	400e24 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e12:	7dfb      	ldrb	r3, [r7, #23]
  400e14:	3301      	adds	r3, #1
  400e16:	75fb      	strb	r3, [r7, #23]
  400e18:	7dfa      	ldrb	r2, [r7, #23]
  400e1a:	4b13      	ldr	r3, [pc, #76]	; (400e68 <pio_handler_set+0x94>)
  400e1c:	681b      	ldr	r3, [r3, #0]
  400e1e:	429a      	cmp	r2, r3
  400e20:	d9e8      	bls.n	400df4 <pio_handler_set+0x20>
  400e22:	e000      	b.n	400e26 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  400e24:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e26:	693b      	ldr	r3, [r7, #16]
  400e28:	68ba      	ldr	r2, [r7, #8]
  400e2a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400e2c:	693b      	ldr	r3, [r7, #16]
  400e2e:	687a      	ldr	r2, [r7, #4]
  400e30:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400e32:	693b      	ldr	r3, [r7, #16]
  400e34:	683a      	ldr	r2, [r7, #0]
  400e36:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400e38:	693b      	ldr	r3, [r7, #16]
  400e3a:	6a3a      	ldr	r2, [r7, #32]
  400e3c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e3e:	7dfa      	ldrb	r2, [r7, #23]
  400e40:	4b09      	ldr	r3, [pc, #36]	; (400e68 <pio_handler_set+0x94>)
  400e42:	681b      	ldr	r3, [r3, #0]
  400e44:	3301      	adds	r3, #1
  400e46:	429a      	cmp	r2, r3
  400e48:	d104      	bne.n	400e54 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400e4a:	4b07      	ldr	r3, [pc, #28]	; (400e68 <pio_handler_set+0x94>)
  400e4c:	681b      	ldr	r3, [r3, #0]
  400e4e:	3301      	adds	r3, #1
  400e50:	4a05      	ldr	r2, [pc, #20]	; (400e68 <pio_handler_set+0x94>)
  400e52:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e54:	683a      	ldr	r2, [r7, #0]
  400e56:	6879      	ldr	r1, [r7, #4]
  400e58:	68f8      	ldr	r0, [r7, #12]
  400e5a:	4b05      	ldr	r3, [pc, #20]	; (400e70 <pio_handler_set+0x9c>)
  400e5c:	4798      	blx	r3

	return 0;
  400e5e:	2300      	movs	r3, #0
}
  400e60:	4618      	mov	r0, r3
  400e62:	3718      	adds	r7, #24
  400e64:	46bd      	mov	sp, r7
  400e66:	bd80      	pop	{r7, pc}
  400e68:	20400900 	.word	0x20400900
  400e6c:	20400890 	.word	0x20400890
  400e70:	00400b5d 	.word	0x00400b5d

00400e74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e74:	b580      	push	{r7, lr}
  400e76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400e78:	210a      	movs	r1, #10
  400e7a:	4802      	ldr	r0, [pc, #8]	; (400e84 <PIOA_Handler+0x10>)
  400e7c:	4b02      	ldr	r3, [pc, #8]	; (400e88 <PIOA_Handler+0x14>)
  400e7e:	4798      	blx	r3
}
  400e80:	bf00      	nop
  400e82:	bd80      	pop	{r7, pc}
  400e84:	400e0e00 	.word	0x400e0e00
  400e88:	00400d21 	.word	0x00400d21

00400e8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e8c:	b580      	push	{r7, lr}
  400e8e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400e90:	210b      	movs	r1, #11
  400e92:	4802      	ldr	r0, [pc, #8]	; (400e9c <PIOB_Handler+0x10>)
  400e94:	4b02      	ldr	r3, [pc, #8]	; (400ea0 <PIOB_Handler+0x14>)
  400e96:	4798      	blx	r3
}
  400e98:	bf00      	nop
  400e9a:	bd80      	pop	{r7, pc}
  400e9c:	400e1000 	.word	0x400e1000
  400ea0:	00400d21 	.word	0x00400d21

00400ea4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ea4:	b580      	push	{r7, lr}
  400ea6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400ea8:	210c      	movs	r1, #12
  400eaa:	4802      	ldr	r0, [pc, #8]	; (400eb4 <PIOC_Handler+0x10>)
  400eac:	4b02      	ldr	r3, [pc, #8]	; (400eb8 <PIOC_Handler+0x14>)
  400eae:	4798      	blx	r3
}
  400eb0:	bf00      	nop
  400eb2:	bd80      	pop	{r7, pc}
  400eb4:	400e1200 	.word	0x400e1200
  400eb8:	00400d21 	.word	0x00400d21

00400ebc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ebc:	b580      	push	{r7, lr}
  400ebe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400ec0:	2110      	movs	r1, #16
  400ec2:	4802      	ldr	r0, [pc, #8]	; (400ecc <PIOD_Handler+0x10>)
  400ec4:	4b02      	ldr	r3, [pc, #8]	; (400ed0 <PIOD_Handler+0x14>)
  400ec6:	4798      	blx	r3
}
  400ec8:	bf00      	nop
  400eca:	bd80      	pop	{r7, pc}
  400ecc:	400e1400 	.word	0x400e1400
  400ed0:	00400d21 	.word	0x00400d21

00400ed4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ed4:	b580      	push	{r7, lr}
  400ed6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400ed8:	2111      	movs	r1, #17
  400eda:	4802      	ldr	r0, [pc, #8]	; (400ee4 <PIOE_Handler+0x10>)
  400edc:	4b02      	ldr	r3, [pc, #8]	; (400ee8 <PIOE_Handler+0x14>)
  400ede:	4798      	blx	r3
}
  400ee0:	bf00      	nop
  400ee2:	bd80      	pop	{r7, pc}
  400ee4:	400e1600 	.word	0x400e1600
  400ee8:	00400d21 	.word	0x00400d21

00400eec <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400eec:	b580      	push	{r7, lr}
  400eee:	b086      	sub	sp, #24
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	60f8      	str	r0, [r7, #12]
  400ef4:	460b      	mov	r3, r1
  400ef6:	607a      	str	r2, [r7, #4]
  400ef8:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  400efa:	2300      	movs	r3, #0
  400efc:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  400efe:	68f8      	ldr	r0, [r7, #12]
  400f00:	4b13      	ldr	r3, [pc, #76]	; (400f50 <pio_handler_set_priority+0x64>)
  400f02:	4798      	blx	r3
  400f04:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400f06:	f04f 31ff 	mov.w	r1, #4294967295
  400f0a:	68f8      	ldr	r0, [r7, #12]
  400f0c:	4b11      	ldr	r3, [pc, #68]	; (400f54 <pio_handler_set_priority+0x68>)
  400f0e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400f10:	68f8      	ldr	r0, [r7, #12]
  400f12:	4b11      	ldr	r3, [pc, #68]	; (400f58 <pio_handler_set_priority+0x6c>)
  400f14:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  400f16:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f1a:	4618      	mov	r0, r3
  400f1c:	4b0f      	ldr	r3, [pc, #60]	; (400f5c <pio_handler_set_priority+0x70>)
  400f1e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  400f20:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f24:	4618      	mov	r0, r3
  400f26:	4b0e      	ldr	r3, [pc, #56]	; (400f60 <pio_handler_set_priority+0x74>)
  400f28:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  400f2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f2e:	6879      	ldr	r1, [r7, #4]
  400f30:	4618      	mov	r0, r3
  400f32:	4b0c      	ldr	r3, [pc, #48]	; (400f64 <pio_handler_set_priority+0x78>)
  400f34:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  400f36:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f3a:	4618      	mov	r0, r3
  400f3c:	4b0a      	ldr	r3, [pc, #40]	; (400f68 <pio_handler_set_priority+0x7c>)
  400f3e:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  400f40:	6979      	ldr	r1, [r7, #20]
  400f42:	68f8      	ldr	r0, [r7, #12]
  400f44:	4b09      	ldr	r3, [pc, #36]	; (400f6c <pio_handler_set_priority+0x80>)
  400f46:	4798      	blx	r3
}
  400f48:	bf00      	nop
  400f4a:	3718      	adds	r7, #24
  400f4c:	46bd      	mov	sp, r7
  400f4e:	bd80      	pop	{r7, pc}
  400f50:	00400c19 	.word	0x00400c19
  400f54:	00400be5 	.word	0x00400be5
  400f58:	00400c01 	.word	0x00400c01
  400f5c:	00400c65 	.word	0x00400c65
  400f60:	00400c99 	.word	0x00400c99
  400f64:	00400ccd 	.word	0x00400ccd
  400f68:	00400c31 	.word	0x00400c31
  400f6c:	00400bc9 	.word	0x00400bc9

00400f70 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400f70:	b480      	push	{r7}
  400f72:	b083      	sub	sp, #12
  400f74:	af00      	add	r7, sp, #0
  400f76:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	3b01      	subs	r3, #1
  400f7c:	2b03      	cmp	r3, #3
  400f7e:	d81a      	bhi.n	400fb6 <pmc_mck_set_division+0x46>
  400f80:	a201      	add	r2, pc, #4	; (adr r2, 400f88 <pmc_mck_set_division+0x18>)
  400f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f86:	bf00      	nop
  400f88:	00400f99 	.word	0x00400f99
  400f8c:	00400f9f 	.word	0x00400f9f
  400f90:	00400fa7 	.word	0x00400fa7
  400f94:	00400faf 	.word	0x00400faf
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400f98:	2300      	movs	r3, #0
  400f9a:	607b      	str	r3, [r7, #4]
			break;
  400f9c:	e00e      	b.n	400fbc <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400fa2:	607b      	str	r3, [r7, #4]
			break;
  400fa4:	e00a      	b.n	400fbc <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
  400faa:	607b      	str	r3, [r7, #4]
			break;
  400fac:	e006      	b.n	400fbc <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400fae:	f44f 7300 	mov.w	r3, #512	; 0x200
  400fb2:	607b      	str	r3, [r7, #4]
			break;
  400fb4:	e002      	b.n	400fbc <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400fb6:	2300      	movs	r3, #0
  400fb8:	607b      	str	r3, [r7, #4]
			break;
  400fba:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400fbc:	490a      	ldr	r1, [pc, #40]	; (400fe8 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400fbe:	4b0a      	ldr	r3, [pc, #40]	; (400fe8 <pmc_mck_set_division+0x78>)
  400fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400fc6:	687b      	ldr	r3, [r7, #4]
  400fc8:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400fca:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400fcc:	bf00      	nop
  400fce:	4b06      	ldr	r3, [pc, #24]	; (400fe8 <pmc_mck_set_division+0x78>)
  400fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fd2:	f003 0308 	and.w	r3, r3, #8
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d0f9      	beq.n	400fce <pmc_mck_set_division+0x5e>
}
  400fda:	bf00      	nop
  400fdc:	370c      	adds	r7, #12
  400fde:	46bd      	mov	sp, r7
  400fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fe4:	4770      	bx	lr
  400fe6:	bf00      	nop
  400fe8:	400e0600 	.word	0x400e0600

00400fec <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400fec:	b480      	push	{r7}
  400fee:	b085      	sub	sp, #20
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ff4:	491d      	ldr	r1, [pc, #116]	; (40106c <pmc_switch_mck_to_pllack+0x80>)
  400ff6:	4b1d      	ldr	r3, [pc, #116]	; (40106c <pmc_switch_mck_to_pllack+0x80>)
  400ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	4313      	orrs	r3, r2
  401002:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401008:	60fb      	str	r3, [r7, #12]
  40100a:	e007      	b.n	40101c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40100c:	68fb      	ldr	r3, [r7, #12]
  40100e:	2b00      	cmp	r3, #0
  401010:	d101      	bne.n	401016 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401012:	2301      	movs	r3, #1
  401014:	e023      	b.n	40105e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401016:	68fb      	ldr	r3, [r7, #12]
  401018:	3b01      	subs	r3, #1
  40101a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40101c:	4b13      	ldr	r3, [pc, #76]	; (40106c <pmc_switch_mck_to_pllack+0x80>)
  40101e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401020:	f003 0308 	and.w	r3, r3, #8
  401024:	2b00      	cmp	r3, #0
  401026:	d0f1      	beq.n	40100c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401028:	4a10      	ldr	r2, [pc, #64]	; (40106c <pmc_switch_mck_to_pllack+0x80>)
  40102a:	4b10      	ldr	r3, [pc, #64]	; (40106c <pmc_switch_mck_to_pllack+0x80>)
  40102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40102e:	f023 0303 	bic.w	r3, r3, #3
  401032:	f043 0302 	orr.w	r3, r3, #2
  401036:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40103c:	60fb      	str	r3, [r7, #12]
  40103e:	e007      	b.n	401050 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401040:	68fb      	ldr	r3, [r7, #12]
  401042:	2b00      	cmp	r3, #0
  401044:	d101      	bne.n	40104a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401046:	2301      	movs	r3, #1
  401048:	e009      	b.n	40105e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40104a:	68fb      	ldr	r3, [r7, #12]
  40104c:	3b01      	subs	r3, #1
  40104e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401050:	4b06      	ldr	r3, [pc, #24]	; (40106c <pmc_switch_mck_to_pllack+0x80>)
  401052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401054:	f003 0308 	and.w	r3, r3, #8
  401058:	2b00      	cmp	r3, #0
  40105a:	d0f1      	beq.n	401040 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40105c:	2300      	movs	r3, #0
}
  40105e:	4618      	mov	r0, r3
  401060:	3714      	adds	r7, #20
  401062:	46bd      	mov	sp, r7
  401064:	f85d 7b04 	ldr.w	r7, [sp], #4
  401068:	4770      	bx	lr
  40106a:	bf00      	nop
  40106c:	400e0600 	.word	0x400e0600

00401070 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401070:	b480      	push	{r7}
  401072:	b083      	sub	sp, #12
  401074:	af00      	add	r7, sp, #0
  401076:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	2b01      	cmp	r3, #1
  40107c:	d105      	bne.n	40108a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40107e:	4907      	ldr	r1, [pc, #28]	; (40109c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401082:	689a      	ldr	r2, [r3, #8]
  401084:	4b06      	ldr	r3, [pc, #24]	; (4010a0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401086:	4313      	orrs	r3, r2
  401088:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40108a:	4b04      	ldr	r3, [pc, #16]	; (40109c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40108c:	4a05      	ldr	r2, [pc, #20]	; (4010a4 <pmc_switch_sclk_to_32kxtal+0x34>)
  40108e:	601a      	str	r2, [r3, #0]
}
  401090:	bf00      	nop
  401092:	370c      	adds	r7, #12
  401094:	46bd      	mov	sp, r7
  401096:	f85d 7b04 	ldr.w	r7, [sp], #4
  40109a:	4770      	bx	lr
  40109c:	400e1810 	.word	0x400e1810
  4010a0:	a5100000 	.word	0xa5100000
  4010a4:	a5000008 	.word	0xa5000008

004010a8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4010a8:	b480      	push	{r7}
  4010aa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4010ac:	4b09      	ldr	r3, [pc, #36]	; (4010d4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4010ae:	695b      	ldr	r3, [r3, #20]
  4010b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d007      	beq.n	4010c8 <pmc_osc_is_ready_32kxtal+0x20>
  4010b8:	4b07      	ldr	r3, [pc, #28]	; (4010d8 <pmc_osc_is_ready_32kxtal+0x30>)
  4010ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010c0:	2b00      	cmp	r3, #0
  4010c2:	d001      	beq.n	4010c8 <pmc_osc_is_ready_32kxtal+0x20>
  4010c4:	2301      	movs	r3, #1
  4010c6:	e000      	b.n	4010ca <pmc_osc_is_ready_32kxtal+0x22>
  4010c8:	2300      	movs	r3, #0
}
  4010ca:	4618      	mov	r0, r3
  4010cc:	46bd      	mov	sp, r7
  4010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010d2:	4770      	bx	lr
  4010d4:	400e1810 	.word	0x400e1810
  4010d8:	400e0600 	.word	0x400e0600

004010dc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4010dc:	b480      	push	{r7}
  4010de:	b083      	sub	sp, #12
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4010e4:	4915      	ldr	r1, [pc, #84]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  4010e6:	4b15      	ldr	r3, [pc, #84]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  4010e8:	6a1a      	ldr	r2, [r3, #32]
  4010ea:	4b15      	ldr	r3, [pc, #84]	; (401140 <pmc_switch_mainck_to_fastrc+0x64>)
  4010ec:	4313      	orrs	r3, r2
  4010ee:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4010f0:	bf00      	nop
  4010f2:	4b12      	ldr	r3, [pc, #72]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  4010f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4010fa:	2b00      	cmp	r3, #0
  4010fc:	d0f9      	beq.n	4010f2 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4010fe:	490f      	ldr	r1, [pc, #60]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  401100:	4b0e      	ldr	r3, [pc, #56]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  401102:	6a1a      	ldr	r2, [r3, #32]
  401104:	4b0f      	ldr	r3, [pc, #60]	; (401144 <pmc_switch_mainck_to_fastrc+0x68>)
  401106:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401108:	687a      	ldr	r2, [r7, #4]
  40110a:	4313      	orrs	r3, r2
  40110c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401110:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401112:	bf00      	nop
  401114:	4b09      	ldr	r3, [pc, #36]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  401116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40111c:	2b00      	cmp	r3, #0
  40111e:	d0f9      	beq.n	401114 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401120:	4906      	ldr	r1, [pc, #24]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  401122:	4b06      	ldr	r3, [pc, #24]	; (40113c <pmc_switch_mainck_to_fastrc+0x60>)
  401124:	6a1a      	ldr	r2, [r3, #32]
  401126:	4b08      	ldr	r3, [pc, #32]	; (401148 <pmc_switch_mainck_to_fastrc+0x6c>)
  401128:	4013      	ands	r3, r2
  40112a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40112e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401130:	bf00      	nop
  401132:	370c      	adds	r7, #12
  401134:	46bd      	mov	sp, r7
  401136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40113a:	4770      	bx	lr
  40113c:	400e0600 	.word	0x400e0600
  401140:	00370008 	.word	0x00370008
  401144:	ffc8ff8f 	.word	0xffc8ff8f
  401148:	fec8ffff 	.word	0xfec8ffff

0040114c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40114c:	b480      	push	{r7}
  40114e:	b083      	sub	sp, #12
  401150:	af00      	add	r7, sp, #0
  401152:	6078      	str	r0, [r7, #4]
  401154:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401156:	687b      	ldr	r3, [r7, #4]
  401158:	2b00      	cmp	r3, #0
  40115a:	d008      	beq.n	40116e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40115c:	4913      	ldr	r1, [pc, #76]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  40115e:	4b13      	ldr	r3, [pc, #76]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  401160:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401162:	4a13      	ldr	r2, [pc, #76]	; (4011b0 <pmc_switch_mainck_to_xtal+0x64>)
  401164:	401a      	ands	r2, r3
  401166:	4b13      	ldr	r3, [pc, #76]	; (4011b4 <pmc_switch_mainck_to_xtal+0x68>)
  401168:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40116a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40116c:	e018      	b.n	4011a0 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40116e:	490f      	ldr	r1, [pc, #60]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  401170:	4b0e      	ldr	r3, [pc, #56]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  401172:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401174:	4b10      	ldr	r3, [pc, #64]	; (4011b8 <pmc_switch_mainck_to_xtal+0x6c>)
  401176:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401178:	683a      	ldr	r2, [r7, #0]
  40117a:	0212      	lsls	r2, r2, #8
  40117c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40117e:	431a      	orrs	r2, r3
  401180:	4b0e      	ldr	r3, [pc, #56]	; (4011bc <pmc_switch_mainck_to_xtal+0x70>)
  401182:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401184:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401186:	bf00      	nop
  401188:	4b08      	ldr	r3, [pc, #32]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  40118a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40118c:	f003 0301 	and.w	r3, r3, #1
  401190:	2b00      	cmp	r3, #0
  401192:	d0f9      	beq.n	401188 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401194:	4905      	ldr	r1, [pc, #20]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  401196:	4b05      	ldr	r3, [pc, #20]	; (4011ac <pmc_switch_mainck_to_xtal+0x60>)
  401198:	6a1a      	ldr	r2, [r3, #32]
  40119a:	4b09      	ldr	r3, [pc, #36]	; (4011c0 <pmc_switch_mainck_to_xtal+0x74>)
  40119c:	4313      	orrs	r3, r2
  40119e:	620b      	str	r3, [r1, #32]
	}
}
  4011a0:	bf00      	nop
  4011a2:	370c      	adds	r7, #12
  4011a4:	46bd      	mov	sp, r7
  4011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011aa:	4770      	bx	lr
  4011ac:	400e0600 	.word	0x400e0600
  4011b0:	fec8fffc 	.word	0xfec8fffc
  4011b4:	01370002 	.word	0x01370002
  4011b8:	ffc8fffc 	.word	0xffc8fffc
  4011bc:	00370001 	.word	0x00370001
  4011c0:	01370000 	.word	0x01370000

004011c4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4011c4:	b480      	push	{r7}
  4011c6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4011c8:	4b04      	ldr	r3, [pc, #16]	; (4011dc <pmc_osc_is_ready_mainck+0x18>)
  4011ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4011d0:	4618      	mov	r0, r3
  4011d2:	46bd      	mov	sp, r7
  4011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011d8:	4770      	bx	lr
  4011da:	bf00      	nop
  4011dc:	400e0600 	.word	0x400e0600

004011e0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4011e0:	b480      	push	{r7}
  4011e2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4011e4:	4b04      	ldr	r3, [pc, #16]	; (4011f8 <pmc_disable_pllack+0x18>)
  4011e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4011ec:	bf00      	nop
  4011ee:	46bd      	mov	sp, r7
  4011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f4:	4770      	bx	lr
  4011f6:	bf00      	nop
  4011f8:	400e0600 	.word	0x400e0600

004011fc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4011fc:	b480      	push	{r7}
  4011fe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401200:	4b04      	ldr	r3, [pc, #16]	; (401214 <pmc_is_locked_pllack+0x18>)
  401202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401204:	f003 0302 	and.w	r3, r3, #2
}
  401208:	4618      	mov	r0, r3
  40120a:	46bd      	mov	sp, r7
  40120c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401210:	4770      	bx	lr
  401212:	bf00      	nop
  401214:	400e0600 	.word	0x400e0600

00401218 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401218:	b480      	push	{r7}
  40121a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  40121c:	4b04      	ldr	r3, [pc, #16]	; (401230 <pmc_is_locked_upll+0x18>)
  40121e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401220:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401224:	4618      	mov	r0, r3
  401226:	46bd      	mov	sp, r7
  401228:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122c:	4770      	bx	lr
  40122e:	bf00      	nop
  401230:	400e0600 	.word	0x400e0600

00401234 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401234:	b480      	push	{r7}
  401236:	b083      	sub	sp, #12
  401238:	af00      	add	r7, sp, #0
  40123a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40123c:	687b      	ldr	r3, [r7, #4]
  40123e:	2b3f      	cmp	r3, #63	; 0x3f
  401240:	d901      	bls.n	401246 <pmc_enable_periph_clk+0x12>
		return 1;
  401242:	2301      	movs	r3, #1
  401244:	e02f      	b.n	4012a6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401246:	687b      	ldr	r3, [r7, #4]
  401248:	2b1f      	cmp	r3, #31
  40124a:	d813      	bhi.n	401274 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40124c:	4b19      	ldr	r3, [pc, #100]	; (4012b4 <pmc_enable_periph_clk+0x80>)
  40124e:	699a      	ldr	r2, [r3, #24]
  401250:	2101      	movs	r1, #1
  401252:	687b      	ldr	r3, [r7, #4]
  401254:	fa01 f303 	lsl.w	r3, r1, r3
  401258:	401a      	ands	r2, r3
  40125a:	2101      	movs	r1, #1
  40125c:	687b      	ldr	r3, [r7, #4]
  40125e:	fa01 f303 	lsl.w	r3, r1, r3
  401262:	429a      	cmp	r2, r3
  401264:	d01e      	beq.n	4012a4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401266:	4a13      	ldr	r2, [pc, #76]	; (4012b4 <pmc_enable_periph_clk+0x80>)
  401268:	2101      	movs	r1, #1
  40126a:	687b      	ldr	r3, [r7, #4]
  40126c:	fa01 f303 	lsl.w	r3, r1, r3
  401270:	6113      	str	r3, [r2, #16]
  401272:	e017      	b.n	4012a4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401274:	687b      	ldr	r3, [r7, #4]
  401276:	3b20      	subs	r3, #32
  401278:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40127a:	4b0e      	ldr	r3, [pc, #56]	; (4012b4 <pmc_enable_periph_clk+0x80>)
  40127c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401280:	2101      	movs	r1, #1
  401282:	687b      	ldr	r3, [r7, #4]
  401284:	fa01 f303 	lsl.w	r3, r1, r3
  401288:	401a      	ands	r2, r3
  40128a:	2101      	movs	r1, #1
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	fa01 f303 	lsl.w	r3, r1, r3
  401292:	429a      	cmp	r2, r3
  401294:	d006      	beq.n	4012a4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401296:	4a07      	ldr	r2, [pc, #28]	; (4012b4 <pmc_enable_periph_clk+0x80>)
  401298:	2101      	movs	r1, #1
  40129a:	687b      	ldr	r3, [r7, #4]
  40129c:	fa01 f303 	lsl.w	r3, r1, r3
  4012a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4012a4:	2300      	movs	r3, #0
}
  4012a6:	4618      	mov	r0, r3
  4012a8:	370c      	adds	r7, #12
  4012aa:	46bd      	mov	sp, r7
  4012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012b0:	4770      	bx	lr
  4012b2:	bf00      	nop
  4012b4:	400e0600 	.word	0x400e0600

004012b8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4012b8:	b480      	push	{r7}
  4012ba:	b085      	sub	sp, #20
  4012bc:	af00      	add	r7, sp, #0
  4012be:	6078      	str	r0, [r7, #4]
  4012c0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4012c2:	2300      	movs	r3, #0
  4012c4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4012c6:	687b      	ldr	r3, [r7, #4]
  4012c8:	22ac      	movs	r2, #172	; 0xac
  4012ca:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4012cc:	683b      	ldr	r3, [r7, #0]
  4012ce:	681a      	ldr	r2, [r3, #0]
  4012d0:	683b      	ldr	r3, [r7, #0]
  4012d2:	685b      	ldr	r3, [r3, #4]
  4012d4:	fbb2 f3f3 	udiv	r3, r2, r3
  4012d8:	091b      	lsrs	r3, r3, #4
  4012da:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4012dc:	68fb      	ldr	r3, [r7, #12]
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d003      	beq.n	4012ea <uart_init+0x32>
  4012e2:	68fb      	ldr	r3, [r7, #12]
  4012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4012e8:	d301      	bcc.n	4012ee <uart_init+0x36>
		return 1;
  4012ea:	2301      	movs	r3, #1
  4012ec:	e00a      	b.n	401304 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4012ee:	687b      	ldr	r3, [r7, #4]
  4012f0:	68fa      	ldr	r2, [r7, #12]
  4012f2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4012f4:	683b      	ldr	r3, [r7, #0]
  4012f6:	689a      	ldr	r2, [r3, #8]
  4012f8:	687b      	ldr	r3, [r7, #4]
  4012fa:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4012fc:	687b      	ldr	r3, [r7, #4]
  4012fe:	2250      	movs	r2, #80	; 0x50
  401300:	601a      	str	r2, [r3, #0]

	return 0;
  401302:	2300      	movs	r3, #0
}
  401304:	4618      	mov	r0, r3
  401306:	3714      	adds	r7, #20
  401308:	46bd      	mov	sp, r7
  40130a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40130e:	4770      	bx	lr

00401310 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401310:	b480      	push	{r7}
  401312:	b083      	sub	sp, #12
  401314:	af00      	add	r7, sp, #0
  401316:	6078      	str	r0, [r7, #4]
  401318:	460b      	mov	r3, r1
  40131a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40131c:	687b      	ldr	r3, [r7, #4]
  40131e:	695b      	ldr	r3, [r3, #20]
  401320:	f003 0302 	and.w	r3, r3, #2
  401324:	2b00      	cmp	r3, #0
  401326:	d101      	bne.n	40132c <uart_write+0x1c>
		return 1;
  401328:	2301      	movs	r3, #1
  40132a:	e003      	b.n	401334 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40132c:	78fa      	ldrb	r2, [r7, #3]
  40132e:	687b      	ldr	r3, [r7, #4]
  401330:	61da      	str	r2, [r3, #28]
	return 0;
  401332:	2300      	movs	r3, #0
}
  401334:	4618      	mov	r0, r3
  401336:	370c      	adds	r7, #12
  401338:	46bd      	mov	sp, r7
  40133a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40133e:	4770      	bx	lr

00401340 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401340:	b480      	push	{r7}
  401342:	b083      	sub	sp, #12
  401344:	af00      	add	r7, sp, #0
  401346:	6078      	str	r0, [r7, #4]
  401348:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40134a:	687b      	ldr	r3, [r7, #4]
  40134c:	695b      	ldr	r3, [r3, #20]
  40134e:	f003 0301 	and.w	r3, r3, #1
  401352:	2b00      	cmp	r3, #0
  401354:	d101      	bne.n	40135a <uart_read+0x1a>
		return 1;
  401356:	2301      	movs	r3, #1
  401358:	e005      	b.n	401366 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40135a:	687b      	ldr	r3, [r7, #4]
  40135c:	699b      	ldr	r3, [r3, #24]
  40135e:	b2da      	uxtb	r2, r3
  401360:	683b      	ldr	r3, [r7, #0]
  401362:	701a      	strb	r2, [r3, #0]
	return 0;
  401364:	2300      	movs	r3, #0
}
  401366:	4618      	mov	r0, r3
  401368:	370c      	adds	r7, #12
  40136a:	46bd      	mov	sp, r7
  40136c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401370:	4770      	bx	lr
  401372:	bf00      	nop

00401374 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401374:	b480      	push	{r7}
  401376:	b089      	sub	sp, #36	; 0x24
  401378:	af00      	add	r7, sp, #0
  40137a:	60f8      	str	r0, [r7, #12]
  40137c:	60b9      	str	r1, [r7, #8]
  40137e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401380:	68bb      	ldr	r3, [r7, #8]
  401382:	011a      	lsls	r2, r3, #4
  401384:	687b      	ldr	r3, [r7, #4]
  401386:	429a      	cmp	r2, r3
  401388:	d802      	bhi.n	401390 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40138a:	2310      	movs	r3, #16
  40138c:	61fb      	str	r3, [r7, #28]
  40138e:	e001      	b.n	401394 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401390:	2308      	movs	r3, #8
  401392:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401394:	687b      	ldr	r3, [r7, #4]
  401396:	00da      	lsls	r2, r3, #3
  401398:	69fb      	ldr	r3, [r7, #28]
  40139a:	68b9      	ldr	r1, [r7, #8]
  40139c:	fb01 f303 	mul.w	r3, r1, r3
  4013a0:	085b      	lsrs	r3, r3, #1
  4013a2:	441a      	add	r2, r3
  4013a4:	69fb      	ldr	r3, [r7, #28]
  4013a6:	68b9      	ldr	r1, [r7, #8]
  4013a8:	fb01 f303 	mul.w	r3, r1, r3
  4013ac:	fbb2 f3f3 	udiv	r3, r2, r3
  4013b0:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4013b2:	69bb      	ldr	r3, [r7, #24]
  4013b4:	08db      	lsrs	r3, r3, #3
  4013b6:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4013b8:	69bb      	ldr	r3, [r7, #24]
  4013ba:	f003 0307 	and.w	r3, r3, #7
  4013be:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4013c0:	697b      	ldr	r3, [r7, #20]
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d003      	beq.n	4013ce <usart_set_async_baudrate+0x5a>
  4013c6:	697b      	ldr	r3, [r7, #20]
  4013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4013cc:	d301      	bcc.n	4013d2 <usart_set_async_baudrate+0x5e>
		return 1;
  4013ce:	2301      	movs	r3, #1
  4013d0:	e00f      	b.n	4013f2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4013d2:	69fb      	ldr	r3, [r7, #28]
  4013d4:	2b08      	cmp	r3, #8
  4013d6:	d105      	bne.n	4013e4 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	685b      	ldr	r3, [r3, #4]
  4013dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4013e0:	68fb      	ldr	r3, [r7, #12]
  4013e2:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4013e4:	693b      	ldr	r3, [r7, #16]
  4013e6:	041a      	lsls	r2, r3, #16
  4013e8:	697b      	ldr	r3, [r7, #20]
  4013ea:	431a      	orrs	r2, r3
  4013ec:	68fb      	ldr	r3, [r7, #12]
  4013ee:	621a      	str	r2, [r3, #32]

	return 0;
  4013f0:	2300      	movs	r3, #0
}
  4013f2:	4618      	mov	r0, r3
  4013f4:	3724      	adds	r7, #36	; 0x24
  4013f6:	46bd      	mov	sp, r7
  4013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013fc:	4770      	bx	lr
  4013fe:	bf00      	nop

00401400 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401400:	b580      	push	{r7, lr}
  401402:	b082      	sub	sp, #8
  401404:	af00      	add	r7, sp, #0
  401406:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401408:	6878      	ldr	r0, [r7, #4]
  40140a:	4b0d      	ldr	r3, [pc, #52]	; (401440 <usart_reset+0x40>)
  40140c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40140e:	687b      	ldr	r3, [r7, #4]
  401410:	2200      	movs	r2, #0
  401412:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401414:	687b      	ldr	r3, [r7, #4]
  401416:	2200      	movs	r2, #0
  401418:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40141a:	687b      	ldr	r3, [r7, #4]
  40141c:	2200      	movs	r2, #0
  40141e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401420:	6878      	ldr	r0, [r7, #4]
  401422:	4b08      	ldr	r3, [pc, #32]	; (401444 <usart_reset+0x44>)
  401424:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401426:	6878      	ldr	r0, [r7, #4]
  401428:	4b07      	ldr	r3, [pc, #28]	; (401448 <usart_reset+0x48>)
  40142a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  40142c:	6878      	ldr	r0, [r7, #4]
  40142e:	4b07      	ldr	r3, [pc, #28]	; (40144c <usart_reset+0x4c>)
  401430:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401432:	6878      	ldr	r0, [r7, #4]
  401434:	4b06      	ldr	r3, [pc, #24]	; (401450 <usart_reset+0x50>)
  401436:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401438:	bf00      	nop
  40143a:	3708      	adds	r7, #8
  40143c:	46bd      	mov	sp, r7
  40143e:	bd80      	pop	{r7, pc}
  401440:	004015e9 	.word	0x004015e9
  401444:	004014f5 	.word	0x004014f5
  401448:	0040152d 	.word	0x0040152d
  40144c:	00401549 	.word	0x00401549
  401450:	00401565 	.word	0x00401565

00401454 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401454:	b580      	push	{r7, lr}
  401456:	b084      	sub	sp, #16
  401458:	af00      	add	r7, sp, #0
  40145a:	60f8      	str	r0, [r7, #12]
  40145c:	60b9      	str	r1, [r7, #8]
  40145e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401460:	68f8      	ldr	r0, [r7, #12]
  401462:	4b1a      	ldr	r3, [pc, #104]	; (4014cc <usart_init_rs232+0x78>)
  401464:	4798      	blx	r3

	ul_reg_val = 0;
  401466:	4b1a      	ldr	r3, [pc, #104]	; (4014d0 <usart_init_rs232+0x7c>)
  401468:	2200      	movs	r2, #0
  40146a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40146c:	68bb      	ldr	r3, [r7, #8]
  40146e:	2b00      	cmp	r3, #0
  401470:	d009      	beq.n	401486 <usart_init_rs232+0x32>
  401472:	68bb      	ldr	r3, [r7, #8]
  401474:	681b      	ldr	r3, [r3, #0]
  401476:	687a      	ldr	r2, [r7, #4]
  401478:	4619      	mov	r1, r3
  40147a:	68f8      	ldr	r0, [r7, #12]
  40147c:	4b15      	ldr	r3, [pc, #84]	; (4014d4 <usart_init_rs232+0x80>)
  40147e:	4798      	blx	r3
  401480:	4603      	mov	r3, r0
  401482:	2b00      	cmp	r3, #0
  401484:	d001      	beq.n	40148a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401486:	2301      	movs	r3, #1
  401488:	e01b      	b.n	4014c2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40148a:	68bb      	ldr	r3, [r7, #8]
  40148c:	685a      	ldr	r2, [r3, #4]
  40148e:	68bb      	ldr	r3, [r7, #8]
  401490:	689b      	ldr	r3, [r3, #8]
  401492:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401494:	68bb      	ldr	r3, [r7, #8]
  401496:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401498:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40149a:	68bb      	ldr	r3, [r7, #8]
  40149c:	68db      	ldr	r3, [r3, #12]
  40149e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014a0:	4b0b      	ldr	r3, [pc, #44]	; (4014d0 <usart_init_rs232+0x7c>)
  4014a2:	681b      	ldr	r3, [r3, #0]
  4014a4:	4313      	orrs	r3, r2
  4014a6:	4a0a      	ldr	r2, [pc, #40]	; (4014d0 <usart_init_rs232+0x7c>)
  4014a8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4014aa:	4b09      	ldr	r3, [pc, #36]	; (4014d0 <usart_init_rs232+0x7c>)
  4014ac:	681b      	ldr	r3, [r3, #0]
  4014ae:	4a08      	ldr	r2, [pc, #32]	; (4014d0 <usart_init_rs232+0x7c>)
  4014b0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4014b2:	68fb      	ldr	r3, [r7, #12]
  4014b4:	685a      	ldr	r2, [r3, #4]
  4014b6:	4b06      	ldr	r3, [pc, #24]	; (4014d0 <usart_init_rs232+0x7c>)
  4014b8:	681b      	ldr	r3, [r3, #0]
  4014ba:	431a      	orrs	r2, r3
  4014bc:	68fb      	ldr	r3, [r7, #12]
  4014be:	605a      	str	r2, [r3, #4]

	return 0;
  4014c0:	2300      	movs	r3, #0
}
  4014c2:	4618      	mov	r0, r3
  4014c4:	3710      	adds	r7, #16
  4014c6:	46bd      	mov	sp, r7
  4014c8:	bd80      	pop	{r7, pc}
  4014ca:	bf00      	nop
  4014cc:	00401401 	.word	0x00401401
  4014d0:	20400904 	.word	0x20400904
  4014d4:	00401375 	.word	0x00401375

004014d8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4014d8:	b480      	push	{r7}
  4014da:	b083      	sub	sp, #12
  4014dc:	af00      	add	r7, sp, #0
  4014de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	2240      	movs	r2, #64	; 0x40
  4014e4:	601a      	str	r2, [r3, #0]
}
  4014e6:	bf00      	nop
  4014e8:	370c      	adds	r7, #12
  4014ea:	46bd      	mov	sp, r7
  4014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop

004014f4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4014f4:	b480      	push	{r7}
  4014f6:	b083      	sub	sp, #12
  4014f8:	af00      	add	r7, sp, #0
  4014fa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4014fc:	687b      	ldr	r3, [r7, #4]
  4014fe:	2288      	movs	r2, #136	; 0x88
  401500:	601a      	str	r2, [r3, #0]
}
  401502:	bf00      	nop
  401504:	370c      	adds	r7, #12
  401506:	46bd      	mov	sp, r7
  401508:	f85d 7b04 	ldr.w	r7, [sp], #4
  40150c:	4770      	bx	lr
  40150e:	bf00      	nop

00401510 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	2210      	movs	r2, #16
  40151c:	601a      	str	r2, [r3, #0]
}
  40151e:	bf00      	nop
  401520:	370c      	adds	r7, #12
  401522:	46bd      	mov	sp, r7
  401524:	f85d 7b04 	ldr.w	r7, [sp], #4
  401528:	4770      	bx	lr
  40152a:	bf00      	nop

0040152c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40152c:	b480      	push	{r7}
  40152e:	b083      	sub	sp, #12
  401530:	af00      	add	r7, sp, #0
  401532:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401534:	687b      	ldr	r3, [r7, #4]
  401536:	2224      	movs	r2, #36	; 0x24
  401538:	601a      	str	r2, [r3, #0]
}
  40153a:	bf00      	nop
  40153c:	370c      	adds	r7, #12
  40153e:	46bd      	mov	sp, r7
  401540:	f85d 7b04 	ldr.w	r7, [sp], #4
  401544:	4770      	bx	lr
  401546:	bf00      	nop

00401548 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401548:	b480      	push	{r7}
  40154a:	b083      	sub	sp, #12
  40154c:	af00      	add	r7, sp, #0
  40154e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401550:	687b      	ldr	r3, [r7, #4]
  401552:	f44f 7280 	mov.w	r2, #256	; 0x100
  401556:	601a      	str	r2, [r3, #0]
}
  401558:	bf00      	nop
  40155a:	370c      	adds	r7, #12
  40155c:	46bd      	mov	sp, r7
  40155e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401562:	4770      	bx	lr

00401564 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401564:	b480      	push	{r7}
  401566:	b083      	sub	sp, #12
  401568:	af00      	add	r7, sp, #0
  40156a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40156c:	687b      	ldr	r3, [r7, #4]
  40156e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401572:	601a      	str	r2, [r3, #0]
}
  401574:	bf00      	nop
  401576:	370c      	adds	r7, #12
  401578:	46bd      	mov	sp, r7
  40157a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40157e:	4770      	bx	lr

00401580 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401580:	b480      	push	{r7}
  401582:	b083      	sub	sp, #12
  401584:	af00      	add	r7, sp, #0
  401586:	6078      	str	r0, [r7, #4]
  401588:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40158a:	687b      	ldr	r3, [r7, #4]
  40158c:	695b      	ldr	r3, [r3, #20]
  40158e:	f003 0302 	and.w	r3, r3, #2
  401592:	2b00      	cmp	r3, #0
  401594:	d101      	bne.n	40159a <usart_write+0x1a>
		return 1;
  401596:	2301      	movs	r3, #1
  401598:	e005      	b.n	4015a6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40159a:	683b      	ldr	r3, [r7, #0]
  40159c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4015a0:	687b      	ldr	r3, [r7, #4]
  4015a2:	61da      	str	r2, [r3, #28]
	return 0;
  4015a4:	2300      	movs	r3, #0
}
  4015a6:	4618      	mov	r0, r3
  4015a8:	370c      	adds	r7, #12
  4015aa:	46bd      	mov	sp, r7
  4015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b0:	4770      	bx	lr
  4015b2:	bf00      	nop

004015b4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4015b4:	b480      	push	{r7}
  4015b6:	b083      	sub	sp, #12
  4015b8:	af00      	add	r7, sp, #0
  4015ba:	6078      	str	r0, [r7, #4]
  4015bc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4015be:	687b      	ldr	r3, [r7, #4]
  4015c0:	695b      	ldr	r3, [r3, #20]
  4015c2:	f003 0301 	and.w	r3, r3, #1
  4015c6:	2b00      	cmp	r3, #0
  4015c8:	d101      	bne.n	4015ce <usart_read+0x1a>
		return 1;
  4015ca:	2301      	movs	r3, #1
  4015cc:	e006      	b.n	4015dc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4015ce:	687b      	ldr	r3, [r7, #4]
  4015d0:	699b      	ldr	r3, [r3, #24]
  4015d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4015d6:	683b      	ldr	r3, [r7, #0]
  4015d8:	601a      	str	r2, [r3, #0]

	return 0;
  4015da:	2300      	movs	r3, #0
}
  4015dc:	4618      	mov	r0, r3
  4015de:	370c      	adds	r7, #12
  4015e0:	46bd      	mov	sp, r7
  4015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e6:	4770      	bx	lr

004015e8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4015e8:	b480      	push	{r7}
  4015ea:	b083      	sub	sp, #12
  4015ec:	af00      	add	r7, sp, #0
  4015ee:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4015f0:	687b      	ldr	r3, [r7, #4]
  4015f2:	4a04      	ldr	r2, [pc, #16]	; (401604 <usart_disable_writeprotect+0x1c>)
  4015f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4015f8:	bf00      	nop
  4015fa:	370c      	adds	r7, #12
  4015fc:	46bd      	mov	sp, r7
  4015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401602:	4770      	bx	lr
  401604:	55534100 	.word	0x55534100

00401608 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401608:	b480      	push	{r7}
  40160a:	b083      	sub	sp, #12
  40160c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40160e:	f3ef 8310 	mrs	r3, PRIMASK
  401612:	607b      	str	r3, [r7, #4]
  return(result);
  401614:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401616:	2b00      	cmp	r3, #0
  401618:	bf0c      	ite	eq
  40161a:	2301      	moveq	r3, #1
  40161c:	2300      	movne	r3, #0
  40161e:	b2db      	uxtb	r3, r3
  401620:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401622:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401624:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401628:	4b04      	ldr	r3, [pc, #16]	; (40163c <cpu_irq_save+0x34>)
  40162a:	2200      	movs	r2, #0
  40162c:	701a      	strb	r2, [r3, #0]
	return flags;
  40162e:	683b      	ldr	r3, [r7, #0]
}
  401630:	4618      	mov	r0, r3
  401632:	370c      	adds	r7, #12
  401634:	46bd      	mov	sp, r7
  401636:	f85d 7b04 	ldr.w	r7, [sp], #4
  40163a:	4770      	bx	lr
  40163c:	20400000 	.word	0x20400000

00401640 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401640:	b480      	push	{r7}
  401642:	b083      	sub	sp, #12
  401644:	af00      	add	r7, sp, #0
  401646:	6078      	str	r0, [r7, #4]
	return (flags);
  401648:	687b      	ldr	r3, [r7, #4]
  40164a:	2b00      	cmp	r3, #0
  40164c:	bf14      	ite	ne
  40164e:	2301      	movne	r3, #1
  401650:	2300      	moveq	r3, #0
  401652:	b2db      	uxtb	r3, r3
}
  401654:	4618      	mov	r0, r3
  401656:	370c      	adds	r7, #12
  401658:	46bd      	mov	sp, r7
  40165a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40165e:	4770      	bx	lr

00401660 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401660:	b580      	push	{r7, lr}
  401662:	b082      	sub	sp, #8
  401664:	af00      	add	r7, sp, #0
  401666:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401668:	6878      	ldr	r0, [r7, #4]
  40166a:	4b07      	ldr	r3, [pc, #28]	; (401688 <cpu_irq_restore+0x28>)
  40166c:	4798      	blx	r3
  40166e:	4603      	mov	r3, r0
  401670:	2b00      	cmp	r3, #0
  401672:	d005      	beq.n	401680 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401674:	4b05      	ldr	r3, [pc, #20]	; (40168c <cpu_irq_restore+0x2c>)
  401676:	2201      	movs	r2, #1
  401678:	701a      	strb	r2, [r3, #0]
  40167a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40167e:	b662      	cpsie	i
}
  401680:	bf00      	nop
  401682:	3708      	adds	r7, #8
  401684:	46bd      	mov	sp, r7
  401686:	bd80      	pop	{r7, pc}
  401688:	00401641 	.word	0x00401641
  40168c:	20400000 	.word	0x20400000

00401690 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401690:	b580      	push	{r7, lr}
  401692:	b084      	sub	sp, #16
  401694:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401696:	4b1e      	ldr	r3, [pc, #120]	; (401710 <Reset_Handler+0x80>)
  401698:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40169a:	4b1e      	ldr	r3, [pc, #120]	; (401714 <Reset_Handler+0x84>)
  40169c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  40169e:	68fa      	ldr	r2, [r7, #12]
  4016a0:	68bb      	ldr	r3, [r7, #8]
  4016a2:	429a      	cmp	r2, r3
  4016a4:	d00c      	beq.n	4016c0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4016a6:	e007      	b.n	4016b8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4016a8:	68bb      	ldr	r3, [r7, #8]
  4016aa:	1d1a      	adds	r2, r3, #4
  4016ac:	60ba      	str	r2, [r7, #8]
  4016ae:	68fa      	ldr	r2, [r7, #12]
  4016b0:	1d11      	adds	r1, r2, #4
  4016b2:	60f9      	str	r1, [r7, #12]
  4016b4:	6812      	ldr	r2, [r2, #0]
  4016b6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4016b8:	68bb      	ldr	r3, [r7, #8]
  4016ba:	4a17      	ldr	r2, [pc, #92]	; (401718 <Reset_Handler+0x88>)
  4016bc:	4293      	cmp	r3, r2
  4016be:	d3f3      	bcc.n	4016a8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4016c0:	4b16      	ldr	r3, [pc, #88]	; (40171c <Reset_Handler+0x8c>)
  4016c2:	60bb      	str	r3, [r7, #8]
  4016c4:	e004      	b.n	4016d0 <Reset_Handler+0x40>
                *pDest++ = 0;
  4016c6:	68bb      	ldr	r3, [r7, #8]
  4016c8:	1d1a      	adds	r2, r3, #4
  4016ca:	60ba      	str	r2, [r7, #8]
  4016cc:	2200      	movs	r2, #0
  4016ce:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4016d0:	68bb      	ldr	r3, [r7, #8]
  4016d2:	4a13      	ldr	r2, [pc, #76]	; (401720 <Reset_Handler+0x90>)
  4016d4:	4293      	cmp	r3, r2
  4016d6:	d3f6      	bcc.n	4016c6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4016d8:	4b12      	ldr	r3, [pc, #72]	; (401724 <Reset_Handler+0x94>)
  4016da:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4016dc:	4a12      	ldr	r2, [pc, #72]	; (401728 <Reset_Handler+0x98>)
  4016de:	68fb      	ldr	r3, [r7, #12]
  4016e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4016e4:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4016e6:	4b11      	ldr	r3, [pc, #68]	; (40172c <Reset_Handler+0x9c>)
  4016e8:	4798      	blx	r3
  4016ea:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4016ec:	4a10      	ldr	r2, [pc, #64]	; (401730 <Reset_Handler+0xa0>)
  4016ee:	4b10      	ldr	r3, [pc, #64]	; (401730 <Reset_Handler+0xa0>)
  4016f0:	681b      	ldr	r3, [r3, #0]
  4016f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4016f6:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4016f8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4016fc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401700:	6878      	ldr	r0, [r7, #4]
  401702:	4b0c      	ldr	r3, [pc, #48]	; (401734 <Reset_Handler+0xa4>)
  401704:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401706:	4b0c      	ldr	r3, [pc, #48]	; (401738 <Reset_Handler+0xa8>)
  401708:	4798      	blx	r3

        /* Branch to main function */
        main();
  40170a:	4b0c      	ldr	r3, [pc, #48]	; (40173c <Reset_Handler+0xac>)
  40170c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40170e:	e7fe      	b.n	40170e <Reset_Handler+0x7e>
  401710:	0040553c 	.word	0x0040553c
  401714:	20400000 	.word	0x20400000
  401718:	20400874 	.word	0x20400874
  40171c:	20400874 	.word	0x20400874
  401720:	20400954 	.word	0x20400954
  401724:	00400000 	.word	0x00400000
  401728:	e000ed00 	.word	0xe000ed00
  40172c:	00401609 	.word	0x00401609
  401730:	e000ed88 	.word	0xe000ed88
  401734:	00401661 	.word	0x00401661
  401738:	004022c5 	.word	0x004022c5
  40173c:	004021e9 	.word	0x004021e9

00401740 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401740:	b480      	push	{r7}
  401742:	af00      	add	r7, sp, #0
        while (1) {
        }
  401744:	e7fe      	b.n	401744 <Dummy_Handler+0x4>
  401746:	bf00      	nop

00401748 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401748:	b480      	push	{r7}
  40174a:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40174c:	4b52      	ldr	r3, [pc, #328]	; (401898 <SystemCoreClockUpdate+0x150>)
  40174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401750:	f003 0303 	and.w	r3, r3, #3
  401754:	2b01      	cmp	r3, #1
  401756:	d014      	beq.n	401782 <SystemCoreClockUpdate+0x3a>
  401758:	2b01      	cmp	r3, #1
  40175a:	d302      	bcc.n	401762 <SystemCoreClockUpdate+0x1a>
  40175c:	2b02      	cmp	r3, #2
  40175e:	d038      	beq.n	4017d2 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401760:	e07a      	b.n	401858 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401762:	4b4e      	ldr	r3, [pc, #312]	; (40189c <SystemCoreClockUpdate+0x154>)
  401764:	695b      	ldr	r3, [r3, #20]
  401766:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40176a:	2b00      	cmp	r3, #0
  40176c:	d004      	beq.n	401778 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40176e:	4b4c      	ldr	r3, [pc, #304]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401774:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  401776:	e06f      	b.n	401858 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401778:	4b49      	ldr	r3, [pc, #292]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  40177a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40177e:	601a      	str	r2, [r3, #0]
      }
    break;
  401780:	e06a      	b.n	401858 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401782:	4b45      	ldr	r3, [pc, #276]	; (401898 <SystemCoreClockUpdate+0x150>)
  401784:	6a1b      	ldr	r3, [r3, #32]
  401786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40178a:	2b00      	cmp	r3, #0
  40178c:	d003      	beq.n	401796 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40178e:	4b44      	ldr	r3, [pc, #272]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401790:	4a44      	ldr	r2, [pc, #272]	; (4018a4 <SystemCoreClockUpdate+0x15c>)
  401792:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  401794:	e060      	b.n	401858 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401796:	4b42      	ldr	r3, [pc, #264]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401798:	4a43      	ldr	r2, [pc, #268]	; (4018a8 <SystemCoreClockUpdate+0x160>)
  40179a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40179c:	4b3e      	ldr	r3, [pc, #248]	; (401898 <SystemCoreClockUpdate+0x150>)
  40179e:	6a1b      	ldr	r3, [r3, #32]
  4017a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017a4:	2b10      	cmp	r3, #16
  4017a6:	d004      	beq.n	4017b2 <SystemCoreClockUpdate+0x6a>
  4017a8:	2b20      	cmp	r3, #32
  4017aa:	d008      	beq.n	4017be <SystemCoreClockUpdate+0x76>
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d00e      	beq.n	4017ce <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4017b0:	e00e      	b.n	4017d0 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4017b2:	4b3b      	ldr	r3, [pc, #236]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  4017b4:	681b      	ldr	r3, [r3, #0]
  4017b6:	005b      	lsls	r3, r3, #1
  4017b8:	4a39      	ldr	r2, [pc, #228]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  4017ba:	6013      	str	r3, [r2, #0]
          break;
  4017bc:	e008      	b.n	4017d0 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4017be:	4b38      	ldr	r3, [pc, #224]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  4017c0:	681a      	ldr	r2, [r3, #0]
  4017c2:	4613      	mov	r3, r2
  4017c4:	005b      	lsls	r3, r3, #1
  4017c6:	4413      	add	r3, r2
  4017c8:	4a35      	ldr	r2, [pc, #212]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  4017ca:	6013      	str	r3, [r2, #0]
          break;
  4017cc:	e000      	b.n	4017d0 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4017ce:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4017d0:	e042      	b.n	401858 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017d2:	4b31      	ldr	r3, [pc, #196]	; (401898 <SystemCoreClockUpdate+0x150>)
  4017d4:	6a1b      	ldr	r3, [r3, #32]
  4017d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017da:	2b00      	cmp	r3, #0
  4017dc:	d003      	beq.n	4017e6 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4017de:	4b30      	ldr	r3, [pc, #192]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  4017e0:	4a30      	ldr	r2, [pc, #192]	; (4018a4 <SystemCoreClockUpdate+0x15c>)
  4017e2:	601a      	str	r2, [r3, #0]
  4017e4:	e01c      	b.n	401820 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017e6:	4b2e      	ldr	r3, [pc, #184]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  4017e8:	4a2f      	ldr	r2, [pc, #188]	; (4018a8 <SystemCoreClockUpdate+0x160>)
  4017ea:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017ec:	4b2a      	ldr	r3, [pc, #168]	; (401898 <SystemCoreClockUpdate+0x150>)
  4017ee:	6a1b      	ldr	r3, [r3, #32]
  4017f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017f4:	2b10      	cmp	r3, #16
  4017f6:	d004      	beq.n	401802 <SystemCoreClockUpdate+0xba>
  4017f8:	2b20      	cmp	r3, #32
  4017fa:	d008      	beq.n	40180e <SystemCoreClockUpdate+0xc6>
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	d00e      	beq.n	40181e <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401800:	e00e      	b.n	401820 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401802:	4b27      	ldr	r3, [pc, #156]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401804:	681b      	ldr	r3, [r3, #0]
  401806:	005b      	lsls	r3, r3, #1
  401808:	4a25      	ldr	r2, [pc, #148]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  40180a:	6013      	str	r3, [r2, #0]
          break;
  40180c:	e008      	b.n	401820 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40180e:	4b24      	ldr	r3, [pc, #144]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401810:	681a      	ldr	r2, [r3, #0]
  401812:	4613      	mov	r3, r2
  401814:	005b      	lsls	r3, r3, #1
  401816:	4413      	add	r3, r2
  401818:	4a21      	ldr	r2, [pc, #132]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  40181a:	6013      	str	r3, [r2, #0]
          break;
  40181c:	e000      	b.n	401820 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  40181e:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401820:	4b1d      	ldr	r3, [pc, #116]	; (401898 <SystemCoreClockUpdate+0x150>)
  401822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401824:	f003 0303 	and.w	r3, r3, #3
  401828:	2b02      	cmp	r3, #2
  40182a:	d114      	bne.n	401856 <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40182c:	4b1a      	ldr	r3, [pc, #104]	; (401898 <SystemCoreClockUpdate+0x150>)
  40182e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401830:	4b1e      	ldr	r3, [pc, #120]	; (4018ac <SystemCoreClockUpdate+0x164>)
  401832:	4013      	ands	r3, r2
  401834:	0c1b      	lsrs	r3, r3, #16
  401836:	3301      	adds	r3, #1
  401838:	4a19      	ldr	r2, [pc, #100]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  40183a:	6812      	ldr	r2, [r2, #0]
  40183c:	fb02 f303 	mul.w	r3, r2, r3
  401840:	4a17      	ldr	r2, [pc, #92]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401842:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401844:	4b14      	ldr	r3, [pc, #80]	; (401898 <SystemCoreClockUpdate+0x150>)
  401846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401848:	b2db      	uxtb	r3, r3
  40184a:	4a15      	ldr	r2, [pc, #84]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  40184c:	6812      	ldr	r2, [r2, #0]
  40184e:	fbb2 f3f3 	udiv	r3, r2, r3
  401852:	4a13      	ldr	r2, [pc, #76]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401854:	6013      	str	r3, [r2, #0]
      }
    break;
  401856:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401858:	4b0f      	ldr	r3, [pc, #60]	; (401898 <SystemCoreClockUpdate+0x150>)
  40185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40185c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401860:	2b70      	cmp	r3, #112	; 0x70
  401862:	d108      	bne.n	401876 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401864:	4b0e      	ldr	r3, [pc, #56]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401866:	681b      	ldr	r3, [r3, #0]
  401868:	4a11      	ldr	r2, [pc, #68]	; (4018b0 <SystemCoreClockUpdate+0x168>)
  40186a:	fba2 2303 	umull	r2, r3, r2, r3
  40186e:	085b      	lsrs	r3, r3, #1
  401870:	4a0b      	ldr	r2, [pc, #44]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401872:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401874:	e00a      	b.n	40188c <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401876:	4b08      	ldr	r3, [pc, #32]	; (401898 <SystemCoreClockUpdate+0x150>)
  401878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40187a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40187e:	091b      	lsrs	r3, r3, #4
  401880:	4a07      	ldr	r2, [pc, #28]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  401882:	6812      	ldr	r2, [r2, #0]
  401884:	fa22 f303 	lsr.w	r3, r2, r3
  401888:	4a05      	ldr	r2, [pc, #20]	; (4018a0 <SystemCoreClockUpdate+0x158>)
  40188a:	6013      	str	r3, [r2, #0]
  }
}
  40188c:	bf00      	nop
  40188e:	46bd      	mov	sp, r7
  401890:	f85d 7b04 	ldr.w	r7, [sp], #4
  401894:	4770      	bx	lr
  401896:	bf00      	nop
  401898:	400e0600 	.word	0x400e0600
  40189c:	400e1810 	.word	0x400e1810
  4018a0:	20400004 	.word	0x20400004
  4018a4:	00b71b00 	.word	0x00b71b00
  4018a8:	003d0900 	.word	0x003d0900
  4018ac:	07ff0000 	.word	0x07ff0000
  4018b0:	aaaaaaab 	.word	0xaaaaaaab

004018b4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4018b4:	b480      	push	{r7}
  4018b6:	b083      	sub	sp, #12
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4018bc:	687b      	ldr	r3, [r7, #4]
  4018be:	4a19      	ldr	r2, [pc, #100]	; (401924 <system_init_flash+0x70>)
  4018c0:	4293      	cmp	r3, r2
  4018c2:	d804      	bhi.n	4018ce <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018c4:	4b18      	ldr	r3, [pc, #96]	; (401928 <system_init_flash+0x74>)
  4018c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ca:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4018cc:	e023      	b.n	401916 <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4018ce:	687b      	ldr	r3, [r7, #4]
  4018d0:	4a16      	ldr	r2, [pc, #88]	; (40192c <system_init_flash+0x78>)
  4018d2:	4293      	cmp	r3, r2
  4018d4:	d803      	bhi.n	4018de <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018d6:	4b14      	ldr	r3, [pc, #80]	; (401928 <system_init_flash+0x74>)
  4018d8:	4a15      	ldr	r2, [pc, #84]	; (401930 <system_init_flash+0x7c>)
  4018da:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4018dc:	e01b      	b.n	401916 <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018de:	687b      	ldr	r3, [r7, #4]
  4018e0:	4a14      	ldr	r2, [pc, #80]	; (401934 <system_init_flash+0x80>)
  4018e2:	4293      	cmp	r3, r2
  4018e4:	d803      	bhi.n	4018ee <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018e6:	4b10      	ldr	r3, [pc, #64]	; (401928 <system_init_flash+0x74>)
  4018e8:	4a13      	ldr	r2, [pc, #76]	; (401938 <system_init_flash+0x84>)
  4018ea:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4018ec:	e013      	b.n	401916 <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	4a12      	ldr	r2, [pc, #72]	; (40193c <system_init_flash+0x88>)
  4018f2:	4293      	cmp	r3, r2
  4018f4:	d803      	bhi.n	4018fe <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4018f6:	4b0c      	ldr	r3, [pc, #48]	; (401928 <system_init_flash+0x74>)
  4018f8:	4a11      	ldr	r2, [pc, #68]	; (401940 <system_init_flash+0x8c>)
  4018fa:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4018fc:	e00b      	b.n	401916 <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4018fe:	687b      	ldr	r3, [r7, #4]
  401900:	4a10      	ldr	r2, [pc, #64]	; (401944 <system_init_flash+0x90>)
  401902:	4293      	cmp	r3, r2
  401904:	d804      	bhi.n	401910 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401906:	4b08      	ldr	r3, [pc, #32]	; (401928 <system_init_flash+0x74>)
  401908:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40190c:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  40190e:	e002      	b.n	401916 <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401910:	4b05      	ldr	r3, [pc, #20]	; (401928 <system_init_flash+0x74>)
  401912:	4a0d      	ldr	r2, [pc, #52]	; (401948 <system_init_flash+0x94>)
  401914:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401916:	bf00      	nop
  401918:	370c      	adds	r7, #12
  40191a:	46bd      	mov	sp, r7
  40191c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	01312cff 	.word	0x01312cff
  401928:	400e0c00 	.word	0x400e0c00
  40192c:	026259ff 	.word	0x026259ff
  401930:	04000100 	.word	0x04000100
  401934:	039386ff 	.word	0x039386ff
  401938:	04000200 	.word	0x04000200
  40193c:	04c4b3ff 	.word	0x04c4b3ff
  401940:	04000300 	.word	0x04000300
  401944:	05f5e0ff 	.word	0x05f5e0ff
  401948:	04000500 	.word	0x04000500

0040194c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40194c:	b480      	push	{r7}
  40194e:	b085      	sub	sp, #20
  401950:	af00      	add	r7, sp, #0
  401952:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401954:	4b10      	ldr	r3, [pc, #64]	; (401998 <_sbrk+0x4c>)
  401956:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401958:	4b10      	ldr	r3, [pc, #64]	; (40199c <_sbrk+0x50>)
  40195a:	681b      	ldr	r3, [r3, #0]
  40195c:	2b00      	cmp	r3, #0
  40195e:	d102      	bne.n	401966 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401960:	4b0e      	ldr	r3, [pc, #56]	; (40199c <_sbrk+0x50>)
  401962:	4a0f      	ldr	r2, [pc, #60]	; (4019a0 <_sbrk+0x54>)
  401964:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401966:	4b0d      	ldr	r3, [pc, #52]	; (40199c <_sbrk+0x50>)
  401968:	681b      	ldr	r3, [r3, #0]
  40196a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40196c:	68ba      	ldr	r2, [r7, #8]
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	441a      	add	r2, r3
  401972:	68fb      	ldr	r3, [r7, #12]
  401974:	429a      	cmp	r2, r3
  401976:	dd02      	ble.n	40197e <_sbrk+0x32>
		return (caddr_t) -1;	
  401978:	f04f 33ff 	mov.w	r3, #4294967295
  40197c:	e006      	b.n	40198c <_sbrk+0x40>
	}

	heap += incr;
  40197e:	4b07      	ldr	r3, [pc, #28]	; (40199c <_sbrk+0x50>)
  401980:	681a      	ldr	r2, [r3, #0]
  401982:	687b      	ldr	r3, [r7, #4]
  401984:	4413      	add	r3, r2
  401986:	4a05      	ldr	r2, [pc, #20]	; (40199c <_sbrk+0x50>)
  401988:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40198a:	68bb      	ldr	r3, [r7, #8]
}
  40198c:	4618      	mov	r0, r3
  40198e:	3714      	adds	r7, #20
  401990:	46bd      	mov	sp, r7
  401992:	f85d 7b04 	ldr.w	r7, [sp], #4
  401996:	4770      	bx	lr
  401998:	2045fffc 	.word	0x2045fffc
  40199c:	20400908 	.word	0x20400908
  4019a0:	20402b58 	.word	0x20402b58

004019a4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4019a4:	b480      	push	{r7}
  4019a6:	b083      	sub	sp, #12
  4019a8:	af00      	add	r7, sp, #0
  4019aa:	6078      	str	r0, [r7, #4]
	return -1;
  4019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
  4019b0:	4618      	mov	r0, r3
  4019b2:	370c      	adds	r7, #12
  4019b4:	46bd      	mov	sp, r7
  4019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ba:	4770      	bx	lr

004019bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4019bc:	b480      	push	{r7}
  4019be:	b083      	sub	sp, #12
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	6078      	str	r0, [r7, #4]
  4019c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4019c6:	683b      	ldr	r3, [r7, #0]
  4019c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019cc:	605a      	str	r2, [r3, #4]

	return 0;
  4019ce:	2300      	movs	r3, #0
}
  4019d0:	4618      	mov	r0, r3
  4019d2:	370c      	adds	r7, #12
  4019d4:	46bd      	mov	sp, r7
  4019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019da:	4770      	bx	lr

004019dc <_isatty>:

extern int _isatty(int file)
{
  4019dc:	b480      	push	{r7}
  4019de:	b083      	sub	sp, #12
  4019e0:	af00      	add	r7, sp, #0
  4019e2:	6078      	str	r0, [r7, #4]
	return 1;
  4019e4:	2301      	movs	r3, #1
}
  4019e6:	4618      	mov	r0, r3
  4019e8:	370c      	adds	r7, #12
  4019ea:	46bd      	mov	sp, r7
  4019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019f0:	4770      	bx	lr
  4019f2:	bf00      	nop

004019f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4019f4:	b480      	push	{r7}
  4019f6:	b085      	sub	sp, #20
  4019f8:	af00      	add	r7, sp, #0
  4019fa:	60f8      	str	r0, [r7, #12]
  4019fc:	60b9      	str	r1, [r7, #8]
  4019fe:	607a      	str	r2, [r7, #4]
	return 0;
  401a00:	2300      	movs	r3, #0
}
  401a02:	4618      	mov	r0, r3
  401a04:	3714      	adds	r7, #20
  401a06:	46bd      	mov	sp, r7
  401a08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop

00401a10 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401a10:	b480      	push	{r7}
  401a12:	b083      	sub	sp, #12
  401a14:	af00      	add	r7, sp, #0
  401a16:	4603      	mov	r3, r0
  401a18:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a1a:	4909      	ldr	r1, [pc, #36]	; (401a40 <NVIC_EnableIRQ+0x30>)
  401a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a20:	095b      	lsrs	r3, r3, #5
  401a22:	79fa      	ldrb	r2, [r7, #7]
  401a24:	f002 021f 	and.w	r2, r2, #31
  401a28:	2001      	movs	r0, #1
  401a2a:	fa00 f202 	lsl.w	r2, r0, r2
  401a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401a32:	bf00      	nop
  401a34:	370c      	adds	r7, #12
  401a36:	46bd      	mov	sp, r7
  401a38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a3c:	4770      	bx	lr
  401a3e:	bf00      	nop
  401a40:	e000e100 	.word	0xe000e100

00401a44 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401a44:	b480      	push	{r7}
  401a46:	b083      	sub	sp, #12
  401a48:	af00      	add	r7, sp, #0
  401a4a:	4603      	mov	r3, r0
  401a4c:	6039      	str	r1, [r7, #0]
  401a4e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a54:	2b00      	cmp	r3, #0
  401a56:	da0b      	bge.n	401a70 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401a58:	490d      	ldr	r1, [pc, #52]	; (401a90 <NVIC_SetPriority+0x4c>)
  401a5a:	79fb      	ldrb	r3, [r7, #7]
  401a5c:	f003 030f 	and.w	r3, r3, #15
  401a60:	3b04      	subs	r3, #4
  401a62:	683a      	ldr	r2, [r7, #0]
  401a64:	b2d2      	uxtb	r2, r2
  401a66:	0152      	lsls	r2, r2, #5
  401a68:	b2d2      	uxtb	r2, r2
  401a6a:	440b      	add	r3, r1
  401a6c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401a6e:	e009      	b.n	401a84 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a70:	4908      	ldr	r1, [pc, #32]	; (401a94 <NVIC_SetPriority+0x50>)
  401a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a76:	683a      	ldr	r2, [r7, #0]
  401a78:	b2d2      	uxtb	r2, r2
  401a7a:	0152      	lsls	r2, r2, #5
  401a7c:	b2d2      	uxtb	r2, r2
  401a7e:	440b      	add	r3, r1
  401a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401a84:	bf00      	nop
  401a86:	370c      	adds	r7, #12
  401a88:	46bd      	mov	sp, r7
  401a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a8e:	4770      	bx	lr
  401a90:	e000ed00 	.word	0xe000ed00
  401a94:	e000e100 	.word	0xe000e100

00401a98 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401a98:	b580      	push	{r7, lr}
  401a9a:	b082      	sub	sp, #8
  401a9c:	af00      	add	r7, sp, #0
  401a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401aa0:	687b      	ldr	r3, [r7, #4]
  401aa2:	3b01      	subs	r3, #1
  401aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401aa8:	d301      	bcc.n	401aae <SysTick_Config+0x16>
  401aaa:	2301      	movs	r3, #1
  401aac:	e00f      	b.n	401ace <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401aae:	4a0a      	ldr	r2, [pc, #40]	; (401ad8 <SysTick_Config+0x40>)
  401ab0:	687b      	ldr	r3, [r7, #4]
  401ab2:	3b01      	subs	r3, #1
  401ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401ab6:	2107      	movs	r1, #7
  401ab8:	f04f 30ff 	mov.w	r0, #4294967295
  401abc:	4b07      	ldr	r3, [pc, #28]	; (401adc <SysTick_Config+0x44>)
  401abe:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401ac0:	4b05      	ldr	r3, [pc, #20]	; (401ad8 <SysTick_Config+0x40>)
  401ac2:	2200      	movs	r2, #0
  401ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401ac6:	4b04      	ldr	r3, [pc, #16]	; (401ad8 <SysTick_Config+0x40>)
  401ac8:	2207      	movs	r2, #7
  401aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401acc:	2300      	movs	r3, #0
}
  401ace:	4618      	mov	r0, r3
  401ad0:	3708      	adds	r7, #8
  401ad2:	46bd      	mov	sp, r7
  401ad4:	bd80      	pop	{r7, pc}
  401ad6:	bf00      	nop
  401ad8:	e000e010 	.word	0xe000e010
  401adc:	00401a45 	.word	0x00401a45

00401ae0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401ae0:	b480      	push	{r7}
  401ae2:	b083      	sub	sp, #12
  401ae4:	af00      	add	r7, sp, #0
  401ae6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	2b07      	cmp	r3, #7
  401aec:	d825      	bhi.n	401b3a <osc_get_rate+0x5a>
  401aee:	a201      	add	r2, pc, #4	; (adr r2, 401af4 <osc_get_rate+0x14>)
  401af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401af4:	00401b15 	.word	0x00401b15
  401af8:	00401b1b 	.word	0x00401b1b
  401afc:	00401b21 	.word	0x00401b21
  401b00:	00401b27 	.word	0x00401b27
  401b04:	00401b2b 	.word	0x00401b2b
  401b08:	00401b2f 	.word	0x00401b2f
  401b0c:	00401b33 	.word	0x00401b33
  401b10:	00401b37 	.word	0x00401b37
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401b14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b18:	e010      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b1e:	e00d      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b24:	e00a      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401b26:	4b08      	ldr	r3, [pc, #32]	; (401b48 <osc_get_rate+0x68>)
  401b28:	e008      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401b2a:	4b08      	ldr	r3, [pc, #32]	; (401b4c <osc_get_rate+0x6c>)
  401b2c:	e006      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401b2e:	4b08      	ldr	r3, [pc, #32]	; (401b50 <osc_get_rate+0x70>)
  401b30:	e004      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401b32:	4b07      	ldr	r3, [pc, #28]	; (401b50 <osc_get_rate+0x70>)
  401b34:	e002      	b.n	401b3c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401b36:	4b06      	ldr	r3, [pc, #24]	; (401b50 <osc_get_rate+0x70>)
  401b38:	e000      	b.n	401b3c <osc_get_rate+0x5c>
	}

	return 0;
  401b3a:	2300      	movs	r3, #0
}
  401b3c:	4618      	mov	r0, r3
  401b3e:	370c      	adds	r7, #12
  401b40:	46bd      	mov	sp, r7
  401b42:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b46:	4770      	bx	lr
  401b48:	003d0900 	.word	0x003d0900
  401b4c:	007a1200 	.word	0x007a1200
  401b50:	00b71b00 	.word	0x00b71b00

00401b54 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401b54:	b580      	push	{r7, lr}
  401b56:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401b58:	2006      	movs	r0, #6
  401b5a:	4b05      	ldr	r3, [pc, #20]	; (401b70 <sysclk_get_main_hz+0x1c>)
  401b5c:	4798      	blx	r3
  401b5e:	4602      	mov	r2, r0
  401b60:	4613      	mov	r3, r2
  401b62:	009b      	lsls	r3, r3, #2
  401b64:	4413      	add	r3, r2
  401b66:	009a      	lsls	r2, r3, #2
  401b68:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401b6a:	4618      	mov	r0, r3
  401b6c:	bd80      	pop	{r7, pc}
  401b6e:	bf00      	nop
  401b70:	00401ae1 	.word	0x00401ae1

00401b74 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401b74:	b580      	push	{r7, lr}
  401b76:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401b78:	4b02      	ldr	r3, [pc, #8]	; (401b84 <sysclk_get_cpu_hz+0x10>)
  401b7a:	4798      	blx	r3
  401b7c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401b7e:	4618      	mov	r0, r3
  401b80:	bd80      	pop	{r7, pc}
  401b82:	bf00      	nop
  401b84:	00401b55 	.word	0x00401b55

00401b88 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401b88:	b580      	push	{r7, lr}
  401b8a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401b8c:	4b02      	ldr	r3, [pc, #8]	; (401b98 <sysclk_get_peripheral_hz+0x10>)
  401b8e:	4798      	blx	r3
  401b90:	4603      	mov	r3, r0
  401b92:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401b94:	4618      	mov	r0, r3
  401b96:	bd80      	pop	{r7, pc}
  401b98:	00401b55 	.word	0x00401b55

00401b9c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401b9c:	b580      	push	{r7, lr}
  401b9e:	b082      	sub	sp, #8
  401ba0:	af00      	add	r7, sp, #0
  401ba2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401ba4:	6878      	ldr	r0, [r7, #4]
  401ba6:	4b03      	ldr	r3, [pc, #12]	; (401bb4 <sysclk_enable_peripheral_clock+0x18>)
  401ba8:	4798      	blx	r3
}
  401baa:	bf00      	nop
  401bac:	3708      	adds	r7, #8
  401bae:	46bd      	mov	sp, r7
  401bb0:	bd80      	pop	{r7, pc}
  401bb2:	bf00      	nop
  401bb4:	00401235 	.word	0x00401235

00401bb8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401bb8:	b480      	push	{r7}
  401bba:	b08b      	sub	sp, #44	; 0x2c
  401bbc:	af00      	add	r7, sp, #0
  401bbe:	6078      	str	r0, [r7, #4]
  401bc0:	460b      	mov	r3, r1
  401bc2:	70fb      	strb	r3, [r7, #3]
  401bc4:	687b      	ldr	r3, [r7, #4]
  401bc6:	627b      	str	r3, [r7, #36]	; 0x24
  401bc8:	78fb      	ldrb	r3, [r7, #3]
  401bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bd0:	61fb      	str	r3, [r7, #28]
  401bd2:	69fb      	ldr	r3, [r7, #28]
  401bd4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401bd6:	69bb      	ldr	r3, [r7, #24]
  401bd8:	095b      	lsrs	r3, r3, #5
  401bda:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bdc:	697a      	ldr	r2, [r7, #20]
  401bde:	4b10      	ldr	r3, [pc, #64]	; (401c20 <ioport_set_pin_level+0x68>)
  401be0:	4413      	add	r3, r2
  401be2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401be4:	613b      	str	r3, [r7, #16]

	if (level) {
  401be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401bea:	2b00      	cmp	r3, #0
  401bec:	d009      	beq.n	401c02 <ioport_set_pin_level+0x4a>
  401bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bf0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	f003 031f 	and.w	r3, r3, #31
  401bf8:	2201      	movs	r2, #1
  401bfa:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401bfc:	693b      	ldr	r3, [r7, #16]
  401bfe:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401c00:	e008      	b.n	401c14 <ioport_set_pin_level+0x5c>
  401c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c04:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401c06:	68bb      	ldr	r3, [r7, #8]
  401c08:	f003 031f 	and.w	r3, r3, #31
  401c0c:	2201      	movs	r2, #1
  401c0e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401c10:	693b      	ldr	r3, [r7, #16]
  401c12:	635a      	str	r2, [r3, #52]	; 0x34
  401c14:	bf00      	nop
  401c16:	372c      	adds	r7, #44	; 0x2c
  401c18:	46bd      	mov	sp, r7
  401c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c1e:	4770      	bx	lr
  401c20:	00200707 	.word	0x00200707

00401c24 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  401c24:	b480      	push	{r7}
  401c26:	b08b      	sub	sp, #44	; 0x2c
  401c28:	af00      	add	r7, sp, #0
  401c2a:	6078      	str	r0, [r7, #4]
  401c2c:	687b      	ldr	r3, [r7, #4]
  401c2e:	627b      	str	r3, [r7, #36]	; 0x24
  401c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c32:	623b      	str	r3, [r7, #32]
  401c34:	6a3b      	ldr	r3, [r7, #32]
  401c36:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401c38:	69fb      	ldr	r3, [r7, #28]
  401c3a:	095b      	lsrs	r3, r3, #5
  401c3c:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401c3e:	69ba      	ldr	r2, [r7, #24]
  401c40:	4b13      	ldr	r3, [pc, #76]	; (401c90 <ioport_toggle_pin_level+0x6c>)
  401c42:	4413      	add	r3, r2
  401c44:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  401c46:	617b      	str	r3, [r7, #20]
  401c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c4a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401c4c:	693b      	ldr	r3, [r7, #16]
  401c4e:	f003 031f 	and.w	r3, r3, #31
  401c52:	2201      	movs	r2, #1
  401c54:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401c58:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401c5a:	697b      	ldr	r3, [r7, #20]
  401c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c60:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401c62:	68bb      	ldr	r3, [r7, #8]
  401c64:	f003 031f 	and.w	r3, r3, #31
  401c68:	2101      	movs	r1, #1
  401c6a:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401c6e:	4013      	ands	r3, r2
  401c70:	2b00      	cmp	r3, #0
  401c72:	d003      	beq.n	401c7c <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  401c74:	697b      	ldr	r3, [r7, #20]
  401c76:	68fa      	ldr	r2, [r7, #12]
  401c78:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  401c7a:	e002      	b.n	401c82 <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  401c7c:	697b      	ldr	r3, [r7, #20]
  401c7e:	68fa      	ldr	r2, [r7, #12]
  401c80:	631a      	str	r2, [r3, #48]	; 0x30
  401c82:	bf00      	nop
  401c84:	372c      	adds	r7, #44	; 0x2c
  401c86:	46bd      	mov	sp, r7
  401c88:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c8c:	4770      	bx	lr
  401c8e:	bf00      	nop
  401c90:	00200707 	.word	0x00200707

00401c94 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401c94:	b580      	push	{r7, lr}
  401c96:	b08c      	sub	sp, #48	; 0x30
  401c98:	af00      	add	r7, sp, #0
  401c9a:	6078      	str	r0, [r7, #4]
  401c9c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401c9e:	4b49      	ldr	r3, [pc, #292]	; (401dc4 <usart_serial_init+0x130>)
  401ca0:	4798      	blx	r3
  401ca2:	4603      	mov	r3, r0
  401ca4:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401ca6:	683b      	ldr	r3, [r7, #0]
  401ca8:	681b      	ldr	r3, [r3, #0]
  401caa:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401cac:	683b      	ldr	r3, [r7, #0]
  401cae:	689b      	ldr	r3, [r3, #8]
  401cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401cb2:	683b      	ldr	r3, [r7, #0]
  401cb4:	681b      	ldr	r3, [r3, #0]
  401cb6:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401cb8:	683b      	ldr	r3, [r7, #0]
  401cba:	685b      	ldr	r3, [r3, #4]
  401cbc:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401cbe:	683b      	ldr	r3, [r7, #0]
  401cc0:	689b      	ldr	r3, [r3, #8]
  401cc2:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401cc4:	683b      	ldr	r3, [r7, #0]
  401cc6:	68db      	ldr	r3, [r3, #12]
  401cc8:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401cca:	2300      	movs	r3, #0
  401ccc:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401cce:	687b      	ldr	r3, [r7, #4]
  401cd0:	4a3d      	ldr	r2, [pc, #244]	; (401dc8 <usart_serial_init+0x134>)
  401cd2:	4293      	cmp	r3, r2
  401cd4:	d108      	bne.n	401ce8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401cd6:	2007      	movs	r0, #7
  401cd8:	4b3c      	ldr	r3, [pc, #240]	; (401dcc <usart_serial_init+0x138>)
  401cda:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ce0:	4619      	mov	r1, r3
  401ce2:	6878      	ldr	r0, [r7, #4]
  401ce4:	4b3a      	ldr	r3, [pc, #232]	; (401dd0 <usart_serial_init+0x13c>)
  401ce6:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401ce8:	687b      	ldr	r3, [r7, #4]
  401cea:	4a3a      	ldr	r2, [pc, #232]	; (401dd4 <usart_serial_init+0x140>)
  401cec:	4293      	cmp	r3, r2
  401cee:	d108      	bne.n	401d02 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401cf0:	2008      	movs	r0, #8
  401cf2:	4b36      	ldr	r3, [pc, #216]	; (401dcc <usart_serial_init+0x138>)
  401cf4:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cfa:	4619      	mov	r1, r3
  401cfc:	6878      	ldr	r0, [r7, #4]
  401cfe:	4b34      	ldr	r3, [pc, #208]	; (401dd0 <usart_serial_init+0x13c>)
  401d00:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401d02:	687b      	ldr	r3, [r7, #4]
  401d04:	4a34      	ldr	r2, [pc, #208]	; (401dd8 <usart_serial_init+0x144>)
  401d06:	4293      	cmp	r3, r2
  401d08:	d108      	bne.n	401d1c <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401d0a:	202c      	movs	r0, #44	; 0x2c
  401d0c:	4b2f      	ldr	r3, [pc, #188]	; (401dcc <usart_serial_init+0x138>)
  401d0e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d14:	4619      	mov	r1, r3
  401d16:	6878      	ldr	r0, [r7, #4]
  401d18:	4b2d      	ldr	r3, [pc, #180]	; (401dd0 <usart_serial_init+0x13c>)
  401d1a:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401d1c:	687b      	ldr	r3, [r7, #4]
  401d1e:	4a2f      	ldr	r2, [pc, #188]	; (401ddc <usart_serial_init+0x148>)
  401d20:	4293      	cmp	r3, r2
  401d22:	d108      	bne.n	401d36 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401d24:	202d      	movs	r0, #45	; 0x2d
  401d26:	4b29      	ldr	r3, [pc, #164]	; (401dcc <usart_serial_init+0x138>)
  401d28:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401d2e:	4619      	mov	r1, r3
  401d30:	6878      	ldr	r0, [r7, #4]
  401d32:	4b27      	ldr	r3, [pc, #156]	; (401dd0 <usart_serial_init+0x13c>)
  401d34:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401d36:	687b      	ldr	r3, [r7, #4]
  401d38:	4a29      	ldr	r2, [pc, #164]	; (401de0 <usart_serial_init+0x14c>)
  401d3a:	4293      	cmp	r3, r2
  401d3c:	d111      	bne.n	401d62 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401d3e:	200d      	movs	r0, #13
  401d40:	4b22      	ldr	r3, [pc, #136]	; (401dcc <usart_serial_init+0x138>)
  401d42:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d44:	4b1f      	ldr	r3, [pc, #124]	; (401dc4 <usart_serial_init+0x130>)
  401d46:	4798      	blx	r3
  401d48:	4602      	mov	r2, r0
  401d4a:	f107 030c 	add.w	r3, r7, #12
  401d4e:	4619      	mov	r1, r3
  401d50:	6878      	ldr	r0, [r7, #4]
  401d52:	4b24      	ldr	r3, [pc, #144]	; (401de4 <usart_serial_init+0x150>)
  401d54:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d56:	6878      	ldr	r0, [r7, #4]
  401d58:	4b23      	ldr	r3, [pc, #140]	; (401de8 <usart_serial_init+0x154>)
  401d5a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d5c:	6878      	ldr	r0, [r7, #4]
  401d5e:	4b23      	ldr	r3, [pc, #140]	; (401dec <usart_serial_init+0x158>)
  401d60:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401d62:	687b      	ldr	r3, [r7, #4]
  401d64:	4a22      	ldr	r2, [pc, #136]	; (401df0 <usart_serial_init+0x15c>)
  401d66:	4293      	cmp	r3, r2
  401d68:	d111      	bne.n	401d8e <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401d6a:	200e      	movs	r0, #14
  401d6c:	4b17      	ldr	r3, [pc, #92]	; (401dcc <usart_serial_init+0x138>)
  401d6e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d70:	4b14      	ldr	r3, [pc, #80]	; (401dc4 <usart_serial_init+0x130>)
  401d72:	4798      	blx	r3
  401d74:	4602      	mov	r2, r0
  401d76:	f107 030c 	add.w	r3, r7, #12
  401d7a:	4619      	mov	r1, r3
  401d7c:	6878      	ldr	r0, [r7, #4]
  401d7e:	4b19      	ldr	r3, [pc, #100]	; (401de4 <usart_serial_init+0x150>)
  401d80:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d82:	6878      	ldr	r0, [r7, #4]
  401d84:	4b18      	ldr	r3, [pc, #96]	; (401de8 <usart_serial_init+0x154>)
  401d86:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d88:	6878      	ldr	r0, [r7, #4]
  401d8a:	4b18      	ldr	r3, [pc, #96]	; (401dec <usart_serial_init+0x158>)
  401d8c:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401d8e:	687b      	ldr	r3, [r7, #4]
  401d90:	4a18      	ldr	r2, [pc, #96]	; (401df4 <usart_serial_init+0x160>)
  401d92:	4293      	cmp	r3, r2
  401d94:	d111      	bne.n	401dba <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401d96:	200f      	movs	r0, #15
  401d98:	4b0c      	ldr	r3, [pc, #48]	; (401dcc <usart_serial_init+0x138>)
  401d9a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d9c:	4b09      	ldr	r3, [pc, #36]	; (401dc4 <usart_serial_init+0x130>)
  401d9e:	4798      	blx	r3
  401da0:	4602      	mov	r2, r0
  401da2:	f107 030c 	add.w	r3, r7, #12
  401da6:	4619      	mov	r1, r3
  401da8:	6878      	ldr	r0, [r7, #4]
  401daa:	4b0e      	ldr	r3, [pc, #56]	; (401de4 <usart_serial_init+0x150>)
  401dac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401dae:	6878      	ldr	r0, [r7, #4]
  401db0:	4b0d      	ldr	r3, [pc, #52]	; (401de8 <usart_serial_init+0x154>)
  401db2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401db4:	6878      	ldr	r0, [r7, #4]
  401db6:	4b0d      	ldr	r3, [pc, #52]	; (401dec <usart_serial_init+0x158>)
  401db8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401dba:	bf00      	nop
  401dbc:	3730      	adds	r7, #48	; 0x30
  401dbe:	46bd      	mov	sp, r7
  401dc0:	bd80      	pop	{r7, pc}
  401dc2:	bf00      	nop
  401dc4:	00401b89 	.word	0x00401b89
  401dc8:	400e0800 	.word	0x400e0800
  401dcc:	00401b9d 	.word	0x00401b9d
  401dd0:	004012b9 	.word	0x004012b9
  401dd4:	400e0a00 	.word	0x400e0a00
  401dd8:	400e1a00 	.word	0x400e1a00
  401ddc:	400e1c00 	.word	0x400e1c00
  401de0:	40024000 	.word	0x40024000
  401de4:	00401455 	.word	0x00401455
  401de8:	004014d9 	.word	0x004014d9
  401dec:	00401511 	.word	0x00401511
  401df0:	40028000 	.word	0x40028000
  401df4:	4002c000 	.word	0x4002c000

00401df8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401df8:	b580      	push	{r7, lr}
  401dfa:	b082      	sub	sp, #8
  401dfc:	af00      	add	r7, sp, #0
  401dfe:	6078      	str	r0, [r7, #4]
  401e00:	460b      	mov	r3, r1
  401e02:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401e04:	687b      	ldr	r3, [r7, #4]
  401e06:	4a36      	ldr	r2, [pc, #216]	; (401ee0 <usart_serial_putchar+0xe8>)
  401e08:	4293      	cmp	r3, r2
  401e0a:	d10a      	bne.n	401e22 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401e0c:	bf00      	nop
  401e0e:	78fb      	ldrb	r3, [r7, #3]
  401e10:	4619      	mov	r1, r3
  401e12:	6878      	ldr	r0, [r7, #4]
  401e14:	4b33      	ldr	r3, [pc, #204]	; (401ee4 <usart_serial_putchar+0xec>)
  401e16:	4798      	blx	r3
  401e18:	4603      	mov	r3, r0
  401e1a:	2b00      	cmp	r3, #0
  401e1c:	d1f7      	bne.n	401e0e <usart_serial_putchar+0x16>
		return 1;
  401e1e:	2301      	movs	r3, #1
  401e20:	e05a      	b.n	401ed8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401e22:	687b      	ldr	r3, [r7, #4]
  401e24:	4a30      	ldr	r2, [pc, #192]	; (401ee8 <usart_serial_putchar+0xf0>)
  401e26:	4293      	cmp	r3, r2
  401e28:	d10a      	bne.n	401e40 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401e2a:	bf00      	nop
  401e2c:	78fb      	ldrb	r3, [r7, #3]
  401e2e:	4619      	mov	r1, r3
  401e30:	6878      	ldr	r0, [r7, #4]
  401e32:	4b2c      	ldr	r3, [pc, #176]	; (401ee4 <usart_serial_putchar+0xec>)
  401e34:	4798      	blx	r3
  401e36:	4603      	mov	r3, r0
  401e38:	2b00      	cmp	r3, #0
  401e3a:	d1f7      	bne.n	401e2c <usart_serial_putchar+0x34>
		return 1;
  401e3c:	2301      	movs	r3, #1
  401e3e:	e04b      	b.n	401ed8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401e40:	687b      	ldr	r3, [r7, #4]
  401e42:	4a2a      	ldr	r2, [pc, #168]	; (401eec <usart_serial_putchar+0xf4>)
  401e44:	4293      	cmp	r3, r2
  401e46:	d10a      	bne.n	401e5e <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401e48:	bf00      	nop
  401e4a:	78fb      	ldrb	r3, [r7, #3]
  401e4c:	4619      	mov	r1, r3
  401e4e:	6878      	ldr	r0, [r7, #4]
  401e50:	4b24      	ldr	r3, [pc, #144]	; (401ee4 <usart_serial_putchar+0xec>)
  401e52:	4798      	blx	r3
  401e54:	4603      	mov	r3, r0
  401e56:	2b00      	cmp	r3, #0
  401e58:	d1f7      	bne.n	401e4a <usart_serial_putchar+0x52>
		return 1;
  401e5a:	2301      	movs	r3, #1
  401e5c:	e03c      	b.n	401ed8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401e5e:	687b      	ldr	r3, [r7, #4]
  401e60:	4a23      	ldr	r2, [pc, #140]	; (401ef0 <usart_serial_putchar+0xf8>)
  401e62:	4293      	cmp	r3, r2
  401e64:	d10a      	bne.n	401e7c <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401e66:	bf00      	nop
  401e68:	78fb      	ldrb	r3, [r7, #3]
  401e6a:	4619      	mov	r1, r3
  401e6c:	6878      	ldr	r0, [r7, #4]
  401e6e:	4b1d      	ldr	r3, [pc, #116]	; (401ee4 <usart_serial_putchar+0xec>)
  401e70:	4798      	blx	r3
  401e72:	4603      	mov	r3, r0
  401e74:	2b00      	cmp	r3, #0
  401e76:	d1f7      	bne.n	401e68 <usart_serial_putchar+0x70>
		return 1;
  401e78:	2301      	movs	r3, #1
  401e7a:	e02d      	b.n	401ed8 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401e7c:	687b      	ldr	r3, [r7, #4]
  401e7e:	4a1d      	ldr	r2, [pc, #116]	; (401ef4 <usart_serial_putchar+0xfc>)
  401e80:	4293      	cmp	r3, r2
  401e82:	d10a      	bne.n	401e9a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401e84:	bf00      	nop
  401e86:	78fb      	ldrb	r3, [r7, #3]
  401e88:	4619      	mov	r1, r3
  401e8a:	6878      	ldr	r0, [r7, #4]
  401e8c:	4b1a      	ldr	r3, [pc, #104]	; (401ef8 <usart_serial_putchar+0x100>)
  401e8e:	4798      	blx	r3
  401e90:	4603      	mov	r3, r0
  401e92:	2b00      	cmp	r3, #0
  401e94:	d1f7      	bne.n	401e86 <usart_serial_putchar+0x8e>
		return 1;
  401e96:	2301      	movs	r3, #1
  401e98:	e01e      	b.n	401ed8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401e9a:	687b      	ldr	r3, [r7, #4]
  401e9c:	4a17      	ldr	r2, [pc, #92]	; (401efc <usart_serial_putchar+0x104>)
  401e9e:	4293      	cmp	r3, r2
  401ea0:	d10a      	bne.n	401eb8 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401ea2:	bf00      	nop
  401ea4:	78fb      	ldrb	r3, [r7, #3]
  401ea6:	4619      	mov	r1, r3
  401ea8:	6878      	ldr	r0, [r7, #4]
  401eaa:	4b13      	ldr	r3, [pc, #76]	; (401ef8 <usart_serial_putchar+0x100>)
  401eac:	4798      	blx	r3
  401eae:	4603      	mov	r3, r0
  401eb0:	2b00      	cmp	r3, #0
  401eb2:	d1f7      	bne.n	401ea4 <usart_serial_putchar+0xac>
		return 1;
  401eb4:	2301      	movs	r3, #1
  401eb6:	e00f      	b.n	401ed8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401eb8:	687b      	ldr	r3, [r7, #4]
  401eba:	4a11      	ldr	r2, [pc, #68]	; (401f00 <usart_serial_putchar+0x108>)
  401ebc:	4293      	cmp	r3, r2
  401ebe:	d10a      	bne.n	401ed6 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401ec0:	bf00      	nop
  401ec2:	78fb      	ldrb	r3, [r7, #3]
  401ec4:	4619      	mov	r1, r3
  401ec6:	6878      	ldr	r0, [r7, #4]
  401ec8:	4b0b      	ldr	r3, [pc, #44]	; (401ef8 <usart_serial_putchar+0x100>)
  401eca:	4798      	blx	r3
  401ecc:	4603      	mov	r3, r0
  401ece:	2b00      	cmp	r3, #0
  401ed0:	d1f7      	bne.n	401ec2 <usart_serial_putchar+0xca>
		return 1;
  401ed2:	2301      	movs	r3, #1
  401ed4:	e000      	b.n	401ed8 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401ed6:	2300      	movs	r3, #0
}
  401ed8:	4618      	mov	r0, r3
  401eda:	3708      	adds	r7, #8
  401edc:	46bd      	mov	sp, r7
  401ede:	bd80      	pop	{r7, pc}
  401ee0:	400e0800 	.word	0x400e0800
  401ee4:	00401311 	.word	0x00401311
  401ee8:	400e0a00 	.word	0x400e0a00
  401eec:	400e1a00 	.word	0x400e1a00
  401ef0:	400e1c00 	.word	0x400e1c00
  401ef4:	40024000 	.word	0x40024000
  401ef8:	00401581 	.word	0x00401581
  401efc:	40028000 	.word	0x40028000
  401f00:	4002c000 	.word	0x4002c000

00401f04 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401f04:	b580      	push	{r7, lr}
  401f06:	b084      	sub	sp, #16
  401f08:	af00      	add	r7, sp, #0
  401f0a:	6078      	str	r0, [r7, #4]
  401f0c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401f0e:	2300      	movs	r3, #0
  401f10:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401f12:	687b      	ldr	r3, [r7, #4]
  401f14:	4a34      	ldr	r2, [pc, #208]	; (401fe8 <usart_serial_getchar+0xe4>)
  401f16:	4293      	cmp	r3, r2
  401f18:	d107      	bne.n	401f2a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401f1a:	bf00      	nop
  401f1c:	6839      	ldr	r1, [r7, #0]
  401f1e:	6878      	ldr	r0, [r7, #4]
  401f20:	4b32      	ldr	r3, [pc, #200]	; (401fec <usart_serial_getchar+0xe8>)
  401f22:	4798      	blx	r3
  401f24:	4603      	mov	r3, r0
  401f26:	2b00      	cmp	r3, #0
  401f28:	d1f8      	bne.n	401f1c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401f2a:	687b      	ldr	r3, [r7, #4]
  401f2c:	4a30      	ldr	r2, [pc, #192]	; (401ff0 <usart_serial_getchar+0xec>)
  401f2e:	4293      	cmp	r3, r2
  401f30:	d107      	bne.n	401f42 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401f32:	bf00      	nop
  401f34:	6839      	ldr	r1, [r7, #0]
  401f36:	6878      	ldr	r0, [r7, #4]
  401f38:	4b2c      	ldr	r3, [pc, #176]	; (401fec <usart_serial_getchar+0xe8>)
  401f3a:	4798      	blx	r3
  401f3c:	4603      	mov	r3, r0
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d1f8      	bne.n	401f34 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401f42:	687b      	ldr	r3, [r7, #4]
  401f44:	4a2b      	ldr	r2, [pc, #172]	; (401ff4 <usart_serial_getchar+0xf0>)
  401f46:	4293      	cmp	r3, r2
  401f48:	d107      	bne.n	401f5a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401f4a:	bf00      	nop
  401f4c:	6839      	ldr	r1, [r7, #0]
  401f4e:	6878      	ldr	r0, [r7, #4]
  401f50:	4b26      	ldr	r3, [pc, #152]	; (401fec <usart_serial_getchar+0xe8>)
  401f52:	4798      	blx	r3
  401f54:	4603      	mov	r3, r0
  401f56:	2b00      	cmp	r3, #0
  401f58:	d1f8      	bne.n	401f4c <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	4a26      	ldr	r2, [pc, #152]	; (401ff8 <usart_serial_getchar+0xf4>)
  401f5e:	4293      	cmp	r3, r2
  401f60:	d107      	bne.n	401f72 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401f62:	bf00      	nop
  401f64:	6839      	ldr	r1, [r7, #0]
  401f66:	6878      	ldr	r0, [r7, #4]
  401f68:	4b20      	ldr	r3, [pc, #128]	; (401fec <usart_serial_getchar+0xe8>)
  401f6a:	4798      	blx	r3
  401f6c:	4603      	mov	r3, r0
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d1f8      	bne.n	401f64 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401f72:	687b      	ldr	r3, [r7, #4]
  401f74:	4a21      	ldr	r2, [pc, #132]	; (401ffc <usart_serial_getchar+0xf8>)
  401f76:	4293      	cmp	r3, r2
  401f78:	d10d      	bne.n	401f96 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401f7a:	bf00      	nop
  401f7c:	f107 030c 	add.w	r3, r7, #12
  401f80:	4619      	mov	r1, r3
  401f82:	6878      	ldr	r0, [r7, #4]
  401f84:	4b1e      	ldr	r3, [pc, #120]	; (402000 <usart_serial_getchar+0xfc>)
  401f86:	4798      	blx	r3
  401f88:	4603      	mov	r3, r0
  401f8a:	2b00      	cmp	r3, #0
  401f8c:	d1f6      	bne.n	401f7c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401f8e:	68fb      	ldr	r3, [r7, #12]
  401f90:	b2da      	uxtb	r2, r3
  401f92:	683b      	ldr	r3, [r7, #0]
  401f94:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401f96:	687b      	ldr	r3, [r7, #4]
  401f98:	4a1a      	ldr	r2, [pc, #104]	; (402004 <usart_serial_getchar+0x100>)
  401f9a:	4293      	cmp	r3, r2
  401f9c:	d10d      	bne.n	401fba <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401f9e:	bf00      	nop
  401fa0:	f107 030c 	add.w	r3, r7, #12
  401fa4:	4619      	mov	r1, r3
  401fa6:	6878      	ldr	r0, [r7, #4]
  401fa8:	4b15      	ldr	r3, [pc, #84]	; (402000 <usart_serial_getchar+0xfc>)
  401faa:	4798      	blx	r3
  401fac:	4603      	mov	r3, r0
  401fae:	2b00      	cmp	r3, #0
  401fb0:	d1f6      	bne.n	401fa0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401fb2:	68fb      	ldr	r3, [r7, #12]
  401fb4:	b2da      	uxtb	r2, r3
  401fb6:	683b      	ldr	r3, [r7, #0]
  401fb8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401fba:	687b      	ldr	r3, [r7, #4]
  401fbc:	4a12      	ldr	r2, [pc, #72]	; (402008 <usart_serial_getchar+0x104>)
  401fbe:	4293      	cmp	r3, r2
  401fc0:	d10d      	bne.n	401fde <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401fc2:	bf00      	nop
  401fc4:	f107 030c 	add.w	r3, r7, #12
  401fc8:	4619      	mov	r1, r3
  401fca:	6878      	ldr	r0, [r7, #4]
  401fcc:	4b0c      	ldr	r3, [pc, #48]	; (402000 <usart_serial_getchar+0xfc>)
  401fce:	4798      	blx	r3
  401fd0:	4603      	mov	r3, r0
  401fd2:	2b00      	cmp	r3, #0
  401fd4:	d1f6      	bne.n	401fc4 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401fd6:	68fb      	ldr	r3, [r7, #12]
  401fd8:	b2da      	uxtb	r2, r3
  401fda:	683b      	ldr	r3, [r7, #0]
  401fdc:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401fde:	bf00      	nop
  401fe0:	3710      	adds	r7, #16
  401fe2:	46bd      	mov	sp, r7
  401fe4:	bd80      	pop	{r7, pc}
  401fe6:	bf00      	nop
  401fe8:	400e0800 	.word	0x400e0800
  401fec:	00401341 	.word	0x00401341
  401ff0:	400e0a00 	.word	0x400e0a00
  401ff4:	400e1a00 	.word	0x400e1a00
  401ff8:	400e1c00 	.word	0x400e1c00
  401ffc:	40024000 	.word	0x40024000
  402000:	004015b5 	.word	0x004015b5
  402004:	40028000 	.word	0x40028000
  402008:	4002c000 	.word	0x4002c000

0040200c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40200c:	b580      	push	{r7, lr}
  40200e:	b082      	sub	sp, #8
  402010:	af00      	add	r7, sp, #0
  402012:	6078      	str	r0, [r7, #4]
  402014:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402016:	4a0f      	ldr	r2, [pc, #60]	; (402054 <stdio_serial_init+0x48>)
  402018:	687b      	ldr	r3, [r7, #4]
  40201a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40201c:	4b0e      	ldr	r3, [pc, #56]	; (402058 <stdio_serial_init+0x4c>)
  40201e:	4a0f      	ldr	r2, [pc, #60]	; (40205c <stdio_serial_init+0x50>)
  402020:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402022:	4b0f      	ldr	r3, [pc, #60]	; (402060 <stdio_serial_init+0x54>)
  402024:	4a0f      	ldr	r2, [pc, #60]	; (402064 <stdio_serial_init+0x58>)
  402026:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  402028:	6839      	ldr	r1, [r7, #0]
  40202a:	6878      	ldr	r0, [r7, #4]
  40202c:	4b0e      	ldr	r3, [pc, #56]	; (402068 <stdio_serial_init+0x5c>)
  40202e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402030:	4b0e      	ldr	r3, [pc, #56]	; (40206c <stdio_serial_init+0x60>)
  402032:	681b      	ldr	r3, [r3, #0]
  402034:	689b      	ldr	r3, [r3, #8]
  402036:	2100      	movs	r1, #0
  402038:	4618      	mov	r0, r3
  40203a:	4b0d      	ldr	r3, [pc, #52]	; (402070 <stdio_serial_init+0x64>)
  40203c:	4798      	blx	r3
	setbuf(stdin, NULL);
  40203e:	4b0b      	ldr	r3, [pc, #44]	; (40206c <stdio_serial_init+0x60>)
  402040:	681b      	ldr	r3, [r3, #0]
  402042:	685b      	ldr	r3, [r3, #4]
  402044:	2100      	movs	r1, #0
  402046:	4618      	mov	r0, r3
  402048:	4b09      	ldr	r3, [pc, #36]	; (402070 <stdio_serial_init+0x64>)
  40204a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40204c:	bf00      	nop
  40204e:	3708      	adds	r7, #8
  402050:	46bd      	mov	sp, r7
  402052:	bd80      	pop	{r7, pc}
  402054:	2040094c 	.word	0x2040094c
  402058:	20400948 	.word	0x20400948
  40205c:	00401df9 	.word	0x00401df9
  402060:	20400944 	.word	0x20400944
  402064:	00401f05 	.word	0x00401f05
  402068:	00401c95 	.word	0x00401c95
  40206c:	20400438 	.word	0x20400438
  402070:	00402451 	.word	0x00402451

00402074 <ProcessButtonEvt>:
 *  \brief Process Buttons Events
 *
 *  Change active states of LEDs when corresponding button events happened.
 */
static void ProcessButtonEvt(uint8_t uc_button)
{
  402074:	b580      	push	{r7, lr}
  402076:	b082      	sub	sp, #8
  402078:	af00      	add	r7, sp, #0
  40207a:	4603      	mov	r3, r0
  40207c:	71fb      	strb	r3, [r7, #7]
// [main_button1_evnt_process]
	if (uc_button == 0) {
  40207e:	79fb      	ldrb	r3, [r7, #7]
  402080:	2b00      	cmp	r3, #0
  402082:	d11b      	bne.n	4020bc <ProcessButtonEvt+0x48>
		g_b_led0_active = !g_b_led0_active;
  402084:	4b0f      	ldr	r3, [pc, #60]	; (4020c4 <ProcessButtonEvt+0x50>)
  402086:	781b      	ldrb	r3, [r3, #0]
  402088:	b2db      	uxtb	r3, r3
  40208a:	2b00      	cmp	r3, #0
  40208c:	bf14      	ite	ne
  40208e:	2301      	movne	r3, #1
  402090:	2300      	moveq	r3, #0
  402092:	b2db      	uxtb	r3, r3
  402094:	f083 0301 	eor.w	r3, r3, #1
  402098:	b2db      	uxtb	r3, r3
  40209a:	f003 0301 	and.w	r3, r3, #1
  40209e:	b2da      	uxtb	r2, r3
  4020a0:	4b08      	ldr	r3, [pc, #32]	; (4020c4 <ProcessButtonEvt+0x50>)
  4020a2:	701a      	strb	r2, [r3, #0]
		if (!g_b_led0_active) {
  4020a4:	4b07      	ldr	r3, [pc, #28]	; (4020c4 <ProcessButtonEvt+0x50>)
  4020a6:	781b      	ldrb	r3, [r3, #0]
  4020a8:	b2db      	uxtb	r3, r3
  4020aa:	f083 0301 	eor.w	r3, r3, #1
  4020ae:	b2db      	uxtb	r3, r3
  4020b0:	2b00      	cmp	r3, #0
  4020b2:	d003      	beq.n	4020bc <ProcessButtonEvt+0x48>
			ioport_set_pin_level(LED0_GPIO, IOPORT_PIN_LEVEL_HIGH);
  4020b4:	2101      	movs	r1, #1
  4020b6:	2048      	movs	r0, #72	; 0x48
  4020b8:	4b03      	ldr	r3, [pc, #12]	; (4020c8 <ProcessButtonEvt+0x54>)
  4020ba:	4798      	blx	r3
			tc_stop(TC0, 0);
		}
// [main_button2_evnt_process]
	}
#endif
}
  4020bc:	bf00      	nop
  4020be:	3708      	adds	r7, #8
  4020c0:	46bd      	mov	sp, r7
  4020c2:	bd80      	pop	{r7, pc}
  4020c4:	20400008 	.word	0x20400008
  4020c8:	00401bb9 	.word	0x00401bb9

004020cc <SysTick_Handler>:
 *  Process System Tick Event
 *  Increments the g_ul_ms_ticks counter.
 */
// [main_systick_handler]
void SysTick_Handler(void)
{
  4020cc:	b480      	push	{r7}
  4020ce:	af00      	add	r7, sp, #0
	g_ul_ms_ticks++;
  4020d0:	4b04      	ldr	r3, [pc, #16]	; (4020e4 <SysTick_Handler+0x18>)
  4020d2:	681b      	ldr	r3, [r3, #0]
  4020d4:	3301      	adds	r3, #1
  4020d6:	4a03      	ldr	r2, [pc, #12]	; (4020e4 <SysTick_Handler+0x18>)
  4020d8:	6013      	str	r3, [r2, #0]
}
  4020da:	bf00      	nop
  4020dc:	46bd      	mov	sp, r7
  4020de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020e2:	4770      	bx	lr
  4020e4:	2040090c 	.word	0x2040090c

004020e8 <Button1_Handler>:
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  4020e8:	b580      	push	{r7, lr}
  4020ea:	b082      	sub	sp, #8
  4020ec:	af00      	add	r7, sp, #0
  4020ee:	6078      	str	r0, [r7, #4]
  4020f0:	6039      	str	r1, [r7, #0]
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {
  4020f2:	687b      	ldr	r3, [r7, #4]
  4020f4:	2b0a      	cmp	r3, #10
  4020f6:	d106      	bne.n	402106 <Button1_Handler+0x1e>
  4020f8:	683b      	ldr	r3, [r7, #0]
  4020fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  4020fe:	d102      	bne.n	402106 <Button1_Handler+0x1e>
		ProcessButtonEvt(0);
  402100:	2000      	movs	r0, #0
  402102:	4b03      	ldr	r3, [pc, #12]	; (402110 <Button1_Handler+0x28>)
  402104:	4798      	blx	r3
	}
}
  402106:	bf00      	nop
  402108:	3708      	adds	r7, #8
  40210a:	46bd      	mov	sp, r7
  40210c:	bd80      	pop	{r7, pc}
  40210e:	bf00      	nop
  402110:	00402075 	.word	0x00402075

00402114 <configure_buttons>:
 *
 *  Configure the PIO as inputs and generate corresponding interrupt when
 *  pressed or released.
 */
static void configure_buttons(void)
{
  402114:	b590      	push	{r4, r7, lr}
  402116:	b083      	sub	sp, #12
  402118:	af02      	add	r7, sp, #8
// [main_button1_configure]
	/* Configure Pushbutton 1 */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  40211a:	200a      	movs	r0, #10
  40211c:	4b10      	ldr	r3, [pc, #64]	; (402160 <configure_buttons+0x4c>)
  40211e:	4798      	blx	r3
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  402120:	220a      	movs	r2, #10
  402122:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402126:	480f      	ldr	r0, [pc, #60]	; (402164 <configure_buttons+0x50>)
  402128:	4b0f      	ldr	r3, [pc, #60]	; (402168 <configure_buttons+0x54>)
  40212a:	4798      	blx	r3
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  40212c:	4b0f      	ldr	r3, [pc, #60]	; (40216c <configure_buttons+0x58>)
  40212e:	9300      	str	r3, [sp, #0]
  402130:	2379      	movs	r3, #121	; 0x79
  402132:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402136:	210a      	movs	r1, #10
  402138:	480a      	ldr	r0, [pc, #40]	; (402164 <configure_buttons+0x50>)
  40213a:	4c0d      	ldr	r4, [pc, #52]	; (402170 <configure_buttons+0x5c>)
  40213c:	47a0      	blx	r4
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
  40213e:	200a      	movs	r0, #10
  402140:	4b0c      	ldr	r3, [pc, #48]	; (402174 <configure_buttons+0x60>)
  402142:	4798      	blx	r3
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  402144:	2200      	movs	r2, #0
  402146:	210a      	movs	r1, #10
  402148:	4806      	ldr	r0, [pc, #24]	; (402164 <configure_buttons+0x50>)
  40214a:	4b0b      	ldr	r3, [pc, #44]	; (402178 <configure_buttons+0x64>)
  40214c:	4798      	blx	r3
			(IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  40214e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402152:	4804      	ldr	r0, [pc, #16]	; (402164 <configure_buttons+0x50>)
  402154:	4b09      	ldr	r3, [pc, #36]	; (40217c <configure_buttons+0x68>)
  402156:	4798      	blx	r3
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO,
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
// [main_button2_configure]
#endif
}
  402158:	bf00      	nop
  40215a:	3704      	adds	r7, #4
  40215c:	46bd      	mov	sp, r7
  40215e:	bd90      	pop	{r4, r7, pc}
  402160:	00401235 	.word	0x00401235
  402164:	400e0e00 	.word	0x400e0e00
  402168:	00400b25 	.word	0x00400b25
  40216c:	004020e9 	.word	0x004020e9
  402170:	00400dd5 	.word	0x00400dd5
  402174:	00401a11 	.word	0x00401a11
  402178:	00400eed 	.word	0x00400eed
  40217c:	00400bc9 	.word	0x00400bc9

00402180 <configure_console>:
/**
 *  Configure UART console.
 */
// [main_console_configure]
static void configure_console(void)
{
  402180:	b590      	push	{r4, r7, lr}
  402182:	b085      	sub	sp, #20
  402184:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  402186:	4b08      	ldr	r3, [pc, #32]	; (4021a8 <configure_console+0x28>)
  402188:	463c      	mov	r4, r7
  40218a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40218c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  402190:	200e      	movs	r0, #14
  402192:	4b06      	ldr	r3, [pc, #24]	; (4021ac <configure_console+0x2c>)
  402194:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402196:	463b      	mov	r3, r7
  402198:	4619      	mov	r1, r3
  40219a:	4805      	ldr	r0, [pc, #20]	; (4021b0 <configure_console+0x30>)
  40219c:	4b05      	ldr	r3, [pc, #20]	; (4021b4 <configure_console+0x34>)
  40219e:	4798      	blx	r3
}
  4021a0:	bf00      	nop
  4021a2:	3714      	adds	r7, #20
  4021a4:	46bd      	mov	sp, r7
  4021a6:	bd90      	pop	{r4, r7, pc}
  4021a8:	00405390 	.word	0x00405390
  4021ac:	00401b9d 	.word	0x00401b9d
  4021b0:	40028000 	.word	0x40028000
  4021b4:	0040200d 	.word	0x0040200d

004021b8 <mdelay>:
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
// [main_ms_delay]
static void mdelay(uint32_t ul_dly_ticks)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b085      	sub	sp, #20
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
  4021c0:	4b08      	ldr	r3, [pc, #32]	; (4021e4 <mdelay+0x2c>)
  4021c2:	681b      	ldr	r3, [r3, #0]
  4021c4:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  4021c6:	bf00      	nop
  4021c8:	4b06      	ldr	r3, [pc, #24]	; (4021e4 <mdelay+0x2c>)
  4021ca:	681a      	ldr	r2, [r3, #0]
  4021cc:	68fb      	ldr	r3, [r7, #12]
  4021ce:	1ad2      	subs	r2, r2, r3
  4021d0:	687b      	ldr	r3, [r7, #4]
  4021d2:	429a      	cmp	r2, r3
  4021d4:	d3f8      	bcc.n	4021c8 <mdelay+0x10>
}
  4021d6:	bf00      	nop
  4021d8:	3714      	adds	r7, #20
  4021da:	46bd      	mov	sp, r7
  4021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021e0:	4770      	bx	lr
  4021e2:	bf00      	nop
  4021e4:	2040090c 	.word	0x2040090c

004021e8 <main>:
 *
 *  \return Unused (ANSI-C compatibility).
 */
// [main]
int main(void)
{
  4021e8:	b580      	push	{r7, lr}
  4021ea:	b082      	sub	sp, #8
  4021ec:	af00      	add	r7, sp, #0
//! [main_step_sys_init]
	/* Initialize the SAM system */
	sysclk_init();
  4021ee:	4b21      	ldr	r3, [pc, #132]	; (402274 <main+0x8c>)
  4021f0:	4798      	blx	r3
	board_init();
  4021f2:	4b21      	ldr	r3, [pc, #132]	; (402278 <main+0x90>)
  4021f4:	4798      	blx	r3
ioport_set_pin_sense_mode(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_SENSE);
#endif
#endif
//! [main_step_console_init]
	/* Initialize the console uart */
	configure_console();
  4021f6:	4b21      	ldr	r3, [pc, #132]	; (40227c <main+0x94>)
  4021f8:	4798      	blx	r3
//! [main_step_console_init]

	/* Output example information */
	puts(STRING_HEADER);
  4021fa:	4821      	ldr	r0, [pc, #132]	; (402280 <main+0x98>)
  4021fc:	4b21      	ldr	r3, [pc, #132]	; (402284 <main+0x9c>)
  4021fe:	4798      	blx	r3

	uint32_t cpuFreq;
	cpuFreq = sysclk_get_cpu_hz();
  402200:	4b21      	ldr	r3, [pc, #132]	; (402288 <main+0xa0>)
  402202:	4798      	blx	r3
  402204:	6078      	str	r0, [r7, #4]

	/* Configure systick for 1 ms */
	puts("Configure system tick to get 1ms tick period.\r");
  402206:	4821      	ldr	r0, [pc, #132]	; (40228c <main+0xa4>)
  402208:	4b1e      	ldr	r3, [pc, #120]	; (402284 <main+0x9c>)
  40220a:	4798      	blx	r3
//! [main_step_systick_init]
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
  40220c:	4b1e      	ldr	r3, [pc, #120]	; (402288 <main+0xa0>)
  40220e:	4798      	blx	r3
  402210:	4602      	mov	r2, r0
  402212:	4b1f      	ldr	r3, [pc, #124]	; (402290 <main+0xa8>)
  402214:	fba3 2302 	umull	r2, r3, r3, r2
  402218:	099b      	lsrs	r3, r3, #6
  40221a:	4618      	mov	r0, r3
  40221c:	4b1d      	ldr	r3, [pc, #116]	; (402294 <main+0xac>)
  40221e:	4798      	blx	r3
  402220:	4603      	mov	r3, r0
  402222:	2b00      	cmp	r3, #0
  402224:	d003      	beq.n	40222e <main+0x46>
		puts("-F- Systick configuration error\r");
  402226:	481c      	ldr	r0, [pc, #112]	; (402298 <main+0xb0>)
  402228:	4b16      	ldr	r3, [pc, #88]	; (402284 <main+0x9c>)
  40222a:	4798      	blx	r3
		while (1);
  40222c:	e7fe      	b.n	40222c <main+0x44>
//! [main_step_tc_init]
	configure_tc();
//! [main_step_tc_init]
#endif

	puts("Configure buttons with debouncing.\r");
  40222e:	481b      	ldr	r0, [pc, #108]	; (40229c <main+0xb4>)
  402230:	4b14      	ldr	r3, [pc, #80]	; (402284 <main+0x9c>)
  402232:	4798      	blx	r3
//! [main_step_btn_init]
	configure_buttons();
  402234:	4b1a      	ldr	r3, [pc, #104]	; (4022a0 <main+0xb8>)
  402236:	4798      	blx	r3
//! [main_step_btn_init]

	printf("Press %s to Start/Stop the %s blinking.\r\n",
  402238:	4a1a      	ldr	r2, [pc, #104]	; (4022a4 <main+0xbc>)
  40223a:	491b      	ldr	r1, [pc, #108]	; (4022a8 <main+0xc0>)
  40223c:	481b      	ldr	r0, [pc, #108]	; (4022ac <main+0xc4>)
  40223e:	4b1c      	ldr	r3, [pc, #112]	; (4022b0 <main+0xc8>)
  402240:	4798      	blx	r3
#endif

//! [main_step_loop]
	while (1) {
		/* Wait for LED to be active */
		while (!g_b_led0_active);
  402242:	bf00      	nop
  402244:	4b1b      	ldr	r3, [pc, #108]	; (4022b4 <main+0xcc>)
  402246:	781b      	ldrb	r3, [r3, #0]
  402248:	b2db      	uxtb	r3, r3
  40224a:	f083 0301 	eor.w	r3, r3, #1
  40224e:	b2db      	uxtb	r3, r3
  402250:	2b00      	cmp	r3, #0
  402252:	d1f7      	bne.n	402244 <main+0x5c>

		/* Toggle LED state if active */
		if (g_b_led0_active) {
  402254:	4b17      	ldr	r3, [pc, #92]	; (4022b4 <main+0xcc>)
  402256:	781b      	ldrb	r3, [r3, #0]
  402258:	b2db      	uxtb	r3, r3
  40225a:	2b00      	cmp	r3, #0
  40225c:	d005      	beq.n	40226a <main+0x82>
			ioport_toggle_pin_level(LED0_GPIO);
  40225e:	2048      	movs	r0, #72	; 0x48
  402260:	4b15      	ldr	r3, [pc, #84]	; (4022b8 <main+0xd0>)
  402262:	4798      	blx	r3
			printf("1 ");
  402264:	4815      	ldr	r0, [pc, #84]	; (4022bc <main+0xd4>)
  402266:	4b12      	ldr	r3, [pc, #72]	; (4022b0 <main+0xc8>)
  402268:	4798      	blx	r3
		}

		/* Wait for 500ms */
		mdelay(500);
  40226a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40226e:	4b14      	ldr	r3, [pc, #80]	; (4022c0 <main+0xd8>)
  402270:	4798      	blx	r3
	}
  402272:	e7e6      	b.n	402242 <main+0x5a>
  402274:	0040049d 	.word	0x0040049d
  402278:	00400a6d 	.word	0x00400a6d
  40227c:	00402181 	.word	0x00402181
  402280:	004053a0 	.word	0x004053a0
  402284:	00402441 	.word	0x00402441
  402288:	00401b75 	.word	0x00401b75
  40228c:	004053f8 	.word	0x004053f8
  402290:	10624dd3 	.word	0x10624dd3
  402294:	00401a99 	.word	0x00401a99
  402298:	00405428 	.word	0x00405428
  40229c:	0040544c 	.word	0x0040544c
  4022a0:	00402115 	.word	0x00402115
  4022a4:	00405470 	.word	0x00405470
  4022a8:	00405480 	.word	0x00405480
  4022ac:	00405484 	.word	0x00405484
  4022b0:	00402315 	.word	0x00402315
  4022b4:	20400008 	.word	0x20400008
  4022b8:	00401c25 	.word	0x00401c25
  4022bc:	004054b0 	.word	0x004054b0
  4022c0:	004021b9 	.word	0x004021b9

004022c4 <__libc_init_array>:
  4022c4:	b570      	push	{r4, r5, r6, lr}
  4022c6:	4e0f      	ldr	r6, [pc, #60]	; (402304 <__libc_init_array+0x40>)
  4022c8:	4d0f      	ldr	r5, [pc, #60]	; (402308 <__libc_init_array+0x44>)
  4022ca:	1b76      	subs	r6, r6, r5
  4022cc:	10b6      	asrs	r6, r6, #2
  4022ce:	bf18      	it	ne
  4022d0:	2400      	movne	r4, #0
  4022d2:	d005      	beq.n	4022e0 <__libc_init_array+0x1c>
  4022d4:	3401      	adds	r4, #1
  4022d6:	f855 3b04 	ldr.w	r3, [r5], #4
  4022da:	4798      	blx	r3
  4022dc:	42a6      	cmp	r6, r4
  4022de:	d1f9      	bne.n	4022d4 <__libc_init_array+0x10>
  4022e0:	4e0a      	ldr	r6, [pc, #40]	; (40230c <__libc_init_array+0x48>)
  4022e2:	4d0b      	ldr	r5, [pc, #44]	; (402310 <__libc_init_array+0x4c>)
  4022e4:	1b76      	subs	r6, r6, r5
  4022e6:	f003 f913 	bl	405510 <_init>
  4022ea:	10b6      	asrs	r6, r6, #2
  4022ec:	bf18      	it	ne
  4022ee:	2400      	movne	r4, #0
  4022f0:	d006      	beq.n	402300 <__libc_init_array+0x3c>
  4022f2:	3401      	adds	r4, #1
  4022f4:	f855 3b04 	ldr.w	r3, [r5], #4
  4022f8:	4798      	blx	r3
  4022fa:	42a6      	cmp	r6, r4
  4022fc:	d1f9      	bne.n	4022f2 <__libc_init_array+0x2e>
  4022fe:	bd70      	pop	{r4, r5, r6, pc}
  402300:	bd70      	pop	{r4, r5, r6, pc}
  402302:	bf00      	nop
  402304:	0040551c 	.word	0x0040551c
  402308:	0040551c 	.word	0x0040551c
  40230c:	00405524 	.word	0x00405524
  402310:	0040551c 	.word	0x0040551c

00402314 <iprintf>:
  402314:	b40f      	push	{r0, r1, r2, r3}
  402316:	b500      	push	{lr}
  402318:	4907      	ldr	r1, [pc, #28]	; (402338 <iprintf+0x24>)
  40231a:	b083      	sub	sp, #12
  40231c:	ab04      	add	r3, sp, #16
  40231e:	6808      	ldr	r0, [r1, #0]
  402320:	f853 2b04 	ldr.w	r2, [r3], #4
  402324:	6881      	ldr	r1, [r0, #8]
  402326:	9301      	str	r3, [sp, #4]
  402328:	f000 f9f4 	bl	402714 <_vfiprintf_r>
  40232c:	b003      	add	sp, #12
  40232e:	f85d eb04 	ldr.w	lr, [sp], #4
  402332:	b004      	add	sp, #16
  402334:	4770      	bx	lr
  402336:	bf00      	nop
  402338:	20400438 	.word	0x20400438

0040233c <memset>:
  40233c:	b470      	push	{r4, r5, r6}
  40233e:	0784      	lsls	r4, r0, #30
  402340:	d046      	beq.n	4023d0 <memset+0x94>
  402342:	1e54      	subs	r4, r2, #1
  402344:	2a00      	cmp	r2, #0
  402346:	d041      	beq.n	4023cc <memset+0x90>
  402348:	b2cd      	uxtb	r5, r1
  40234a:	4603      	mov	r3, r0
  40234c:	e002      	b.n	402354 <memset+0x18>
  40234e:	1e62      	subs	r2, r4, #1
  402350:	b3e4      	cbz	r4, 4023cc <memset+0x90>
  402352:	4614      	mov	r4, r2
  402354:	f803 5b01 	strb.w	r5, [r3], #1
  402358:	079a      	lsls	r2, r3, #30
  40235a:	d1f8      	bne.n	40234e <memset+0x12>
  40235c:	2c03      	cmp	r4, #3
  40235e:	d92e      	bls.n	4023be <memset+0x82>
  402360:	b2cd      	uxtb	r5, r1
  402362:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402366:	2c0f      	cmp	r4, #15
  402368:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40236c:	d919      	bls.n	4023a2 <memset+0x66>
  40236e:	f103 0210 	add.w	r2, r3, #16
  402372:	4626      	mov	r6, r4
  402374:	3e10      	subs	r6, #16
  402376:	2e0f      	cmp	r6, #15
  402378:	f842 5c10 	str.w	r5, [r2, #-16]
  40237c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402380:	f842 5c08 	str.w	r5, [r2, #-8]
  402384:	f842 5c04 	str.w	r5, [r2, #-4]
  402388:	f102 0210 	add.w	r2, r2, #16
  40238c:	d8f2      	bhi.n	402374 <memset+0x38>
  40238e:	f1a4 0210 	sub.w	r2, r4, #16
  402392:	f022 020f 	bic.w	r2, r2, #15
  402396:	f004 040f 	and.w	r4, r4, #15
  40239a:	3210      	adds	r2, #16
  40239c:	2c03      	cmp	r4, #3
  40239e:	4413      	add	r3, r2
  4023a0:	d90d      	bls.n	4023be <memset+0x82>
  4023a2:	461e      	mov	r6, r3
  4023a4:	4622      	mov	r2, r4
  4023a6:	3a04      	subs	r2, #4
  4023a8:	2a03      	cmp	r2, #3
  4023aa:	f846 5b04 	str.w	r5, [r6], #4
  4023ae:	d8fa      	bhi.n	4023a6 <memset+0x6a>
  4023b0:	1f22      	subs	r2, r4, #4
  4023b2:	f022 0203 	bic.w	r2, r2, #3
  4023b6:	3204      	adds	r2, #4
  4023b8:	4413      	add	r3, r2
  4023ba:	f004 0403 	and.w	r4, r4, #3
  4023be:	b12c      	cbz	r4, 4023cc <memset+0x90>
  4023c0:	b2c9      	uxtb	r1, r1
  4023c2:	441c      	add	r4, r3
  4023c4:	f803 1b01 	strb.w	r1, [r3], #1
  4023c8:	42a3      	cmp	r3, r4
  4023ca:	d1fb      	bne.n	4023c4 <memset+0x88>
  4023cc:	bc70      	pop	{r4, r5, r6}
  4023ce:	4770      	bx	lr
  4023d0:	4614      	mov	r4, r2
  4023d2:	4603      	mov	r3, r0
  4023d4:	e7c2      	b.n	40235c <memset+0x20>
  4023d6:	bf00      	nop

004023d8 <_puts_r>:
  4023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4023da:	4605      	mov	r5, r0
  4023dc:	b089      	sub	sp, #36	; 0x24
  4023de:	4608      	mov	r0, r1
  4023e0:	460c      	mov	r4, r1
  4023e2:	f000 f8ed 	bl	4025c0 <strlen>
  4023e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4023e8:	4f14      	ldr	r7, [pc, #80]	; (40243c <_puts_r+0x64>)
  4023ea:	9404      	str	r4, [sp, #16]
  4023ec:	2601      	movs	r6, #1
  4023ee:	1c44      	adds	r4, r0, #1
  4023f0:	a904      	add	r1, sp, #16
  4023f2:	2202      	movs	r2, #2
  4023f4:	9403      	str	r4, [sp, #12]
  4023f6:	9005      	str	r0, [sp, #20]
  4023f8:	68ac      	ldr	r4, [r5, #8]
  4023fa:	9706      	str	r7, [sp, #24]
  4023fc:	9607      	str	r6, [sp, #28]
  4023fe:	9101      	str	r1, [sp, #4]
  402400:	9202      	str	r2, [sp, #8]
  402402:	b1b3      	cbz	r3, 402432 <_puts_r+0x5a>
  402404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402408:	049a      	lsls	r2, r3, #18
  40240a:	d406      	bmi.n	40241a <_puts_r+0x42>
  40240c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40240e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402416:	81a3      	strh	r3, [r4, #12]
  402418:	6662      	str	r2, [r4, #100]	; 0x64
  40241a:	4621      	mov	r1, r4
  40241c:	4628      	mov	r0, r5
  40241e:	aa01      	add	r2, sp, #4
  402420:	f001 fc0a 	bl	403c38 <__sfvwrite_r>
  402424:	2800      	cmp	r0, #0
  402426:	bf14      	ite	ne
  402428:	f04f 30ff 	movne.w	r0, #4294967295
  40242c:	200a      	moveq	r0, #10
  40242e:	b009      	add	sp, #36	; 0x24
  402430:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402432:	4628      	mov	r0, r5
  402434:	f001 fa4e 	bl	4038d4 <__sinit>
  402438:	e7e4      	b.n	402404 <_puts_r+0x2c>
  40243a:	bf00      	nop
  40243c:	004054bc 	.word	0x004054bc

00402440 <puts>:
  402440:	4b02      	ldr	r3, [pc, #8]	; (40244c <puts+0xc>)
  402442:	4601      	mov	r1, r0
  402444:	6818      	ldr	r0, [r3, #0]
  402446:	f7ff bfc7 	b.w	4023d8 <_puts_r>
  40244a:	bf00      	nop
  40244c:	20400438 	.word	0x20400438

00402450 <setbuf>:
  402450:	2900      	cmp	r1, #0
  402452:	bf0c      	ite	eq
  402454:	2202      	moveq	r2, #2
  402456:	2200      	movne	r2, #0
  402458:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40245c:	f000 b800 	b.w	402460 <setvbuf>

00402460 <setvbuf>:
  402460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402464:	4c51      	ldr	r4, [pc, #324]	; (4025ac <setvbuf+0x14c>)
  402466:	6825      	ldr	r5, [r4, #0]
  402468:	b083      	sub	sp, #12
  40246a:	4604      	mov	r4, r0
  40246c:	460f      	mov	r7, r1
  40246e:	4690      	mov	r8, r2
  402470:	461e      	mov	r6, r3
  402472:	b115      	cbz	r5, 40247a <setvbuf+0x1a>
  402474:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402476:	2b00      	cmp	r3, #0
  402478:	d079      	beq.n	40256e <setvbuf+0x10e>
  40247a:	f1b8 0f02 	cmp.w	r8, #2
  40247e:	d004      	beq.n	40248a <setvbuf+0x2a>
  402480:	f1b8 0f01 	cmp.w	r8, #1
  402484:	d87f      	bhi.n	402586 <setvbuf+0x126>
  402486:	2e00      	cmp	r6, #0
  402488:	db7d      	blt.n	402586 <setvbuf+0x126>
  40248a:	4621      	mov	r1, r4
  40248c:	4628      	mov	r0, r5
  40248e:	f001 f98d 	bl	4037ac <_fflush_r>
  402492:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402494:	b141      	cbz	r1, 4024a8 <setvbuf+0x48>
  402496:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40249a:	4299      	cmp	r1, r3
  40249c:	d002      	beq.n	4024a4 <setvbuf+0x44>
  40249e:	4628      	mov	r0, r5
  4024a0:	f001 fae2 	bl	403a68 <_free_r>
  4024a4:	2300      	movs	r3, #0
  4024a6:	6323      	str	r3, [r4, #48]	; 0x30
  4024a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024ac:	2200      	movs	r2, #0
  4024ae:	61a2      	str	r2, [r4, #24]
  4024b0:	6062      	str	r2, [r4, #4]
  4024b2:	061a      	lsls	r2, r3, #24
  4024b4:	d454      	bmi.n	402560 <setvbuf+0x100>
  4024b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4024ba:	f023 0303 	bic.w	r3, r3, #3
  4024be:	f1b8 0f02 	cmp.w	r8, #2
  4024c2:	81a3      	strh	r3, [r4, #12]
  4024c4:	d039      	beq.n	40253a <setvbuf+0xda>
  4024c6:	ab01      	add	r3, sp, #4
  4024c8:	466a      	mov	r2, sp
  4024ca:	4621      	mov	r1, r4
  4024cc:	4628      	mov	r0, r5
  4024ce:	f001 fd69 	bl	403fa4 <__swhatbuf_r>
  4024d2:	89a3      	ldrh	r3, [r4, #12]
  4024d4:	4318      	orrs	r0, r3
  4024d6:	81a0      	strh	r0, [r4, #12]
  4024d8:	b326      	cbz	r6, 402524 <setvbuf+0xc4>
  4024da:	b327      	cbz	r7, 402526 <setvbuf+0xc6>
  4024dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4024de:	2b00      	cmp	r3, #0
  4024e0:	d04d      	beq.n	40257e <setvbuf+0x11e>
  4024e2:	9b00      	ldr	r3, [sp, #0]
  4024e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4024e8:	6027      	str	r7, [r4, #0]
  4024ea:	429e      	cmp	r6, r3
  4024ec:	bf1c      	itt	ne
  4024ee:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4024f2:	81a0      	strhne	r0, [r4, #12]
  4024f4:	f1b8 0f01 	cmp.w	r8, #1
  4024f8:	bf08      	it	eq
  4024fa:	f040 0001 	orreq.w	r0, r0, #1
  4024fe:	b283      	uxth	r3, r0
  402500:	bf08      	it	eq
  402502:	81a0      	strheq	r0, [r4, #12]
  402504:	f003 0008 	and.w	r0, r3, #8
  402508:	b280      	uxth	r0, r0
  40250a:	6127      	str	r7, [r4, #16]
  40250c:	6166      	str	r6, [r4, #20]
  40250e:	b318      	cbz	r0, 402558 <setvbuf+0xf8>
  402510:	f013 0001 	ands.w	r0, r3, #1
  402514:	d02f      	beq.n	402576 <setvbuf+0x116>
  402516:	2000      	movs	r0, #0
  402518:	4276      	negs	r6, r6
  40251a:	61a6      	str	r6, [r4, #24]
  40251c:	60a0      	str	r0, [r4, #8]
  40251e:	b003      	add	sp, #12
  402520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402524:	9e00      	ldr	r6, [sp, #0]
  402526:	4630      	mov	r0, r6
  402528:	f001 fdb0 	bl	40408c <malloc>
  40252c:	4607      	mov	r7, r0
  40252e:	b368      	cbz	r0, 40258c <setvbuf+0x12c>
  402530:	89a3      	ldrh	r3, [r4, #12]
  402532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402536:	81a3      	strh	r3, [r4, #12]
  402538:	e7d0      	b.n	4024dc <setvbuf+0x7c>
  40253a:	2000      	movs	r0, #0
  40253c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402540:	f043 0302 	orr.w	r3, r3, #2
  402544:	2500      	movs	r5, #0
  402546:	2101      	movs	r1, #1
  402548:	81a3      	strh	r3, [r4, #12]
  40254a:	60a5      	str	r5, [r4, #8]
  40254c:	6022      	str	r2, [r4, #0]
  40254e:	6122      	str	r2, [r4, #16]
  402550:	6161      	str	r1, [r4, #20]
  402552:	b003      	add	sp, #12
  402554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402558:	60a0      	str	r0, [r4, #8]
  40255a:	b003      	add	sp, #12
  40255c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402560:	6921      	ldr	r1, [r4, #16]
  402562:	4628      	mov	r0, r5
  402564:	f001 fa80 	bl	403a68 <_free_r>
  402568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40256c:	e7a3      	b.n	4024b6 <setvbuf+0x56>
  40256e:	4628      	mov	r0, r5
  402570:	f001 f9b0 	bl	4038d4 <__sinit>
  402574:	e781      	b.n	40247a <setvbuf+0x1a>
  402576:	60a6      	str	r6, [r4, #8]
  402578:	b003      	add	sp, #12
  40257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40257e:	4628      	mov	r0, r5
  402580:	f001 f9a8 	bl	4038d4 <__sinit>
  402584:	e7ad      	b.n	4024e2 <setvbuf+0x82>
  402586:	f04f 30ff 	mov.w	r0, #4294967295
  40258a:	e7e2      	b.n	402552 <setvbuf+0xf2>
  40258c:	f8dd 9000 	ldr.w	r9, [sp]
  402590:	45b1      	cmp	r9, r6
  402592:	d006      	beq.n	4025a2 <setvbuf+0x142>
  402594:	4648      	mov	r0, r9
  402596:	f001 fd79 	bl	40408c <malloc>
  40259a:	4607      	mov	r7, r0
  40259c:	b108      	cbz	r0, 4025a2 <setvbuf+0x142>
  40259e:	464e      	mov	r6, r9
  4025a0:	e7c6      	b.n	402530 <setvbuf+0xd0>
  4025a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4025a6:	f04f 30ff 	mov.w	r0, #4294967295
  4025aa:	e7c7      	b.n	40253c <setvbuf+0xdc>
  4025ac:	20400438 	.word	0x20400438
	...

004025c0 <strlen>:
  4025c0:	f890 f000 	pld	[r0]
  4025c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4025c8:	f020 0107 	bic.w	r1, r0, #7
  4025cc:	f06f 0c00 	mvn.w	ip, #0
  4025d0:	f010 0407 	ands.w	r4, r0, #7
  4025d4:	f891 f020 	pld	[r1, #32]
  4025d8:	f040 8049 	bne.w	40266e <strlen+0xae>
  4025dc:	f04f 0400 	mov.w	r4, #0
  4025e0:	f06f 0007 	mvn.w	r0, #7
  4025e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4025e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4025ec:	f100 0008 	add.w	r0, r0, #8
  4025f0:	fa82 f24c 	uadd8	r2, r2, ip
  4025f4:	faa4 f28c 	sel	r2, r4, ip
  4025f8:	fa83 f34c 	uadd8	r3, r3, ip
  4025fc:	faa2 f38c 	sel	r3, r2, ip
  402600:	bb4b      	cbnz	r3, 402656 <strlen+0x96>
  402602:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402606:	fa82 f24c 	uadd8	r2, r2, ip
  40260a:	f100 0008 	add.w	r0, r0, #8
  40260e:	faa4 f28c 	sel	r2, r4, ip
  402612:	fa83 f34c 	uadd8	r3, r3, ip
  402616:	faa2 f38c 	sel	r3, r2, ip
  40261a:	b9e3      	cbnz	r3, 402656 <strlen+0x96>
  40261c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402620:	fa82 f24c 	uadd8	r2, r2, ip
  402624:	f100 0008 	add.w	r0, r0, #8
  402628:	faa4 f28c 	sel	r2, r4, ip
  40262c:	fa83 f34c 	uadd8	r3, r3, ip
  402630:	faa2 f38c 	sel	r3, r2, ip
  402634:	b97b      	cbnz	r3, 402656 <strlen+0x96>
  402636:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40263a:	f101 0120 	add.w	r1, r1, #32
  40263e:	fa82 f24c 	uadd8	r2, r2, ip
  402642:	f100 0008 	add.w	r0, r0, #8
  402646:	faa4 f28c 	sel	r2, r4, ip
  40264a:	fa83 f34c 	uadd8	r3, r3, ip
  40264e:	faa2 f38c 	sel	r3, r2, ip
  402652:	2b00      	cmp	r3, #0
  402654:	d0c6      	beq.n	4025e4 <strlen+0x24>
  402656:	2a00      	cmp	r2, #0
  402658:	bf04      	itt	eq
  40265a:	3004      	addeq	r0, #4
  40265c:	461a      	moveq	r2, r3
  40265e:	ba12      	rev	r2, r2
  402660:	fab2 f282 	clz	r2, r2
  402664:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402668:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40266c:	4770      	bx	lr
  40266e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402672:	f004 0503 	and.w	r5, r4, #3
  402676:	f1c4 0000 	rsb	r0, r4, #0
  40267a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40267e:	f014 0f04 	tst.w	r4, #4
  402682:	f891 f040 	pld	[r1, #64]	; 0x40
  402686:	fa0c f505 	lsl.w	r5, ip, r5
  40268a:	ea62 0205 	orn	r2, r2, r5
  40268e:	bf1c      	itt	ne
  402690:	ea63 0305 	ornne	r3, r3, r5
  402694:	4662      	movne	r2, ip
  402696:	f04f 0400 	mov.w	r4, #0
  40269a:	e7a9      	b.n	4025f0 <strlen+0x30>

0040269c <__sprint_r.part.0>:
  40269c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40269e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026a2:	049c      	lsls	r4, r3, #18
  4026a4:	4692      	mov	sl, r2
  4026a6:	d52c      	bpl.n	402702 <__sprint_r.part.0+0x66>
  4026a8:	6893      	ldr	r3, [r2, #8]
  4026aa:	6812      	ldr	r2, [r2, #0]
  4026ac:	b33b      	cbz	r3, 4026fe <__sprint_r.part.0+0x62>
  4026ae:	460f      	mov	r7, r1
  4026b0:	4680      	mov	r8, r0
  4026b2:	f102 0908 	add.w	r9, r2, #8
  4026b6:	e919 0060 	ldmdb	r9, {r5, r6}
  4026ba:	08b6      	lsrs	r6, r6, #2
  4026bc:	d017      	beq.n	4026ee <__sprint_r.part.0+0x52>
  4026be:	3d04      	subs	r5, #4
  4026c0:	2400      	movs	r4, #0
  4026c2:	e001      	b.n	4026c8 <__sprint_r.part.0+0x2c>
  4026c4:	42a6      	cmp	r6, r4
  4026c6:	d010      	beq.n	4026ea <__sprint_r.part.0+0x4e>
  4026c8:	463a      	mov	r2, r7
  4026ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4026ce:	4640      	mov	r0, r8
  4026d0:	f001 f96a 	bl	4039a8 <_fputwc_r>
  4026d4:	1c43      	adds	r3, r0, #1
  4026d6:	f104 0401 	add.w	r4, r4, #1
  4026da:	d1f3      	bne.n	4026c4 <__sprint_r.part.0+0x28>
  4026dc:	2300      	movs	r3, #0
  4026de:	f8ca 3008 	str.w	r3, [sl, #8]
  4026e2:	f8ca 3004 	str.w	r3, [sl, #4]
  4026e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4026ee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4026f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4026f6:	f109 0908 	add.w	r9, r9, #8
  4026fa:	2b00      	cmp	r3, #0
  4026fc:	d1db      	bne.n	4026b6 <__sprint_r.part.0+0x1a>
  4026fe:	2000      	movs	r0, #0
  402700:	e7ec      	b.n	4026dc <__sprint_r.part.0+0x40>
  402702:	f001 fa99 	bl	403c38 <__sfvwrite_r>
  402706:	2300      	movs	r3, #0
  402708:	f8ca 3008 	str.w	r3, [sl, #8]
  40270c:	f8ca 3004 	str.w	r3, [sl, #4]
  402710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402714 <_vfiprintf_r>:
  402714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402718:	b0ab      	sub	sp, #172	; 0xac
  40271a:	461c      	mov	r4, r3
  40271c:	9100      	str	r1, [sp, #0]
  40271e:	4690      	mov	r8, r2
  402720:	9304      	str	r3, [sp, #16]
  402722:	9005      	str	r0, [sp, #20]
  402724:	b118      	cbz	r0, 40272e <_vfiprintf_r+0x1a>
  402726:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402728:	2b00      	cmp	r3, #0
  40272a:	f000 80de 	beq.w	4028ea <_vfiprintf_r+0x1d6>
  40272e:	9800      	ldr	r0, [sp, #0]
  402730:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  402734:	b28a      	uxth	r2, r1
  402736:	0495      	lsls	r5, r2, #18
  402738:	d407      	bmi.n	40274a <_vfiprintf_r+0x36>
  40273a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40273c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  402740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402744:	8182      	strh	r2, [r0, #12]
  402746:	6643      	str	r3, [r0, #100]	; 0x64
  402748:	b292      	uxth	r2, r2
  40274a:	0711      	lsls	r1, r2, #28
  40274c:	f140 80b1 	bpl.w	4028b2 <_vfiprintf_r+0x19e>
  402750:	9b00      	ldr	r3, [sp, #0]
  402752:	691b      	ldr	r3, [r3, #16]
  402754:	2b00      	cmp	r3, #0
  402756:	f000 80ac 	beq.w	4028b2 <_vfiprintf_r+0x19e>
  40275a:	f002 021a 	and.w	r2, r2, #26
  40275e:	2a0a      	cmp	r2, #10
  402760:	f000 80b5 	beq.w	4028ce <_vfiprintf_r+0x1ba>
  402764:	2300      	movs	r3, #0
  402766:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40276a:	9302      	str	r3, [sp, #8]
  40276c:	930f      	str	r3, [sp, #60]	; 0x3c
  40276e:	930e      	str	r3, [sp, #56]	; 0x38
  402770:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402774:	46da      	mov	sl, fp
  402776:	f898 3000 	ldrb.w	r3, [r8]
  40277a:	4644      	mov	r4, r8
  40277c:	b1fb      	cbz	r3, 4027be <_vfiprintf_r+0xaa>
  40277e:	2b25      	cmp	r3, #37	; 0x25
  402780:	d102      	bne.n	402788 <_vfiprintf_r+0x74>
  402782:	e01c      	b.n	4027be <_vfiprintf_r+0xaa>
  402784:	2b25      	cmp	r3, #37	; 0x25
  402786:	d003      	beq.n	402790 <_vfiprintf_r+0x7c>
  402788:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40278c:	2b00      	cmp	r3, #0
  40278e:	d1f9      	bne.n	402784 <_vfiprintf_r+0x70>
  402790:	ebc8 0504 	rsb	r5, r8, r4
  402794:	b19d      	cbz	r5, 4027be <_vfiprintf_r+0xaa>
  402796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40279a:	f8ca 8000 	str.w	r8, [sl]
  40279e:	3301      	adds	r3, #1
  4027a0:	442a      	add	r2, r5
  4027a2:	2b07      	cmp	r3, #7
  4027a4:	f8ca 5004 	str.w	r5, [sl, #4]
  4027a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4027aa:	930e      	str	r3, [sp, #56]	; 0x38
  4027ac:	dd7b      	ble.n	4028a6 <_vfiprintf_r+0x192>
  4027ae:	2a00      	cmp	r2, #0
  4027b0:	f040 8528 	bne.w	403204 <_vfiprintf_r+0xaf0>
  4027b4:	9b02      	ldr	r3, [sp, #8]
  4027b6:	920e      	str	r2, [sp, #56]	; 0x38
  4027b8:	442b      	add	r3, r5
  4027ba:	46da      	mov	sl, fp
  4027bc:	9302      	str	r3, [sp, #8]
  4027be:	7823      	ldrb	r3, [r4, #0]
  4027c0:	2b00      	cmp	r3, #0
  4027c2:	f000 843e 	beq.w	403042 <_vfiprintf_r+0x92e>
  4027c6:	2100      	movs	r1, #0
  4027c8:	f04f 0300 	mov.w	r3, #0
  4027cc:	f04f 32ff 	mov.w	r2, #4294967295
  4027d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4027d4:	f104 0801 	add.w	r8, r4, #1
  4027d8:	7863      	ldrb	r3, [r4, #1]
  4027da:	9201      	str	r2, [sp, #4]
  4027dc:	4608      	mov	r0, r1
  4027de:	460e      	mov	r6, r1
  4027e0:	460c      	mov	r4, r1
  4027e2:	f108 0801 	add.w	r8, r8, #1
  4027e6:	f1a3 0220 	sub.w	r2, r3, #32
  4027ea:	2a58      	cmp	r2, #88	; 0x58
  4027ec:	f200 8393 	bhi.w	402f16 <_vfiprintf_r+0x802>
  4027f0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4027f4:	03910346 	.word	0x03910346
  4027f8:	034e0391 	.word	0x034e0391
  4027fc:	03910391 	.word	0x03910391
  402800:	03910391 	.word	0x03910391
  402804:	03910391 	.word	0x03910391
  402808:	02670289 	.word	0x02670289
  40280c:	00800391 	.word	0x00800391
  402810:	0391026c 	.word	0x0391026c
  402814:	025901c6 	.word	0x025901c6
  402818:	02590259 	.word	0x02590259
  40281c:	02590259 	.word	0x02590259
  402820:	02590259 	.word	0x02590259
  402824:	02590259 	.word	0x02590259
  402828:	03910391 	.word	0x03910391
  40282c:	03910391 	.word	0x03910391
  402830:	03910391 	.word	0x03910391
  402834:	03910391 	.word	0x03910391
  402838:	03910391 	.word	0x03910391
  40283c:	039101cb 	.word	0x039101cb
  402840:	03910391 	.word	0x03910391
  402844:	03910391 	.word	0x03910391
  402848:	03910391 	.word	0x03910391
  40284c:	03910391 	.word	0x03910391
  402850:	02140391 	.word	0x02140391
  402854:	03910391 	.word	0x03910391
  402858:	03910391 	.word	0x03910391
  40285c:	02ee0391 	.word	0x02ee0391
  402860:	03910391 	.word	0x03910391
  402864:	03910311 	.word	0x03910311
  402868:	03910391 	.word	0x03910391
  40286c:	03910391 	.word	0x03910391
  402870:	03910391 	.word	0x03910391
  402874:	03910391 	.word	0x03910391
  402878:	03340391 	.word	0x03340391
  40287c:	0391038a 	.word	0x0391038a
  402880:	03910391 	.word	0x03910391
  402884:	038a0367 	.word	0x038a0367
  402888:	03910391 	.word	0x03910391
  40288c:	0391036c 	.word	0x0391036c
  402890:	02950379 	.word	0x02950379
  402894:	02e90085 	.word	0x02e90085
  402898:	029b0391 	.word	0x029b0391
  40289c:	02ba0391 	.word	0x02ba0391
  4028a0:	03910391 	.word	0x03910391
  4028a4:	0353      	.short	0x0353
  4028a6:	f10a 0a08 	add.w	sl, sl, #8
  4028aa:	9b02      	ldr	r3, [sp, #8]
  4028ac:	442b      	add	r3, r5
  4028ae:	9302      	str	r3, [sp, #8]
  4028b0:	e785      	b.n	4027be <_vfiprintf_r+0xaa>
  4028b2:	9900      	ldr	r1, [sp, #0]
  4028b4:	9805      	ldr	r0, [sp, #20]
  4028b6:	f000 fe61 	bl	40357c <__swsetup_r>
  4028ba:	2800      	cmp	r0, #0
  4028bc:	f040 8558 	bne.w	403370 <_vfiprintf_r+0xc5c>
  4028c0:	9b00      	ldr	r3, [sp, #0]
  4028c2:	899a      	ldrh	r2, [r3, #12]
  4028c4:	f002 021a 	and.w	r2, r2, #26
  4028c8:	2a0a      	cmp	r2, #10
  4028ca:	f47f af4b 	bne.w	402764 <_vfiprintf_r+0x50>
  4028ce:	9900      	ldr	r1, [sp, #0]
  4028d0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	f6ff af45 	blt.w	402764 <_vfiprintf_r+0x50>
  4028da:	4623      	mov	r3, r4
  4028dc:	4642      	mov	r2, r8
  4028de:	9805      	ldr	r0, [sp, #20]
  4028e0:	f000 fe16 	bl	403510 <__sbprintf>
  4028e4:	b02b      	add	sp, #172	; 0xac
  4028e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028ea:	f000 fff3 	bl	4038d4 <__sinit>
  4028ee:	e71e      	b.n	40272e <_vfiprintf_r+0x1a>
  4028f0:	4264      	negs	r4, r4
  4028f2:	9304      	str	r3, [sp, #16]
  4028f4:	f046 0604 	orr.w	r6, r6, #4
  4028f8:	f898 3000 	ldrb.w	r3, [r8]
  4028fc:	e771      	b.n	4027e2 <_vfiprintf_r+0xce>
  4028fe:	2130      	movs	r1, #48	; 0x30
  402900:	9804      	ldr	r0, [sp, #16]
  402902:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  402906:	9901      	ldr	r1, [sp, #4]
  402908:	9406      	str	r4, [sp, #24]
  40290a:	f04f 0300 	mov.w	r3, #0
  40290e:	2278      	movs	r2, #120	; 0x78
  402910:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402914:	2900      	cmp	r1, #0
  402916:	4603      	mov	r3, r0
  402918:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40291c:	6804      	ldr	r4, [r0, #0]
  40291e:	f103 0304 	add.w	r3, r3, #4
  402922:	f04f 0500 	mov.w	r5, #0
  402926:	f046 0202 	orr.w	r2, r6, #2
  40292a:	f2c0 8525 	blt.w	403378 <_vfiprintf_r+0xc64>
  40292e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402932:	ea54 0205 	orrs.w	r2, r4, r5
  402936:	f046 0602 	orr.w	r6, r6, #2
  40293a:	9304      	str	r3, [sp, #16]
  40293c:	f040 84bf 	bne.w	4032be <_vfiprintf_r+0xbaa>
  402940:	48b3      	ldr	r0, [pc, #716]	; (402c10 <_vfiprintf_r+0x4fc>)
  402942:	9b01      	ldr	r3, [sp, #4]
  402944:	2b00      	cmp	r3, #0
  402946:	f040 841c 	bne.w	403182 <_vfiprintf_r+0xa6e>
  40294a:	4699      	mov	r9, r3
  40294c:	2300      	movs	r3, #0
  40294e:	9301      	str	r3, [sp, #4]
  402950:	9303      	str	r3, [sp, #12]
  402952:	465f      	mov	r7, fp
  402954:	9b01      	ldr	r3, [sp, #4]
  402956:	9a03      	ldr	r2, [sp, #12]
  402958:	4293      	cmp	r3, r2
  40295a:	bfb8      	it	lt
  40295c:	4613      	movlt	r3, r2
  40295e:	461d      	mov	r5, r3
  402960:	f1b9 0f00 	cmp.w	r9, #0
  402964:	d000      	beq.n	402968 <_vfiprintf_r+0x254>
  402966:	3501      	adds	r5, #1
  402968:	f016 0302 	ands.w	r3, r6, #2
  40296c:	9307      	str	r3, [sp, #28]
  40296e:	bf18      	it	ne
  402970:	3502      	addne	r5, #2
  402972:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  402976:	9308      	str	r3, [sp, #32]
  402978:	f040 82f1 	bne.w	402f5e <_vfiprintf_r+0x84a>
  40297c:	9b06      	ldr	r3, [sp, #24]
  40297e:	1b5c      	subs	r4, r3, r5
  402980:	2c00      	cmp	r4, #0
  402982:	f340 82ec 	ble.w	402f5e <_vfiprintf_r+0x84a>
  402986:	2c10      	cmp	r4, #16
  402988:	f340 8556 	ble.w	403438 <_vfiprintf_r+0xd24>
  40298c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 402c14 <_vfiprintf_r+0x500>
  402990:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  402994:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402996:	46d4      	mov	ip, sl
  402998:	2310      	movs	r3, #16
  40299a:	46c2      	mov	sl, r8
  40299c:	4670      	mov	r0, lr
  40299e:	46a8      	mov	r8, r5
  4029a0:	464d      	mov	r5, r9
  4029a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4029a6:	e007      	b.n	4029b8 <_vfiprintf_r+0x2a4>
  4029a8:	f100 0e02 	add.w	lr, r0, #2
  4029ac:	f10c 0c08 	add.w	ip, ip, #8
  4029b0:	4608      	mov	r0, r1
  4029b2:	3c10      	subs	r4, #16
  4029b4:	2c10      	cmp	r4, #16
  4029b6:	dd13      	ble.n	4029e0 <_vfiprintf_r+0x2cc>
  4029b8:	1c41      	adds	r1, r0, #1
  4029ba:	3210      	adds	r2, #16
  4029bc:	2907      	cmp	r1, #7
  4029be:	920f      	str	r2, [sp, #60]	; 0x3c
  4029c0:	f8cc 5000 	str.w	r5, [ip]
  4029c4:	f8cc 3004 	str.w	r3, [ip, #4]
  4029c8:	910e      	str	r1, [sp, #56]	; 0x38
  4029ca:	dded      	ble.n	4029a8 <_vfiprintf_r+0x294>
  4029cc:	2a00      	cmp	r2, #0
  4029ce:	f040 82b7 	bne.w	402f40 <_vfiprintf_r+0x82c>
  4029d2:	3c10      	subs	r4, #16
  4029d4:	2c10      	cmp	r4, #16
  4029d6:	4610      	mov	r0, r2
  4029d8:	f04f 0e01 	mov.w	lr, #1
  4029dc:	46dc      	mov	ip, fp
  4029de:	dceb      	bgt.n	4029b8 <_vfiprintf_r+0x2a4>
  4029e0:	46a9      	mov	r9, r5
  4029e2:	4670      	mov	r0, lr
  4029e4:	4645      	mov	r5, r8
  4029e6:	46d0      	mov	r8, sl
  4029e8:	46e2      	mov	sl, ip
  4029ea:	4422      	add	r2, r4
  4029ec:	2807      	cmp	r0, #7
  4029ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4029f0:	f8ca 9000 	str.w	r9, [sl]
  4029f4:	f8ca 4004 	str.w	r4, [sl, #4]
  4029f8:	900e      	str	r0, [sp, #56]	; 0x38
  4029fa:	f300 8375 	bgt.w	4030e8 <_vfiprintf_r+0x9d4>
  4029fe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402a02:	f10a 0a08 	add.w	sl, sl, #8
  402a06:	f100 0e01 	add.w	lr, r0, #1
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	f040 82b0 	bne.w	402f70 <_vfiprintf_r+0x85c>
  402a10:	9b07      	ldr	r3, [sp, #28]
  402a12:	2b00      	cmp	r3, #0
  402a14:	f000 82c3 	beq.w	402f9e <_vfiprintf_r+0x88a>
  402a18:	3202      	adds	r2, #2
  402a1a:	a90c      	add	r1, sp, #48	; 0x30
  402a1c:	2302      	movs	r3, #2
  402a1e:	f1be 0f07 	cmp.w	lr, #7
  402a22:	920f      	str	r2, [sp, #60]	; 0x3c
  402a24:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402a28:	e88a 000a 	stmia.w	sl, {r1, r3}
  402a2c:	f340 8378 	ble.w	403120 <_vfiprintf_r+0xa0c>
  402a30:	2a00      	cmp	r2, #0
  402a32:	f040 840a 	bne.w	40324a <_vfiprintf_r+0xb36>
  402a36:	9b08      	ldr	r3, [sp, #32]
  402a38:	2b80      	cmp	r3, #128	; 0x80
  402a3a:	f04f 0e01 	mov.w	lr, #1
  402a3e:	4610      	mov	r0, r2
  402a40:	46da      	mov	sl, fp
  402a42:	f040 82b0 	bne.w	402fa6 <_vfiprintf_r+0x892>
  402a46:	9b06      	ldr	r3, [sp, #24]
  402a48:	1b5c      	subs	r4, r3, r5
  402a4a:	2c00      	cmp	r4, #0
  402a4c:	f340 82ab 	ble.w	402fa6 <_vfiprintf_r+0x892>
  402a50:	2c10      	cmp	r4, #16
  402a52:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 402c18 <_vfiprintf_r+0x504>
  402a56:	f340 850b 	ble.w	403470 <_vfiprintf_r+0xd5c>
  402a5a:	46d6      	mov	lr, sl
  402a5c:	2310      	movs	r3, #16
  402a5e:	46c2      	mov	sl, r8
  402a60:	46a8      	mov	r8, r5
  402a62:	464d      	mov	r5, r9
  402a64:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402a68:	e007      	b.n	402a7a <_vfiprintf_r+0x366>
  402a6a:	f100 0c02 	add.w	ip, r0, #2
  402a6e:	f10e 0e08 	add.w	lr, lr, #8
  402a72:	4608      	mov	r0, r1
  402a74:	3c10      	subs	r4, #16
  402a76:	2c10      	cmp	r4, #16
  402a78:	dd13      	ble.n	402aa2 <_vfiprintf_r+0x38e>
  402a7a:	1c41      	adds	r1, r0, #1
  402a7c:	3210      	adds	r2, #16
  402a7e:	2907      	cmp	r1, #7
  402a80:	920f      	str	r2, [sp, #60]	; 0x3c
  402a82:	f8ce 5000 	str.w	r5, [lr]
  402a86:	f8ce 3004 	str.w	r3, [lr, #4]
  402a8a:	910e      	str	r1, [sp, #56]	; 0x38
  402a8c:	dded      	ble.n	402a6a <_vfiprintf_r+0x356>
  402a8e:	2a00      	cmp	r2, #0
  402a90:	f040 8315 	bne.w	4030be <_vfiprintf_r+0x9aa>
  402a94:	3c10      	subs	r4, #16
  402a96:	2c10      	cmp	r4, #16
  402a98:	f04f 0c01 	mov.w	ip, #1
  402a9c:	4610      	mov	r0, r2
  402a9e:	46de      	mov	lr, fp
  402aa0:	dceb      	bgt.n	402a7a <_vfiprintf_r+0x366>
  402aa2:	46a9      	mov	r9, r5
  402aa4:	4645      	mov	r5, r8
  402aa6:	46d0      	mov	r8, sl
  402aa8:	46f2      	mov	sl, lr
  402aaa:	4422      	add	r2, r4
  402aac:	f1bc 0f07 	cmp.w	ip, #7
  402ab0:	920f      	str	r2, [sp, #60]	; 0x3c
  402ab2:	f8ca 9000 	str.w	r9, [sl]
  402ab6:	f8ca 4004 	str.w	r4, [sl, #4]
  402aba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  402abe:	f300 83d2 	bgt.w	403266 <_vfiprintf_r+0xb52>
  402ac2:	9b01      	ldr	r3, [sp, #4]
  402ac4:	9903      	ldr	r1, [sp, #12]
  402ac6:	1a5c      	subs	r4, r3, r1
  402ac8:	2c00      	cmp	r4, #0
  402aca:	f10a 0a08 	add.w	sl, sl, #8
  402ace:	f10c 0e01 	add.w	lr, ip, #1
  402ad2:	4660      	mov	r0, ip
  402ad4:	f300 826d 	bgt.w	402fb2 <_vfiprintf_r+0x89e>
  402ad8:	9903      	ldr	r1, [sp, #12]
  402ada:	f8ca 7000 	str.w	r7, [sl]
  402ade:	440a      	add	r2, r1
  402ae0:	f1be 0f07 	cmp.w	lr, #7
  402ae4:	920f      	str	r2, [sp, #60]	; 0x3c
  402ae6:	f8ca 1004 	str.w	r1, [sl, #4]
  402aea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402aee:	f340 82ce 	ble.w	40308e <_vfiprintf_r+0x97a>
  402af2:	2a00      	cmp	r2, #0
  402af4:	f040 833a 	bne.w	40316c <_vfiprintf_r+0xa58>
  402af8:	0770      	lsls	r0, r6, #29
  402afa:	920e      	str	r2, [sp, #56]	; 0x38
  402afc:	d538      	bpl.n	402b70 <_vfiprintf_r+0x45c>
  402afe:	9b06      	ldr	r3, [sp, #24]
  402b00:	1b5c      	subs	r4, r3, r5
  402b02:	2c00      	cmp	r4, #0
  402b04:	dd34      	ble.n	402b70 <_vfiprintf_r+0x45c>
  402b06:	46da      	mov	sl, fp
  402b08:	2c10      	cmp	r4, #16
  402b0a:	f340 84ab 	ble.w	403464 <_vfiprintf_r+0xd50>
  402b0e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402c14 <_vfiprintf_r+0x500>
  402b12:	990e      	ldr	r1, [sp, #56]	; 0x38
  402b14:	464f      	mov	r7, r9
  402b16:	2610      	movs	r6, #16
  402b18:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402b1c:	e006      	b.n	402b2c <_vfiprintf_r+0x418>
  402b1e:	1c88      	adds	r0, r1, #2
  402b20:	f10a 0a08 	add.w	sl, sl, #8
  402b24:	4619      	mov	r1, r3
  402b26:	3c10      	subs	r4, #16
  402b28:	2c10      	cmp	r4, #16
  402b2a:	dd13      	ble.n	402b54 <_vfiprintf_r+0x440>
  402b2c:	1c4b      	adds	r3, r1, #1
  402b2e:	3210      	adds	r2, #16
  402b30:	2b07      	cmp	r3, #7
  402b32:	920f      	str	r2, [sp, #60]	; 0x3c
  402b34:	f8ca 7000 	str.w	r7, [sl]
  402b38:	f8ca 6004 	str.w	r6, [sl, #4]
  402b3c:	930e      	str	r3, [sp, #56]	; 0x38
  402b3e:	ddee      	ble.n	402b1e <_vfiprintf_r+0x40a>
  402b40:	2a00      	cmp	r2, #0
  402b42:	f040 828e 	bne.w	403062 <_vfiprintf_r+0x94e>
  402b46:	3c10      	subs	r4, #16
  402b48:	2c10      	cmp	r4, #16
  402b4a:	f04f 0001 	mov.w	r0, #1
  402b4e:	4611      	mov	r1, r2
  402b50:	46da      	mov	sl, fp
  402b52:	dceb      	bgt.n	402b2c <_vfiprintf_r+0x418>
  402b54:	46b9      	mov	r9, r7
  402b56:	4422      	add	r2, r4
  402b58:	2807      	cmp	r0, #7
  402b5a:	920f      	str	r2, [sp, #60]	; 0x3c
  402b5c:	f8ca 9000 	str.w	r9, [sl]
  402b60:	f8ca 4004 	str.w	r4, [sl, #4]
  402b64:	900e      	str	r0, [sp, #56]	; 0x38
  402b66:	f340 829b 	ble.w	4030a0 <_vfiprintf_r+0x98c>
  402b6a:	2a00      	cmp	r2, #0
  402b6c:	f040 8425 	bne.w	4033ba <_vfiprintf_r+0xca6>
  402b70:	9b02      	ldr	r3, [sp, #8]
  402b72:	9a06      	ldr	r2, [sp, #24]
  402b74:	42aa      	cmp	r2, r5
  402b76:	bfac      	ite	ge
  402b78:	189b      	addge	r3, r3, r2
  402b7a:	195b      	addlt	r3, r3, r5
  402b7c:	9302      	str	r3, [sp, #8]
  402b7e:	e299      	b.n	4030b4 <_vfiprintf_r+0x9a0>
  402b80:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402b84:	f898 3000 	ldrb.w	r3, [r8]
  402b88:	e62b      	b.n	4027e2 <_vfiprintf_r+0xce>
  402b8a:	9406      	str	r4, [sp, #24]
  402b8c:	2900      	cmp	r1, #0
  402b8e:	f040 84af 	bne.w	4034f0 <_vfiprintf_r+0xddc>
  402b92:	f046 0610 	orr.w	r6, r6, #16
  402b96:	06b3      	lsls	r3, r6, #26
  402b98:	f140 8312 	bpl.w	4031c0 <_vfiprintf_r+0xaac>
  402b9c:	9904      	ldr	r1, [sp, #16]
  402b9e:	3107      	adds	r1, #7
  402ba0:	f021 0107 	bic.w	r1, r1, #7
  402ba4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402ba8:	3108      	adds	r1, #8
  402baa:	9104      	str	r1, [sp, #16]
  402bac:	4614      	mov	r4, r2
  402bae:	461d      	mov	r5, r3
  402bb0:	2a00      	cmp	r2, #0
  402bb2:	f173 0300 	sbcs.w	r3, r3, #0
  402bb6:	f2c0 8386 	blt.w	4032c6 <_vfiprintf_r+0xbb2>
  402bba:	9b01      	ldr	r3, [sp, #4]
  402bbc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402bc0:	2b00      	cmp	r3, #0
  402bc2:	f2c0 831a 	blt.w	4031fa <_vfiprintf_r+0xae6>
  402bc6:	ea54 0305 	orrs.w	r3, r4, r5
  402bca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402bce:	f000 80ed 	beq.w	402dac <_vfiprintf_r+0x698>
  402bd2:	2d00      	cmp	r5, #0
  402bd4:	bf08      	it	eq
  402bd6:	2c0a      	cmpeq	r4, #10
  402bd8:	f0c0 80ed 	bcc.w	402db6 <_vfiprintf_r+0x6a2>
  402bdc:	465f      	mov	r7, fp
  402bde:	4620      	mov	r0, r4
  402be0:	4629      	mov	r1, r5
  402be2:	220a      	movs	r2, #10
  402be4:	2300      	movs	r3, #0
  402be6:	f002 fa47 	bl	405078 <__aeabi_uldivmod>
  402bea:	3230      	adds	r2, #48	; 0x30
  402bec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  402bf0:	4620      	mov	r0, r4
  402bf2:	4629      	mov	r1, r5
  402bf4:	2300      	movs	r3, #0
  402bf6:	220a      	movs	r2, #10
  402bf8:	f002 fa3e 	bl	405078 <__aeabi_uldivmod>
  402bfc:	4604      	mov	r4, r0
  402bfe:	460d      	mov	r5, r1
  402c00:	ea54 0305 	orrs.w	r3, r4, r5
  402c04:	d1eb      	bne.n	402bde <_vfiprintf_r+0x4ca>
  402c06:	ebc7 030b 	rsb	r3, r7, fp
  402c0a:	9303      	str	r3, [sp, #12]
  402c0c:	e6a2      	b.n	402954 <_vfiprintf_r+0x240>
  402c0e:	bf00      	nop
  402c10:	004054e4 	.word	0x004054e4
  402c14:	00405500 	.word	0x00405500
  402c18:	004054c0 	.word	0x004054c0
  402c1c:	9406      	str	r4, [sp, #24]
  402c1e:	2900      	cmp	r1, #0
  402c20:	f040 8462 	bne.w	4034e8 <_vfiprintf_r+0xdd4>
  402c24:	f046 0610 	orr.w	r6, r6, #16
  402c28:	f016 0320 	ands.w	r3, r6, #32
  402c2c:	f000 82ae 	beq.w	40318c <_vfiprintf_r+0xa78>
  402c30:	9b04      	ldr	r3, [sp, #16]
  402c32:	3307      	adds	r3, #7
  402c34:	f023 0307 	bic.w	r3, r3, #7
  402c38:	f04f 0200 	mov.w	r2, #0
  402c3c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402c40:	e9d3 4500 	ldrd	r4, r5, [r3]
  402c44:	f103 0208 	add.w	r2, r3, #8
  402c48:	9b01      	ldr	r3, [sp, #4]
  402c4a:	9204      	str	r2, [sp, #16]
  402c4c:	2b00      	cmp	r3, #0
  402c4e:	f2c0 8174 	blt.w	402f3a <_vfiprintf_r+0x826>
  402c52:	ea54 0305 	orrs.w	r3, r4, r5
  402c56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402c5a:	f040 816e 	bne.w	402f3a <_vfiprintf_r+0x826>
  402c5e:	9b01      	ldr	r3, [sp, #4]
  402c60:	2b00      	cmp	r3, #0
  402c62:	f000 8430 	beq.w	4034c6 <_vfiprintf_r+0xdb2>
  402c66:	f04f 0900 	mov.w	r9, #0
  402c6a:	2400      	movs	r4, #0
  402c6c:	2500      	movs	r5, #0
  402c6e:	465f      	mov	r7, fp
  402c70:	08e2      	lsrs	r2, r4, #3
  402c72:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402c76:	08e9      	lsrs	r1, r5, #3
  402c78:	f004 0307 	and.w	r3, r4, #7
  402c7c:	460d      	mov	r5, r1
  402c7e:	4614      	mov	r4, r2
  402c80:	3330      	adds	r3, #48	; 0x30
  402c82:	ea54 0205 	orrs.w	r2, r4, r5
  402c86:	f807 3d01 	strb.w	r3, [r7, #-1]!
  402c8a:	d1f1      	bne.n	402c70 <_vfiprintf_r+0x55c>
  402c8c:	07f4      	lsls	r4, r6, #31
  402c8e:	d5ba      	bpl.n	402c06 <_vfiprintf_r+0x4f2>
  402c90:	2b30      	cmp	r3, #48	; 0x30
  402c92:	d0b8      	beq.n	402c06 <_vfiprintf_r+0x4f2>
  402c94:	2230      	movs	r2, #48	; 0x30
  402c96:	1e7b      	subs	r3, r7, #1
  402c98:	f807 2c01 	strb.w	r2, [r7, #-1]
  402c9c:	ebc3 020b 	rsb	r2, r3, fp
  402ca0:	9203      	str	r2, [sp, #12]
  402ca2:	461f      	mov	r7, r3
  402ca4:	e656      	b.n	402954 <_vfiprintf_r+0x240>
  402ca6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402caa:	2400      	movs	r4, #0
  402cac:	f818 3b01 	ldrb.w	r3, [r8], #1
  402cb0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402cb4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  402cb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402cbc:	2a09      	cmp	r2, #9
  402cbe:	d9f5      	bls.n	402cac <_vfiprintf_r+0x598>
  402cc0:	e591      	b.n	4027e6 <_vfiprintf_r+0xd2>
  402cc2:	f898 3000 	ldrb.w	r3, [r8]
  402cc6:	2101      	movs	r1, #1
  402cc8:	202b      	movs	r0, #43	; 0x2b
  402cca:	e58a      	b.n	4027e2 <_vfiprintf_r+0xce>
  402ccc:	f898 3000 	ldrb.w	r3, [r8]
  402cd0:	2b2a      	cmp	r3, #42	; 0x2a
  402cd2:	f108 0501 	add.w	r5, r8, #1
  402cd6:	f000 83dd 	beq.w	403494 <_vfiprintf_r+0xd80>
  402cda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402cde:	2a09      	cmp	r2, #9
  402ce0:	46a8      	mov	r8, r5
  402ce2:	bf98      	it	ls
  402ce4:	2500      	movls	r5, #0
  402ce6:	f200 83ce 	bhi.w	403486 <_vfiprintf_r+0xd72>
  402cea:	f818 3b01 	ldrb.w	r3, [r8], #1
  402cee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402cf2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  402cf6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402cfa:	2a09      	cmp	r2, #9
  402cfc:	d9f5      	bls.n	402cea <_vfiprintf_r+0x5d6>
  402cfe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  402d02:	9201      	str	r2, [sp, #4]
  402d04:	e56f      	b.n	4027e6 <_vfiprintf_r+0xd2>
  402d06:	9a04      	ldr	r2, [sp, #16]
  402d08:	6814      	ldr	r4, [r2, #0]
  402d0a:	4613      	mov	r3, r2
  402d0c:	2c00      	cmp	r4, #0
  402d0e:	f103 0304 	add.w	r3, r3, #4
  402d12:	f6ff aded 	blt.w	4028f0 <_vfiprintf_r+0x1dc>
  402d16:	9304      	str	r3, [sp, #16]
  402d18:	f898 3000 	ldrb.w	r3, [r8]
  402d1c:	e561      	b.n	4027e2 <_vfiprintf_r+0xce>
  402d1e:	9406      	str	r4, [sp, #24]
  402d20:	2900      	cmp	r1, #0
  402d22:	d081      	beq.n	402c28 <_vfiprintf_r+0x514>
  402d24:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402d28:	e77e      	b.n	402c28 <_vfiprintf_r+0x514>
  402d2a:	9a04      	ldr	r2, [sp, #16]
  402d2c:	9406      	str	r4, [sp, #24]
  402d2e:	6817      	ldr	r7, [r2, #0]
  402d30:	f04f 0300 	mov.w	r3, #0
  402d34:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402d38:	1d14      	adds	r4, r2, #4
  402d3a:	9b01      	ldr	r3, [sp, #4]
  402d3c:	2f00      	cmp	r7, #0
  402d3e:	f000 8386 	beq.w	40344e <_vfiprintf_r+0xd3a>
  402d42:	2b00      	cmp	r3, #0
  402d44:	f2c0 835f 	blt.w	403406 <_vfiprintf_r+0xcf2>
  402d48:	461a      	mov	r2, r3
  402d4a:	2100      	movs	r1, #0
  402d4c:	4638      	mov	r0, r7
  402d4e:	f001 fc5f 	bl	404610 <memchr>
  402d52:	2800      	cmp	r0, #0
  402d54:	f000 838f 	beq.w	403476 <_vfiprintf_r+0xd62>
  402d58:	1bc3      	subs	r3, r0, r7
  402d5a:	9303      	str	r3, [sp, #12]
  402d5c:	2300      	movs	r3, #0
  402d5e:	9404      	str	r4, [sp, #16]
  402d60:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402d64:	9301      	str	r3, [sp, #4]
  402d66:	e5f5      	b.n	402954 <_vfiprintf_r+0x240>
  402d68:	9406      	str	r4, [sp, #24]
  402d6a:	2900      	cmp	r1, #0
  402d6c:	f040 83b9 	bne.w	4034e2 <_vfiprintf_r+0xdce>
  402d70:	f016 0920 	ands.w	r9, r6, #32
  402d74:	d135      	bne.n	402de2 <_vfiprintf_r+0x6ce>
  402d76:	f016 0310 	ands.w	r3, r6, #16
  402d7a:	d103      	bne.n	402d84 <_vfiprintf_r+0x670>
  402d7c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402d80:	f040 832a 	bne.w	4033d8 <_vfiprintf_r+0xcc4>
  402d84:	9a04      	ldr	r2, [sp, #16]
  402d86:	4613      	mov	r3, r2
  402d88:	6814      	ldr	r4, [r2, #0]
  402d8a:	9a01      	ldr	r2, [sp, #4]
  402d8c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402d90:	2a00      	cmp	r2, #0
  402d92:	f103 0304 	add.w	r3, r3, #4
  402d96:	f04f 0500 	mov.w	r5, #0
  402d9a:	f2c0 8332 	blt.w	403402 <_vfiprintf_r+0xcee>
  402d9e:	ea54 0205 	orrs.w	r2, r4, r5
  402da2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402da6:	9304      	str	r3, [sp, #16]
  402da8:	f47f af13 	bne.w	402bd2 <_vfiprintf_r+0x4be>
  402dac:	9b01      	ldr	r3, [sp, #4]
  402dae:	2b00      	cmp	r3, #0
  402db0:	f43f adcc 	beq.w	40294c <_vfiprintf_r+0x238>
  402db4:	2400      	movs	r4, #0
  402db6:	af2a      	add	r7, sp, #168	; 0xa8
  402db8:	3430      	adds	r4, #48	; 0x30
  402dba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  402dbe:	ebc7 030b 	rsb	r3, r7, fp
  402dc2:	9303      	str	r3, [sp, #12]
  402dc4:	e5c6      	b.n	402954 <_vfiprintf_r+0x240>
  402dc6:	f046 0620 	orr.w	r6, r6, #32
  402dca:	f898 3000 	ldrb.w	r3, [r8]
  402dce:	e508      	b.n	4027e2 <_vfiprintf_r+0xce>
  402dd0:	9406      	str	r4, [sp, #24]
  402dd2:	2900      	cmp	r1, #0
  402dd4:	f040 836e 	bne.w	4034b4 <_vfiprintf_r+0xda0>
  402dd8:	f046 0610 	orr.w	r6, r6, #16
  402ddc:	f016 0920 	ands.w	r9, r6, #32
  402de0:	d0c9      	beq.n	402d76 <_vfiprintf_r+0x662>
  402de2:	9b04      	ldr	r3, [sp, #16]
  402de4:	3307      	adds	r3, #7
  402de6:	f023 0307 	bic.w	r3, r3, #7
  402dea:	f04f 0200 	mov.w	r2, #0
  402dee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402df2:	e9d3 4500 	ldrd	r4, r5, [r3]
  402df6:	f103 0208 	add.w	r2, r3, #8
  402dfa:	9b01      	ldr	r3, [sp, #4]
  402dfc:	9204      	str	r2, [sp, #16]
  402dfe:	2b00      	cmp	r3, #0
  402e00:	f2c0 81f9 	blt.w	4031f6 <_vfiprintf_r+0xae2>
  402e04:	ea54 0305 	orrs.w	r3, r4, r5
  402e08:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402e0c:	f04f 0900 	mov.w	r9, #0
  402e10:	f47f aedf 	bne.w	402bd2 <_vfiprintf_r+0x4be>
  402e14:	e7ca      	b.n	402dac <_vfiprintf_r+0x698>
  402e16:	9406      	str	r4, [sp, #24]
  402e18:	2900      	cmp	r1, #0
  402e1a:	f040 8351 	bne.w	4034c0 <_vfiprintf_r+0xdac>
  402e1e:	06b2      	lsls	r2, r6, #26
  402e20:	48ae      	ldr	r0, [pc, #696]	; (4030dc <_vfiprintf_r+0x9c8>)
  402e22:	d541      	bpl.n	402ea8 <_vfiprintf_r+0x794>
  402e24:	9a04      	ldr	r2, [sp, #16]
  402e26:	3207      	adds	r2, #7
  402e28:	f022 0207 	bic.w	r2, r2, #7
  402e2c:	e9d2 4500 	ldrd	r4, r5, [r2]
  402e30:	f102 0108 	add.w	r1, r2, #8
  402e34:	9104      	str	r1, [sp, #16]
  402e36:	f016 0901 	ands.w	r9, r6, #1
  402e3a:	f000 8177 	beq.w	40312c <_vfiprintf_r+0xa18>
  402e3e:	ea54 0205 	orrs.w	r2, r4, r5
  402e42:	f040 8226 	bne.w	403292 <_vfiprintf_r+0xb7e>
  402e46:	f04f 0300 	mov.w	r3, #0
  402e4a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402e4e:	9b01      	ldr	r3, [sp, #4]
  402e50:	2b00      	cmp	r3, #0
  402e52:	f2c0 8196 	blt.w	403182 <_vfiprintf_r+0xa6e>
  402e56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402e5a:	e572      	b.n	402942 <_vfiprintf_r+0x22e>
  402e5c:	9a04      	ldr	r2, [sp, #16]
  402e5e:	9406      	str	r4, [sp, #24]
  402e60:	6813      	ldr	r3, [r2, #0]
  402e62:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402e66:	4613      	mov	r3, r2
  402e68:	f04f 0100 	mov.w	r1, #0
  402e6c:	2501      	movs	r5, #1
  402e6e:	3304      	adds	r3, #4
  402e70:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  402e74:	9304      	str	r3, [sp, #16]
  402e76:	9503      	str	r5, [sp, #12]
  402e78:	af10      	add	r7, sp, #64	; 0x40
  402e7a:	2300      	movs	r3, #0
  402e7c:	9301      	str	r3, [sp, #4]
  402e7e:	e573      	b.n	402968 <_vfiprintf_r+0x254>
  402e80:	f898 3000 	ldrb.w	r3, [r8]
  402e84:	2800      	cmp	r0, #0
  402e86:	f47f acac 	bne.w	4027e2 <_vfiprintf_r+0xce>
  402e8a:	2101      	movs	r1, #1
  402e8c:	2020      	movs	r0, #32
  402e8e:	e4a8      	b.n	4027e2 <_vfiprintf_r+0xce>
  402e90:	f046 0601 	orr.w	r6, r6, #1
  402e94:	f898 3000 	ldrb.w	r3, [r8]
  402e98:	e4a3      	b.n	4027e2 <_vfiprintf_r+0xce>
  402e9a:	9406      	str	r4, [sp, #24]
  402e9c:	2900      	cmp	r1, #0
  402e9e:	f040 830c 	bne.w	4034ba <_vfiprintf_r+0xda6>
  402ea2:	06b2      	lsls	r2, r6, #26
  402ea4:	488e      	ldr	r0, [pc, #568]	; (4030e0 <_vfiprintf_r+0x9cc>)
  402ea6:	d4bd      	bmi.n	402e24 <_vfiprintf_r+0x710>
  402ea8:	9904      	ldr	r1, [sp, #16]
  402eaa:	06f7      	lsls	r7, r6, #27
  402eac:	460a      	mov	r2, r1
  402eae:	f100 819d 	bmi.w	4031ec <_vfiprintf_r+0xad8>
  402eb2:	0675      	lsls	r5, r6, #25
  402eb4:	f140 819a 	bpl.w	4031ec <_vfiprintf_r+0xad8>
  402eb8:	3204      	adds	r2, #4
  402eba:	880c      	ldrh	r4, [r1, #0]
  402ebc:	9204      	str	r2, [sp, #16]
  402ebe:	2500      	movs	r5, #0
  402ec0:	e7b9      	b.n	402e36 <_vfiprintf_r+0x722>
  402ec2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402ec6:	f898 3000 	ldrb.w	r3, [r8]
  402eca:	e48a      	b.n	4027e2 <_vfiprintf_r+0xce>
  402ecc:	f898 3000 	ldrb.w	r3, [r8]
  402ed0:	2b6c      	cmp	r3, #108	; 0x6c
  402ed2:	bf03      	ittte	eq
  402ed4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  402ed8:	f046 0620 	orreq.w	r6, r6, #32
  402edc:	f108 0801 	addeq.w	r8, r8, #1
  402ee0:	f046 0610 	orrne.w	r6, r6, #16
  402ee4:	e47d      	b.n	4027e2 <_vfiprintf_r+0xce>
  402ee6:	2900      	cmp	r1, #0
  402ee8:	f040 8309 	bne.w	4034fe <_vfiprintf_r+0xdea>
  402eec:	06b4      	lsls	r4, r6, #26
  402eee:	f140 821c 	bpl.w	40332a <_vfiprintf_r+0xc16>
  402ef2:	9a04      	ldr	r2, [sp, #16]
  402ef4:	9902      	ldr	r1, [sp, #8]
  402ef6:	6813      	ldr	r3, [r2, #0]
  402ef8:	17cd      	asrs	r5, r1, #31
  402efa:	4608      	mov	r0, r1
  402efc:	3204      	adds	r2, #4
  402efe:	4629      	mov	r1, r5
  402f00:	9204      	str	r2, [sp, #16]
  402f02:	e9c3 0100 	strd	r0, r1, [r3]
  402f06:	e436      	b.n	402776 <_vfiprintf_r+0x62>
  402f08:	9406      	str	r4, [sp, #24]
  402f0a:	2900      	cmp	r1, #0
  402f0c:	f43f ae43 	beq.w	402b96 <_vfiprintf_r+0x482>
  402f10:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402f14:	e63f      	b.n	402b96 <_vfiprintf_r+0x482>
  402f16:	9406      	str	r4, [sp, #24]
  402f18:	2900      	cmp	r1, #0
  402f1a:	f040 82ed 	bne.w	4034f8 <_vfiprintf_r+0xde4>
  402f1e:	2b00      	cmp	r3, #0
  402f20:	f000 808f 	beq.w	403042 <_vfiprintf_r+0x92e>
  402f24:	2501      	movs	r5, #1
  402f26:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402f2a:	f04f 0300 	mov.w	r3, #0
  402f2e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402f32:	9503      	str	r5, [sp, #12]
  402f34:	af10      	add	r7, sp, #64	; 0x40
  402f36:	e7a0      	b.n	402e7a <_vfiprintf_r+0x766>
  402f38:	9304      	str	r3, [sp, #16]
  402f3a:	f04f 0900 	mov.w	r9, #0
  402f3e:	e696      	b.n	402c6e <_vfiprintf_r+0x55a>
  402f40:	aa0d      	add	r2, sp, #52	; 0x34
  402f42:	9900      	ldr	r1, [sp, #0]
  402f44:	9309      	str	r3, [sp, #36]	; 0x24
  402f46:	4648      	mov	r0, r9
  402f48:	f7ff fba8 	bl	40269c <__sprint_r.part.0>
  402f4c:	2800      	cmp	r0, #0
  402f4e:	d17f      	bne.n	403050 <_vfiprintf_r+0x93c>
  402f50:	980e      	ldr	r0, [sp, #56]	; 0x38
  402f52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402f56:	f100 0e01 	add.w	lr, r0, #1
  402f5a:	46dc      	mov	ip, fp
  402f5c:	e529      	b.n	4029b2 <_vfiprintf_r+0x29e>
  402f5e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f62:	f100 0e01 	add.w	lr, r0, #1
  402f66:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402f6a:	2b00      	cmp	r3, #0
  402f6c:	f43f ad50 	beq.w	402a10 <_vfiprintf_r+0x2fc>
  402f70:	3201      	adds	r2, #1
  402f72:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402f76:	2301      	movs	r3, #1
  402f78:	f1be 0f07 	cmp.w	lr, #7
  402f7c:	920f      	str	r2, [sp, #60]	; 0x3c
  402f7e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402f82:	e88a 000a 	stmia.w	sl, {r1, r3}
  402f86:	f340 80bf 	ble.w	403108 <_vfiprintf_r+0x9f4>
  402f8a:	2a00      	cmp	r2, #0
  402f8c:	f040 814e 	bne.w	40322c <_vfiprintf_r+0xb18>
  402f90:	9907      	ldr	r1, [sp, #28]
  402f92:	2900      	cmp	r1, #0
  402f94:	f040 80be 	bne.w	403114 <_vfiprintf_r+0xa00>
  402f98:	469e      	mov	lr, r3
  402f9a:	4610      	mov	r0, r2
  402f9c:	46da      	mov	sl, fp
  402f9e:	9b08      	ldr	r3, [sp, #32]
  402fa0:	2b80      	cmp	r3, #128	; 0x80
  402fa2:	f43f ad50 	beq.w	402a46 <_vfiprintf_r+0x332>
  402fa6:	9b01      	ldr	r3, [sp, #4]
  402fa8:	9903      	ldr	r1, [sp, #12]
  402faa:	1a5c      	subs	r4, r3, r1
  402fac:	2c00      	cmp	r4, #0
  402fae:	f77f ad93 	ble.w	402ad8 <_vfiprintf_r+0x3c4>
  402fb2:	2c10      	cmp	r4, #16
  402fb4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4030e4 <_vfiprintf_r+0x9d0>
  402fb8:	dd25      	ble.n	403006 <_vfiprintf_r+0x8f2>
  402fba:	46d4      	mov	ip, sl
  402fbc:	2310      	movs	r3, #16
  402fbe:	46c2      	mov	sl, r8
  402fc0:	46a8      	mov	r8, r5
  402fc2:	464d      	mov	r5, r9
  402fc4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402fc8:	e007      	b.n	402fda <_vfiprintf_r+0x8c6>
  402fca:	f100 0e02 	add.w	lr, r0, #2
  402fce:	f10c 0c08 	add.w	ip, ip, #8
  402fd2:	4608      	mov	r0, r1
  402fd4:	3c10      	subs	r4, #16
  402fd6:	2c10      	cmp	r4, #16
  402fd8:	dd11      	ble.n	402ffe <_vfiprintf_r+0x8ea>
  402fda:	1c41      	adds	r1, r0, #1
  402fdc:	3210      	adds	r2, #16
  402fde:	2907      	cmp	r1, #7
  402fe0:	920f      	str	r2, [sp, #60]	; 0x3c
  402fe2:	f8cc 5000 	str.w	r5, [ip]
  402fe6:	f8cc 3004 	str.w	r3, [ip, #4]
  402fea:	910e      	str	r1, [sp, #56]	; 0x38
  402fec:	dded      	ble.n	402fca <_vfiprintf_r+0x8b6>
  402fee:	b9d2      	cbnz	r2, 403026 <_vfiprintf_r+0x912>
  402ff0:	3c10      	subs	r4, #16
  402ff2:	2c10      	cmp	r4, #16
  402ff4:	f04f 0e01 	mov.w	lr, #1
  402ff8:	4610      	mov	r0, r2
  402ffa:	46dc      	mov	ip, fp
  402ffc:	dced      	bgt.n	402fda <_vfiprintf_r+0x8c6>
  402ffe:	46a9      	mov	r9, r5
  403000:	4645      	mov	r5, r8
  403002:	46d0      	mov	r8, sl
  403004:	46e2      	mov	sl, ip
  403006:	4422      	add	r2, r4
  403008:	f1be 0f07 	cmp.w	lr, #7
  40300c:	920f      	str	r2, [sp, #60]	; 0x3c
  40300e:	f8ca 9000 	str.w	r9, [sl]
  403012:	f8ca 4004 	str.w	r4, [sl, #4]
  403016:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40301a:	dc2e      	bgt.n	40307a <_vfiprintf_r+0x966>
  40301c:	f10a 0a08 	add.w	sl, sl, #8
  403020:	f10e 0e01 	add.w	lr, lr, #1
  403024:	e558      	b.n	402ad8 <_vfiprintf_r+0x3c4>
  403026:	aa0d      	add	r2, sp, #52	; 0x34
  403028:	9900      	ldr	r1, [sp, #0]
  40302a:	9301      	str	r3, [sp, #4]
  40302c:	4648      	mov	r0, r9
  40302e:	f7ff fb35 	bl	40269c <__sprint_r.part.0>
  403032:	b968      	cbnz	r0, 403050 <_vfiprintf_r+0x93c>
  403034:	980e      	ldr	r0, [sp, #56]	; 0x38
  403036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403038:	9b01      	ldr	r3, [sp, #4]
  40303a:	f100 0e01 	add.w	lr, r0, #1
  40303e:	46dc      	mov	ip, fp
  403040:	e7c8      	b.n	402fd4 <_vfiprintf_r+0x8c0>
  403042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403044:	b123      	cbz	r3, 403050 <_vfiprintf_r+0x93c>
  403046:	9805      	ldr	r0, [sp, #20]
  403048:	9900      	ldr	r1, [sp, #0]
  40304a:	aa0d      	add	r2, sp, #52	; 0x34
  40304c:	f7ff fb26 	bl	40269c <__sprint_r.part.0>
  403050:	9b00      	ldr	r3, [sp, #0]
  403052:	899b      	ldrh	r3, [r3, #12]
  403054:	065a      	lsls	r2, r3, #25
  403056:	f100 818b 	bmi.w	403370 <_vfiprintf_r+0xc5c>
  40305a:	9802      	ldr	r0, [sp, #8]
  40305c:	b02b      	add	sp, #172	; 0xac
  40305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403062:	aa0d      	add	r2, sp, #52	; 0x34
  403064:	9900      	ldr	r1, [sp, #0]
  403066:	4648      	mov	r0, r9
  403068:	f7ff fb18 	bl	40269c <__sprint_r.part.0>
  40306c:	2800      	cmp	r0, #0
  40306e:	d1ef      	bne.n	403050 <_vfiprintf_r+0x93c>
  403070:	990e      	ldr	r1, [sp, #56]	; 0x38
  403072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403074:	1c48      	adds	r0, r1, #1
  403076:	46da      	mov	sl, fp
  403078:	e555      	b.n	402b26 <_vfiprintf_r+0x412>
  40307a:	2a00      	cmp	r2, #0
  40307c:	f040 80fb 	bne.w	403276 <_vfiprintf_r+0xb62>
  403080:	9a03      	ldr	r2, [sp, #12]
  403082:	921b      	str	r2, [sp, #108]	; 0x6c
  403084:	2301      	movs	r3, #1
  403086:	920f      	str	r2, [sp, #60]	; 0x3c
  403088:	971a      	str	r7, [sp, #104]	; 0x68
  40308a:	930e      	str	r3, [sp, #56]	; 0x38
  40308c:	46da      	mov	sl, fp
  40308e:	f10a 0a08 	add.w	sl, sl, #8
  403092:	0771      	lsls	r1, r6, #29
  403094:	d504      	bpl.n	4030a0 <_vfiprintf_r+0x98c>
  403096:	9b06      	ldr	r3, [sp, #24]
  403098:	1b5c      	subs	r4, r3, r5
  40309a:	2c00      	cmp	r4, #0
  40309c:	f73f ad34 	bgt.w	402b08 <_vfiprintf_r+0x3f4>
  4030a0:	9b02      	ldr	r3, [sp, #8]
  4030a2:	9906      	ldr	r1, [sp, #24]
  4030a4:	42a9      	cmp	r1, r5
  4030a6:	bfac      	ite	ge
  4030a8:	185b      	addge	r3, r3, r1
  4030aa:	195b      	addlt	r3, r3, r5
  4030ac:	9302      	str	r3, [sp, #8]
  4030ae:	2a00      	cmp	r2, #0
  4030b0:	f040 80b3 	bne.w	40321a <_vfiprintf_r+0xb06>
  4030b4:	2300      	movs	r3, #0
  4030b6:	930e      	str	r3, [sp, #56]	; 0x38
  4030b8:	46da      	mov	sl, fp
  4030ba:	f7ff bb5c 	b.w	402776 <_vfiprintf_r+0x62>
  4030be:	aa0d      	add	r2, sp, #52	; 0x34
  4030c0:	9900      	ldr	r1, [sp, #0]
  4030c2:	9307      	str	r3, [sp, #28]
  4030c4:	4648      	mov	r0, r9
  4030c6:	f7ff fae9 	bl	40269c <__sprint_r.part.0>
  4030ca:	2800      	cmp	r0, #0
  4030cc:	d1c0      	bne.n	403050 <_vfiprintf_r+0x93c>
  4030ce:	980e      	ldr	r0, [sp, #56]	; 0x38
  4030d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4030d2:	9b07      	ldr	r3, [sp, #28]
  4030d4:	f100 0c01 	add.w	ip, r0, #1
  4030d8:	46de      	mov	lr, fp
  4030da:	e4cb      	b.n	402a74 <_vfiprintf_r+0x360>
  4030dc:	004054d0 	.word	0x004054d0
  4030e0:	004054e4 	.word	0x004054e4
  4030e4:	004054c0 	.word	0x004054c0
  4030e8:	2a00      	cmp	r2, #0
  4030ea:	f040 8133 	bne.w	403354 <_vfiprintf_r+0xc40>
  4030ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	f000 80f5 	beq.w	4032e2 <_vfiprintf_r+0xbce>
  4030f8:	2301      	movs	r3, #1
  4030fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4030fe:	461a      	mov	r2, r3
  403100:	931b      	str	r3, [sp, #108]	; 0x6c
  403102:	469e      	mov	lr, r3
  403104:	911a      	str	r1, [sp, #104]	; 0x68
  403106:	46da      	mov	sl, fp
  403108:	4670      	mov	r0, lr
  40310a:	f10a 0a08 	add.w	sl, sl, #8
  40310e:	f10e 0e01 	add.w	lr, lr, #1
  403112:	e47d      	b.n	402a10 <_vfiprintf_r+0x2fc>
  403114:	a90c      	add	r1, sp, #48	; 0x30
  403116:	2202      	movs	r2, #2
  403118:	469e      	mov	lr, r3
  40311a:	911a      	str	r1, [sp, #104]	; 0x68
  40311c:	921b      	str	r2, [sp, #108]	; 0x6c
  40311e:	46da      	mov	sl, fp
  403120:	4670      	mov	r0, lr
  403122:	f10a 0a08 	add.w	sl, sl, #8
  403126:	f10e 0e01 	add.w	lr, lr, #1
  40312a:	e738      	b.n	402f9e <_vfiprintf_r+0x88a>
  40312c:	9b01      	ldr	r3, [sp, #4]
  40312e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  403132:	2b00      	cmp	r3, #0
  403134:	f2c0 812a 	blt.w	40338c <_vfiprintf_r+0xc78>
  403138:	ea54 0305 	orrs.w	r3, r4, r5
  40313c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403140:	f43f abff 	beq.w	402942 <_vfiprintf_r+0x22e>
  403144:	465f      	mov	r7, fp
  403146:	0923      	lsrs	r3, r4, #4
  403148:	f004 010f 	and.w	r1, r4, #15
  40314c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403150:	092a      	lsrs	r2, r5, #4
  403152:	461c      	mov	r4, r3
  403154:	4615      	mov	r5, r2
  403156:	5c43      	ldrb	r3, [r0, r1]
  403158:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40315c:	ea54 0305 	orrs.w	r3, r4, r5
  403160:	d1f1      	bne.n	403146 <_vfiprintf_r+0xa32>
  403162:	ebc7 030b 	rsb	r3, r7, fp
  403166:	9303      	str	r3, [sp, #12]
  403168:	f7ff bbf4 	b.w	402954 <_vfiprintf_r+0x240>
  40316c:	aa0d      	add	r2, sp, #52	; 0x34
  40316e:	9900      	ldr	r1, [sp, #0]
  403170:	9805      	ldr	r0, [sp, #20]
  403172:	f7ff fa93 	bl	40269c <__sprint_r.part.0>
  403176:	2800      	cmp	r0, #0
  403178:	f47f af6a 	bne.w	403050 <_vfiprintf_r+0x93c>
  40317c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40317e:	46da      	mov	sl, fp
  403180:	e787      	b.n	403092 <_vfiprintf_r+0x97e>
  403182:	f04f 0900 	mov.w	r9, #0
  403186:	2400      	movs	r4, #0
  403188:	2500      	movs	r5, #0
  40318a:	e7db      	b.n	403144 <_vfiprintf_r+0xa30>
  40318c:	f016 0210 	ands.w	r2, r6, #16
  403190:	f000 80b2 	beq.w	4032f8 <_vfiprintf_r+0xbe4>
  403194:	9904      	ldr	r1, [sp, #16]
  403196:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40319a:	460a      	mov	r2, r1
  40319c:	680c      	ldr	r4, [r1, #0]
  40319e:	9901      	ldr	r1, [sp, #4]
  4031a0:	2900      	cmp	r1, #0
  4031a2:	f102 0204 	add.w	r2, r2, #4
  4031a6:	f04f 0500 	mov.w	r5, #0
  4031aa:	f2c0 8159 	blt.w	403460 <_vfiprintf_r+0xd4c>
  4031ae:	ea54 0105 	orrs.w	r1, r4, r5
  4031b2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4031b6:	9204      	str	r2, [sp, #16]
  4031b8:	f43f ad51 	beq.w	402c5e <_vfiprintf_r+0x54a>
  4031bc:	4699      	mov	r9, r3
  4031be:	e556      	b.n	402c6e <_vfiprintf_r+0x55a>
  4031c0:	06f7      	lsls	r7, r6, #27
  4031c2:	d40a      	bmi.n	4031da <_vfiprintf_r+0xac6>
  4031c4:	0675      	lsls	r5, r6, #25
  4031c6:	d508      	bpl.n	4031da <_vfiprintf_r+0xac6>
  4031c8:	9904      	ldr	r1, [sp, #16]
  4031ca:	f9b1 4000 	ldrsh.w	r4, [r1]
  4031ce:	3104      	adds	r1, #4
  4031d0:	17e5      	asrs	r5, r4, #31
  4031d2:	4622      	mov	r2, r4
  4031d4:	462b      	mov	r3, r5
  4031d6:	9104      	str	r1, [sp, #16]
  4031d8:	e4ea      	b.n	402bb0 <_vfiprintf_r+0x49c>
  4031da:	9a04      	ldr	r2, [sp, #16]
  4031dc:	6814      	ldr	r4, [r2, #0]
  4031de:	4613      	mov	r3, r2
  4031e0:	3304      	adds	r3, #4
  4031e2:	17e5      	asrs	r5, r4, #31
  4031e4:	9304      	str	r3, [sp, #16]
  4031e6:	4622      	mov	r2, r4
  4031e8:	462b      	mov	r3, r5
  4031ea:	e4e1      	b.n	402bb0 <_vfiprintf_r+0x49c>
  4031ec:	6814      	ldr	r4, [r2, #0]
  4031ee:	3204      	adds	r2, #4
  4031f0:	9204      	str	r2, [sp, #16]
  4031f2:	2500      	movs	r5, #0
  4031f4:	e61f      	b.n	402e36 <_vfiprintf_r+0x722>
  4031f6:	f04f 0900 	mov.w	r9, #0
  4031fa:	ea54 0305 	orrs.w	r3, r4, r5
  4031fe:	f47f ace8 	bne.w	402bd2 <_vfiprintf_r+0x4be>
  403202:	e5d8      	b.n	402db6 <_vfiprintf_r+0x6a2>
  403204:	aa0d      	add	r2, sp, #52	; 0x34
  403206:	9900      	ldr	r1, [sp, #0]
  403208:	9805      	ldr	r0, [sp, #20]
  40320a:	f7ff fa47 	bl	40269c <__sprint_r.part.0>
  40320e:	2800      	cmp	r0, #0
  403210:	f47f af1e 	bne.w	403050 <_vfiprintf_r+0x93c>
  403214:	46da      	mov	sl, fp
  403216:	f7ff bb48 	b.w	4028aa <_vfiprintf_r+0x196>
  40321a:	aa0d      	add	r2, sp, #52	; 0x34
  40321c:	9900      	ldr	r1, [sp, #0]
  40321e:	9805      	ldr	r0, [sp, #20]
  403220:	f7ff fa3c 	bl	40269c <__sprint_r.part.0>
  403224:	2800      	cmp	r0, #0
  403226:	f43f af45 	beq.w	4030b4 <_vfiprintf_r+0x9a0>
  40322a:	e711      	b.n	403050 <_vfiprintf_r+0x93c>
  40322c:	aa0d      	add	r2, sp, #52	; 0x34
  40322e:	9900      	ldr	r1, [sp, #0]
  403230:	9805      	ldr	r0, [sp, #20]
  403232:	f7ff fa33 	bl	40269c <__sprint_r.part.0>
  403236:	2800      	cmp	r0, #0
  403238:	f47f af0a 	bne.w	403050 <_vfiprintf_r+0x93c>
  40323c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40323e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403240:	f100 0e01 	add.w	lr, r0, #1
  403244:	46da      	mov	sl, fp
  403246:	f7ff bbe3 	b.w	402a10 <_vfiprintf_r+0x2fc>
  40324a:	aa0d      	add	r2, sp, #52	; 0x34
  40324c:	9900      	ldr	r1, [sp, #0]
  40324e:	9805      	ldr	r0, [sp, #20]
  403250:	f7ff fa24 	bl	40269c <__sprint_r.part.0>
  403254:	2800      	cmp	r0, #0
  403256:	f47f aefb 	bne.w	403050 <_vfiprintf_r+0x93c>
  40325a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40325c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40325e:	f100 0e01 	add.w	lr, r0, #1
  403262:	46da      	mov	sl, fp
  403264:	e69b      	b.n	402f9e <_vfiprintf_r+0x88a>
  403266:	2a00      	cmp	r2, #0
  403268:	f040 80d8 	bne.w	40341c <_vfiprintf_r+0xd08>
  40326c:	f04f 0e01 	mov.w	lr, #1
  403270:	4610      	mov	r0, r2
  403272:	46da      	mov	sl, fp
  403274:	e697      	b.n	402fa6 <_vfiprintf_r+0x892>
  403276:	aa0d      	add	r2, sp, #52	; 0x34
  403278:	9900      	ldr	r1, [sp, #0]
  40327a:	9805      	ldr	r0, [sp, #20]
  40327c:	f7ff fa0e 	bl	40269c <__sprint_r.part.0>
  403280:	2800      	cmp	r0, #0
  403282:	f47f aee5 	bne.w	403050 <_vfiprintf_r+0x93c>
  403286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40328a:	f103 0e01 	add.w	lr, r3, #1
  40328e:	46da      	mov	sl, fp
  403290:	e422      	b.n	402ad8 <_vfiprintf_r+0x3c4>
  403292:	2230      	movs	r2, #48	; 0x30
  403294:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  403298:	9a01      	ldr	r2, [sp, #4]
  40329a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40329e:	2a00      	cmp	r2, #0
  4032a0:	f04f 0300 	mov.w	r3, #0
  4032a4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4032a8:	f046 0302 	orr.w	r3, r6, #2
  4032ac:	f2c0 80cb 	blt.w	403446 <_vfiprintf_r+0xd32>
  4032b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4032b4:	f046 0602 	orr.w	r6, r6, #2
  4032b8:	f04f 0900 	mov.w	r9, #0
  4032bc:	e742      	b.n	403144 <_vfiprintf_r+0xa30>
  4032be:	f04f 0900 	mov.w	r9, #0
  4032c2:	4890      	ldr	r0, [pc, #576]	; (403504 <_vfiprintf_r+0xdf0>)
  4032c4:	e73e      	b.n	403144 <_vfiprintf_r+0xa30>
  4032c6:	9b01      	ldr	r3, [sp, #4]
  4032c8:	4264      	negs	r4, r4
  4032ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4032ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4032d2:	2b00      	cmp	r3, #0
  4032d4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4032d8:	f6ff ac7b 	blt.w	402bd2 <_vfiprintf_r+0x4be>
  4032dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4032e0:	e477      	b.n	402bd2 <_vfiprintf_r+0x4be>
  4032e2:	9b07      	ldr	r3, [sp, #28]
  4032e4:	2b00      	cmp	r3, #0
  4032e6:	d072      	beq.n	4033ce <_vfiprintf_r+0xcba>
  4032e8:	ab0c      	add	r3, sp, #48	; 0x30
  4032ea:	2202      	movs	r2, #2
  4032ec:	931a      	str	r3, [sp, #104]	; 0x68
  4032ee:	921b      	str	r2, [sp, #108]	; 0x6c
  4032f0:	f04f 0e01 	mov.w	lr, #1
  4032f4:	46da      	mov	sl, fp
  4032f6:	e713      	b.n	403120 <_vfiprintf_r+0xa0c>
  4032f8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4032fc:	d048      	beq.n	403390 <_vfiprintf_r+0xc7c>
  4032fe:	9904      	ldr	r1, [sp, #16]
  403300:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  403304:	460b      	mov	r3, r1
  403306:	880c      	ldrh	r4, [r1, #0]
  403308:	9901      	ldr	r1, [sp, #4]
  40330a:	2900      	cmp	r1, #0
  40330c:	f103 0304 	add.w	r3, r3, #4
  403310:	f04f 0500 	mov.w	r5, #0
  403314:	f6ff ae10 	blt.w	402f38 <_vfiprintf_r+0x824>
  403318:	ea54 0105 	orrs.w	r1, r4, r5
  40331c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403320:	9304      	str	r3, [sp, #16]
  403322:	f43f ac9c 	beq.w	402c5e <_vfiprintf_r+0x54a>
  403326:	4691      	mov	r9, r2
  403328:	e4a1      	b.n	402c6e <_vfiprintf_r+0x55a>
  40332a:	06f0      	lsls	r0, r6, #27
  40332c:	d40a      	bmi.n	403344 <_vfiprintf_r+0xc30>
  40332e:	0671      	lsls	r1, r6, #25
  403330:	d508      	bpl.n	403344 <_vfiprintf_r+0xc30>
  403332:	9a04      	ldr	r2, [sp, #16]
  403334:	6813      	ldr	r3, [r2, #0]
  403336:	3204      	adds	r2, #4
  403338:	9204      	str	r2, [sp, #16]
  40333a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40333e:	801a      	strh	r2, [r3, #0]
  403340:	f7ff ba19 	b.w	402776 <_vfiprintf_r+0x62>
  403344:	9a04      	ldr	r2, [sp, #16]
  403346:	6813      	ldr	r3, [r2, #0]
  403348:	3204      	adds	r2, #4
  40334a:	9204      	str	r2, [sp, #16]
  40334c:	9a02      	ldr	r2, [sp, #8]
  40334e:	601a      	str	r2, [r3, #0]
  403350:	f7ff ba11 	b.w	402776 <_vfiprintf_r+0x62>
  403354:	aa0d      	add	r2, sp, #52	; 0x34
  403356:	9900      	ldr	r1, [sp, #0]
  403358:	9805      	ldr	r0, [sp, #20]
  40335a:	f7ff f99f 	bl	40269c <__sprint_r.part.0>
  40335e:	2800      	cmp	r0, #0
  403360:	f47f ae76 	bne.w	403050 <_vfiprintf_r+0x93c>
  403364:	980e      	ldr	r0, [sp, #56]	; 0x38
  403366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403368:	f100 0e01 	add.w	lr, r0, #1
  40336c:	46da      	mov	sl, fp
  40336e:	e5fa      	b.n	402f66 <_vfiprintf_r+0x852>
  403370:	f04f 30ff 	mov.w	r0, #4294967295
  403374:	f7ff bab6 	b.w	4028e4 <_vfiprintf_r+0x1d0>
  403378:	4862      	ldr	r0, [pc, #392]	; (403504 <_vfiprintf_r+0xdf0>)
  40337a:	4616      	mov	r6, r2
  40337c:	ea54 0205 	orrs.w	r2, r4, r5
  403380:	9304      	str	r3, [sp, #16]
  403382:	f04f 0900 	mov.w	r9, #0
  403386:	f47f aedd 	bne.w	403144 <_vfiprintf_r+0xa30>
  40338a:	e6fc      	b.n	403186 <_vfiprintf_r+0xa72>
  40338c:	9b04      	ldr	r3, [sp, #16]
  40338e:	e7f5      	b.n	40337c <_vfiprintf_r+0xc68>
  403390:	9a04      	ldr	r2, [sp, #16]
  403392:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  403396:	4613      	mov	r3, r2
  403398:	6814      	ldr	r4, [r2, #0]
  40339a:	9a01      	ldr	r2, [sp, #4]
  40339c:	2a00      	cmp	r2, #0
  40339e:	f103 0304 	add.w	r3, r3, #4
  4033a2:	f04f 0500 	mov.w	r5, #0
  4033a6:	f6ff adc7 	blt.w	402f38 <_vfiprintf_r+0x824>
  4033aa:	ea54 0205 	orrs.w	r2, r4, r5
  4033ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4033b2:	9304      	str	r3, [sp, #16]
  4033b4:	f47f ac5b 	bne.w	402c6e <_vfiprintf_r+0x55a>
  4033b8:	e451      	b.n	402c5e <_vfiprintf_r+0x54a>
  4033ba:	aa0d      	add	r2, sp, #52	; 0x34
  4033bc:	9900      	ldr	r1, [sp, #0]
  4033be:	9805      	ldr	r0, [sp, #20]
  4033c0:	f7ff f96c 	bl	40269c <__sprint_r.part.0>
  4033c4:	2800      	cmp	r0, #0
  4033c6:	f47f ae43 	bne.w	403050 <_vfiprintf_r+0x93c>
  4033ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4033cc:	e668      	b.n	4030a0 <_vfiprintf_r+0x98c>
  4033ce:	4610      	mov	r0, r2
  4033d0:	f04f 0e01 	mov.w	lr, #1
  4033d4:	46da      	mov	sl, fp
  4033d6:	e5e6      	b.n	402fa6 <_vfiprintf_r+0x892>
  4033d8:	9904      	ldr	r1, [sp, #16]
  4033da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4033de:	460a      	mov	r2, r1
  4033e0:	880c      	ldrh	r4, [r1, #0]
  4033e2:	9901      	ldr	r1, [sp, #4]
  4033e4:	2900      	cmp	r1, #0
  4033e6:	f102 0204 	add.w	r2, r2, #4
  4033ea:	f04f 0500 	mov.w	r5, #0
  4033ee:	db4e      	blt.n	40348e <_vfiprintf_r+0xd7a>
  4033f0:	ea54 0105 	orrs.w	r1, r4, r5
  4033f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4033f8:	9204      	str	r2, [sp, #16]
  4033fa:	4699      	mov	r9, r3
  4033fc:	f47f abe9 	bne.w	402bd2 <_vfiprintf_r+0x4be>
  403400:	e4d4      	b.n	402dac <_vfiprintf_r+0x698>
  403402:	9304      	str	r3, [sp, #16]
  403404:	e6f9      	b.n	4031fa <_vfiprintf_r+0xae6>
  403406:	4638      	mov	r0, r7
  403408:	9404      	str	r4, [sp, #16]
  40340a:	f7ff f8d9 	bl	4025c0 <strlen>
  40340e:	2300      	movs	r3, #0
  403410:	9003      	str	r0, [sp, #12]
  403412:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403416:	9301      	str	r3, [sp, #4]
  403418:	f7ff ba9c 	b.w	402954 <_vfiprintf_r+0x240>
  40341c:	aa0d      	add	r2, sp, #52	; 0x34
  40341e:	9900      	ldr	r1, [sp, #0]
  403420:	9805      	ldr	r0, [sp, #20]
  403422:	f7ff f93b 	bl	40269c <__sprint_r.part.0>
  403426:	2800      	cmp	r0, #0
  403428:	f47f ae12 	bne.w	403050 <_vfiprintf_r+0x93c>
  40342c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40342e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403430:	f100 0e01 	add.w	lr, r0, #1
  403434:	46da      	mov	sl, fp
  403436:	e5b6      	b.n	402fa6 <_vfiprintf_r+0x892>
  403438:	980e      	ldr	r0, [sp, #56]	; 0x38
  40343a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40343c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40350c <_vfiprintf_r+0xdf8>
  403440:	3001      	adds	r0, #1
  403442:	f7ff bad2 	b.w	4029ea <_vfiprintf_r+0x2d6>
  403446:	461e      	mov	r6, r3
  403448:	f04f 0900 	mov.w	r9, #0
  40344c:	e67a      	b.n	403144 <_vfiprintf_r+0xa30>
  40344e:	2b06      	cmp	r3, #6
  403450:	bf28      	it	cs
  403452:	2306      	movcs	r3, #6
  403454:	9303      	str	r3, [sp, #12]
  403456:	9404      	str	r4, [sp, #16]
  403458:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40345c:	4f2a      	ldr	r7, [pc, #168]	; (403508 <_vfiprintf_r+0xdf4>)
  40345e:	e50c      	b.n	402e7a <_vfiprintf_r+0x766>
  403460:	9204      	str	r2, [sp, #16]
  403462:	e56a      	b.n	402f3a <_vfiprintf_r+0x826>
  403464:	980e      	ldr	r0, [sp, #56]	; 0x38
  403466:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40350c <_vfiprintf_r+0xdf8>
  40346a:	3001      	adds	r0, #1
  40346c:	f7ff bb73 	b.w	402b56 <_vfiprintf_r+0x442>
  403470:	46f4      	mov	ip, lr
  403472:	f7ff bb1a 	b.w	402aaa <_vfiprintf_r+0x396>
  403476:	9b01      	ldr	r3, [sp, #4]
  403478:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40347c:	9303      	str	r3, [sp, #12]
  40347e:	9404      	str	r4, [sp, #16]
  403480:	9001      	str	r0, [sp, #4]
  403482:	f7ff ba67 	b.w	402954 <_vfiprintf_r+0x240>
  403486:	2200      	movs	r2, #0
  403488:	9201      	str	r2, [sp, #4]
  40348a:	f7ff b9ac 	b.w	4027e6 <_vfiprintf_r+0xd2>
  40348e:	9204      	str	r2, [sp, #16]
  403490:	4699      	mov	r9, r3
  403492:	e6b2      	b.n	4031fa <_vfiprintf_r+0xae6>
  403494:	9a04      	ldr	r2, [sp, #16]
  403496:	6813      	ldr	r3, [r2, #0]
  403498:	9301      	str	r3, [sp, #4]
  40349a:	3204      	adds	r2, #4
  40349c:	2b00      	cmp	r3, #0
  40349e:	9204      	str	r2, [sp, #16]
  4034a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4034a4:	46a8      	mov	r8, r5
  4034a6:	f6bf a99c 	bge.w	4027e2 <_vfiprintf_r+0xce>
  4034aa:	f04f 32ff 	mov.w	r2, #4294967295
  4034ae:	9201      	str	r2, [sp, #4]
  4034b0:	f7ff b997 	b.w	4027e2 <_vfiprintf_r+0xce>
  4034b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034b8:	e48e      	b.n	402dd8 <_vfiprintf_r+0x6c4>
  4034ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034be:	e4f0      	b.n	402ea2 <_vfiprintf_r+0x78e>
  4034c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034c4:	e4ab      	b.n	402e1e <_vfiprintf_r+0x70a>
  4034c6:	4699      	mov	r9, r3
  4034c8:	07f3      	lsls	r3, r6, #31
  4034ca:	d505      	bpl.n	4034d8 <_vfiprintf_r+0xdc4>
  4034cc:	af2a      	add	r7, sp, #168	; 0xa8
  4034ce:	2330      	movs	r3, #48	; 0x30
  4034d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4034d4:	f7ff bb97 	b.w	402c06 <_vfiprintf_r+0x4f2>
  4034d8:	9b01      	ldr	r3, [sp, #4]
  4034da:	9303      	str	r3, [sp, #12]
  4034dc:	465f      	mov	r7, fp
  4034de:	f7ff ba39 	b.w	402954 <_vfiprintf_r+0x240>
  4034e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034e6:	e443      	b.n	402d70 <_vfiprintf_r+0x65c>
  4034e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034ec:	f7ff bb9a 	b.w	402c24 <_vfiprintf_r+0x510>
  4034f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034f4:	f7ff bb4d 	b.w	402b92 <_vfiprintf_r+0x47e>
  4034f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4034fc:	e50f      	b.n	402f1e <_vfiprintf_r+0x80a>
  4034fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403502:	e4f3      	b.n	402eec <_vfiprintf_r+0x7d8>
  403504:	004054e4 	.word	0x004054e4
  403508:	004054f8 	.word	0x004054f8
  40350c:	00405500 	.word	0x00405500

00403510 <__sbprintf>:
  403510:	b5f0      	push	{r4, r5, r6, r7, lr}
  403512:	460c      	mov	r4, r1
  403514:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  403518:	8989      	ldrh	r1, [r1, #12]
  40351a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40351c:	89e5      	ldrh	r5, [r4, #14]
  40351e:	9619      	str	r6, [sp, #100]	; 0x64
  403520:	f021 0102 	bic.w	r1, r1, #2
  403524:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403526:	f8ad 500e 	strh.w	r5, [sp, #14]
  40352a:	2500      	movs	r5, #0
  40352c:	69e7      	ldr	r7, [r4, #28]
  40352e:	f8ad 100c 	strh.w	r1, [sp, #12]
  403532:	9609      	str	r6, [sp, #36]	; 0x24
  403534:	9506      	str	r5, [sp, #24]
  403536:	ae1a      	add	r6, sp, #104	; 0x68
  403538:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40353c:	4669      	mov	r1, sp
  40353e:	9600      	str	r6, [sp, #0]
  403540:	9604      	str	r6, [sp, #16]
  403542:	9502      	str	r5, [sp, #8]
  403544:	9505      	str	r5, [sp, #20]
  403546:	9707      	str	r7, [sp, #28]
  403548:	4606      	mov	r6, r0
  40354a:	f7ff f8e3 	bl	402714 <_vfiprintf_r>
  40354e:	1e05      	subs	r5, r0, #0
  403550:	db07      	blt.n	403562 <__sbprintf+0x52>
  403552:	4630      	mov	r0, r6
  403554:	4669      	mov	r1, sp
  403556:	f000 f929 	bl	4037ac <_fflush_r>
  40355a:	2800      	cmp	r0, #0
  40355c:	bf18      	it	ne
  40355e:	f04f 35ff 	movne.w	r5, #4294967295
  403562:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403566:	065b      	lsls	r3, r3, #25
  403568:	d503      	bpl.n	403572 <__sbprintf+0x62>
  40356a:	89a3      	ldrh	r3, [r4, #12]
  40356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403570:	81a3      	strh	r3, [r4, #12]
  403572:	4628      	mov	r0, r5
  403574:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  403578:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40357a:	bf00      	nop

0040357c <__swsetup_r>:
  40357c:	b538      	push	{r3, r4, r5, lr}
  40357e:	4b30      	ldr	r3, [pc, #192]	; (403640 <__swsetup_r+0xc4>)
  403580:	681b      	ldr	r3, [r3, #0]
  403582:	4605      	mov	r5, r0
  403584:	460c      	mov	r4, r1
  403586:	b113      	cbz	r3, 40358e <__swsetup_r+0x12>
  403588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40358a:	2a00      	cmp	r2, #0
  40358c:	d038      	beq.n	403600 <__swsetup_r+0x84>
  40358e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403592:	b293      	uxth	r3, r2
  403594:	0718      	lsls	r0, r3, #28
  403596:	d50c      	bpl.n	4035b2 <__swsetup_r+0x36>
  403598:	6920      	ldr	r0, [r4, #16]
  40359a:	b1a8      	cbz	r0, 4035c8 <__swsetup_r+0x4c>
  40359c:	f013 0201 	ands.w	r2, r3, #1
  4035a0:	d01e      	beq.n	4035e0 <__swsetup_r+0x64>
  4035a2:	6963      	ldr	r3, [r4, #20]
  4035a4:	2200      	movs	r2, #0
  4035a6:	425b      	negs	r3, r3
  4035a8:	61a3      	str	r3, [r4, #24]
  4035aa:	60a2      	str	r2, [r4, #8]
  4035ac:	b1f0      	cbz	r0, 4035ec <__swsetup_r+0x70>
  4035ae:	2000      	movs	r0, #0
  4035b0:	bd38      	pop	{r3, r4, r5, pc}
  4035b2:	06d9      	lsls	r1, r3, #27
  4035b4:	d53c      	bpl.n	403630 <__swsetup_r+0xb4>
  4035b6:	0758      	lsls	r0, r3, #29
  4035b8:	d426      	bmi.n	403608 <__swsetup_r+0x8c>
  4035ba:	6920      	ldr	r0, [r4, #16]
  4035bc:	f042 0308 	orr.w	r3, r2, #8
  4035c0:	81a3      	strh	r3, [r4, #12]
  4035c2:	b29b      	uxth	r3, r3
  4035c4:	2800      	cmp	r0, #0
  4035c6:	d1e9      	bne.n	40359c <__swsetup_r+0x20>
  4035c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4035cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4035d0:	d0e4      	beq.n	40359c <__swsetup_r+0x20>
  4035d2:	4628      	mov	r0, r5
  4035d4:	4621      	mov	r1, r4
  4035d6:	f000 fd15 	bl	404004 <__smakebuf_r>
  4035da:	89a3      	ldrh	r3, [r4, #12]
  4035dc:	6920      	ldr	r0, [r4, #16]
  4035de:	e7dd      	b.n	40359c <__swsetup_r+0x20>
  4035e0:	0799      	lsls	r1, r3, #30
  4035e2:	bf58      	it	pl
  4035e4:	6962      	ldrpl	r2, [r4, #20]
  4035e6:	60a2      	str	r2, [r4, #8]
  4035e8:	2800      	cmp	r0, #0
  4035ea:	d1e0      	bne.n	4035ae <__swsetup_r+0x32>
  4035ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035f0:	061a      	lsls	r2, r3, #24
  4035f2:	d5dd      	bpl.n	4035b0 <__swsetup_r+0x34>
  4035f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4035f8:	81a3      	strh	r3, [r4, #12]
  4035fa:	f04f 30ff 	mov.w	r0, #4294967295
  4035fe:	bd38      	pop	{r3, r4, r5, pc}
  403600:	4618      	mov	r0, r3
  403602:	f000 f967 	bl	4038d4 <__sinit>
  403606:	e7c2      	b.n	40358e <__swsetup_r+0x12>
  403608:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40360a:	b151      	cbz	r1, 403622 <__swsetup_r+0xa6>
  40360c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403610:	4299      	cmp	r1, r3
  403612:	d004      	beq.n	40361e <__swsetup_r+0xa2>
  403614:	4628      	mov	r0, r5
  403616:	f000 fa27 	bl	403a68 <_free_r>
  40361a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40361e:	2300      	movs	r3, #0
  403620:	6323      	str	r3, [r4, #48]	; 0x30
  403622:	2300      	movs	r3, #0
  403624:	6920      	ldr	r0, [r4, #16]
  403626:	6063      	str	r3, [r4, #4]
  403628:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40362c:	6020      	str	r0, [r4, #0]
  40362e:	e7c5      	b.n	4035bc <__swsetup_r+0x40>
  403630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403634:	2309      	movs	r3, #9
  403636:	602b      	str	r3, [r5, #0]
  403638:	f04f 30ff 	mov.w	r0, #4294967295
  40363c:	81a2      	strh	r2, [r4, #12]
  40363e:	bd38      	pop	{r3, r4, r5, pc}
  403640:	20400438 	.word	0x20400438

00403644 <register_fini>:
  403644:	4b02      	ldr	r3, [pc, #8]	; (403650 <register_fini+0xc>)
  403646:	b113      	cbz	r3, 40364e <register_fini+0xa>
  403648:	4802      	ldr	r0, [pc, #8]	; (403654 <register_fini+0x10>)
  40364a:	f000 b805 	b.w	403658 <atexit>
  40364e:	4770      	bx	lr
  403650:	00000000 	.word	0x00000000
  403654:	004038e9 	.word	0x004038e9

00403658 <atexit>:
  403658:	2300      	movs	r3, #0
  40365a:	4601      	mov	r1, r0
  40365c:	461a      	mov	r2, r3
  40365e:	4618      	mov	r0, r3
  403660:	f001 bc12 	b.w	404e88 <__register_exitproc>

00403664 <__sflush_r>:
  403664:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403668:	b29a      	uxth	r2, r3
  40366a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40366e:	460d      	mov	r5, r1
  403670:	0711      	lsls	r1, r2, #28
  403672:	4680      	mov	r8, r0
  403674:	d43c      	bmi.n	4036f0 <__sflush_r+0x8c>
  403676:	686a      	ldr	r2, [r5, #4]
  403678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40367c:	2a00      	cmp	r2, #0
  40367e:	81ab      	strh	r3, [r5, #12]
  403680:	dd73      	ble.n	40376a <__sflush_r+0x106>
  403682:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403684:	2c00      	cmp	r4, #0
  403686:	d04b      	beq.n	403720 <__sflush_r+0xbc>
  403688:	b29b      	uxth	r3, r3
  40368a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40368e:	2100      	movs	r1, #0
  403690:	b292      	uxth	r2, r2
  403692:	f8d8 6000 	ldr.w	r6, [r8]
  403696:	f8c8 1000 	str.w	r1, [r8]
  40369a:	2a00      	cmp	r2, #0
  40369c:	d069      	beq.n	403772 <__sflush_r+0x10e>
  40369e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4036a0:	075f      	lsls	r7, r3, #29
  4036a2:	d505      	bpl.n	4036b0 <__sflush_r+0x4c>
  4036a4:	6869      	ldr	r1, [r5, #4]
  4036a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4036a8:	1a52      	subs	r2, r2, r1
  4036aa:	b10b      	cbz	r3, 4036b0 <__sflush_r+0x4c>
  4036ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4036ae:	1ad2      	subs	r2, r2, r3
  4036b0:	2300      	movs	r3, #0
  4036b2:	69e9      	ldr	r1, [r5, #28]
  4036b4:	4640      	mov	r0, r8
  4036b6:	47a0      	blx	r4
  4036b8:	1c44      	adds	r4, r0, #1
  4036ba:	d03c      	beq.n	403736 <__sflush_r+0xd2>
  4036bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4036c0:	692a      	ldr	r2, [r5, #16]
  4036c2:	602a      	str	r2, [r5, #0]
  4036c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4036c8:	2200      	movs	r2, #0
  4036ca:	81ab      	strh	r3, [r5, #12]
  4036cc:	04db      	lsls	r3, r3, #19
  4036ce:	606a      	str	r2, [r5, #4]
  4036d0:	d449      	bmi.n	403766 <__sflush_r+0x102>
  4036d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4036d4:	f8c8 6000 	str.w	r6, [r8]
  4036d8:	b311      	cbz	r1, 403720 <__sflush_r+0xbc>
  4036da:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4036de:	4299      	cmp	r1, r3
  4036e0:	d002      	beq.n	4036e8 <__sflush_r+0x84>
  4036e2:	4640      	mov	r0, r8
  4036e4:	f000 f9c0 	bl	403a68 <_free_r>
  4036e8:	2000      	movs	r0, #0
  4036ea:	6328      	str	r0, [r5, #48]	; 0x30
  4036ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4036f0:	692e      	ldr	r6, [r5, #16]
  4036f2:	b1ae      	cbz	r6, 403720 <__sflush_r+0xbc>
  4036f4:	682c      	ldr	r4, [r5, #0]
  4036f6:	602e      	str	r6, [r5, #0]
  4036f8:	0790      	lsls	r0, r2, #30
  4036fa:	bf0c      	ite	eq
  4036fc:	696b      	ldreq	r3, [r5, #20]
  4036fe:	2300      	movne	r3, #0
  403700:	1ba4      	subs	r4, r4, r6
  403702:	60ab      	str	r3, [r5, #8]
  403704:	e00a      	b.n	40371c <__sflush_r+0xb8>
  403706:	4623      	mov	r3, r4
  403708:	4632      	mov	r2, r6
  40370a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40370c:	69e9      	ldr	r1, [r5, #28]
  40370e:	4640      	mov	r0, r8
  403710:	47b8      	blx	r7
  403712:	2800      	cmp	r0, #0
  403714:	eba4 0400 	sub.w	r4, r4, r0
  403718:	4406      	add	r6, r0
  40371a:	dd04      	ble.n	403726 <__sflush_r+0xc2>
  40371c:	2c00      	cmp	r4, #0
  40371e:	dcf2      	bgt.n	403706 <__sflush_r+0xa2>
  403720:	2000      	movs	r0, #0
  403722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403726:	89ab      	ldrh	r3, [r5, #12]
  403728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40372c:	81ab      	strh	r3, [r5, #12]
  40372e:	f04f 30ff 	mov.w	r0, #4294967295
  403732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403736:	f8d8 2000 	ldr.w	r2, [r8]
  40373a:	2a1d      	cmp	r2, #29
  40373c:	d8f3      	bhi.n	403726 <__sflush_r+0xc2>
  40373e:	4b1a      	ldr	r3, [pc, #104]	; (4037a8 <__sflush_r+0x144>)
  403740:	40d3      	lsrs	r3, r2
  403742:	f003 0301 	and.w	r3, r3, #1
  403746:	f083 0401 	eor.w	r4, r3, #1
  40374a:	2b00      	cmp	r3, #0
  40374c:	d0eb      	beq.n	403726 <__sflush_r+0xc2>
  40374e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403752:	6929      	ldr	r1, [r5, #16]
  403754:	6029      	str	r1, [r5, #0]
  403756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40375a:	04d9      	lsls	r1, r3, #19
  40375c:	606c      	str	r4, [r5, #4]
  40375e:	81ab      	strh	r3, [r5, #12]
  403760:	d5b7      	bpl.n	4036d2 <__sflush_r+0x6e>
  403762:	2a00      	cmp	r2, #0
  403764:	d1b5      	bne.n	4036d2 <__sflush_r+0x6e>
  403766:	6528      	str	r0, [r5, #80]	; 0x50
  403768:	e7b3      	b.n	4036d2 <__sflush_r+0x6e>
  40376a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40376c:	2a00      	cmp	r2, #0
  40376e:	dc88      	bgt.n	403682 <__sflush_r+0x1e>
  403770:	e7d6      	b.n	403720 <__sflush_r+0xbc>
  403772:	2301      	movs	r3, #1
  403774:	69e9      	ldr	r1, [r5, #28]
  403776:	4640      	mov	r0, r8
  403778:	47a0      	blx	r4
  40377a:	1c43      	adds	r3, r0, #1
  40377c:	4602      	mov	r2, r0
  40377e:	d002      	beq.n	403786 <__sflush_r+0x122>
  403780:	89ab      	ldrh	r3, [r5, #12]
  403782:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403784:	e78c      	b.n	4036a0 <__sflush_r+0x3c>
  403786:	f8d8 3000 	ldr.w	r3, [r8]
  40378a:	2b00      	cmp	r3, #0
  40378c:	d0f8      	beq.n	403780 <__sflush_r+0x11c>
  40378e:	2b1d      	cmp	r3, #29
  403790:	d001      	beq.n	403796 <__sflush_r+0x132>
  403792:	2b16      	cmp	r3, #22
  403794:	d102      	bne.n	40379c <__sflush_r+0x138>
  403796:	f8c8 6000 	str.w	r6, [r8]
  40379a:	e7c1      	b.n	403720 <__sflush_r+0xbc>
  40379c:	89ab      	ldrh	r3, [r5, #12]
  40379e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4037a2:	81ab      	strh	r3, [r5, #12]
  4037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4037a8:	20400001 	.word	0x20400001

004037ac <_fflush_r>:
  4037ac:	b510      	push	{r4, lr}
  4037ae:	4604      	mov	r4, r0
  4037b0:	b082      	sub	sp, #8
  4037b2:	b108      	cbz	r0, 4037b8 <_fflush_r+0xc>
  4037b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4037b6:	b153      	cbz	r3, 4037ce <_fflush_r+0x22>
  4037b8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4037bc:	b908      	cbnz	r0, 4037c2 <_fflush_r+0x16>
  4037be:	b002      	add	sp, #8
  4037c0:	bd10      	pop	{r4, pc}
  4037c2:	4620      	mov	r0, r4
  4037c4:	b002      	add	sp, #8
  4037c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4037ca:	f7ff bf4b 	b.w	403664 <__sflush_r>
  4037ce:	9101      	str	r1, [sp, #4]
  4037d0:	f000 f880 	bl	4038d4 <__sinit>
  4037d4:	9901      	ldr	r1, [sp, #4]
  4037d6:	e7ef      	b.n	4037b8 <_fflush_r+0xc>

004037d8 <_cleanup_r>:
  4037d8:	4901      	ldr	r1, [pc, #4]	; (4037e0 <_cleanup_r+0x8>)
  4037da:	f000 bbaf 	b.w	403f3c <_fwalk_reent>
  4037de:	bf00      	nop
  4037e0:	00404f51 	.word	0x00404f51

004037e4 <__sinit.part.1>:
  4037e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037e8:	4b35      	ldr	r3, [pc, #212]	; (4038c0 <__sinit.part.1+0xdc>)
  4037ea:	6845      	ldr	r5, [r0, #4]
  4037ec:	63c3      	str	r3, [r0, #60]	; 0x3c
  4037ee:	2400      	movs	r4, #0
  4037f0:	4607      	mov	r7, r0
  4037f2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4037f6:	2304      	movs	r3, #4
  4037f8:	2103      	movs	r1, #3
  4037fa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4037fe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  403802:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  403806:	b083      	sub	sp, #12
  403808:	602c      	str	r4, [r5, #0]
  40380a:	606c      	str	r4, [r5, #4]
  40380c:	60ac      	str	r4, [r5, #8]
  40380e:	666c      	str	r4, [r5, #100]	; 0x64
  403810:	81ec      	strh	r4, [r5, #14]
  403812:	612c      	str	r4, [r5, #16]
  403814:	616c      	str	r4, [r5, #20]
  403816:	61ac      	str	r4, [r5, #24]
  403818:	81ab      	strh	r3, [r5, #12]
  40381a:	4621      	mov	r1, r4
  40381c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403820:	2208      	movs	r2, #8
  403822:	f7fe fd8b 	bl	40233c <memset>
  403826:	68be      	ldr	r6, [r7, #8]
  403828:	f8df b098 	ldr.w	fp, [pc, #152]	; 4038c4 <__sinit.part.1+0xe0>
  40382c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4038c8 <__sinit.part.1+0xe4>
  403830:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4038cc <__sinit.part.1+0xe8>
  403834:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4038d0 <__sinit.part.1+0xec>
  403838:	f8c5 b020 	str.w	fp, [r5, #32]
  40383c:	2301      	movs	r3, #1
  40383e:	2209      	movs	r2, #9
  403840:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403844:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403848:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40384c:	61ed      	str	r5, [r5, #28]
  40384e:	4621      	mov	r1, r4
  403850:	81f3      	strh	r3, [r6, #14]
  403852:	81b2      	strh	r2, [r6, #12]
  403854:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  403858:	6034      	str	r4, [r6, #0]
  40385a:	6074      	str	r4, [r6, #4]
  40385c:	60b4      	str	r4, [r6, #8]
  40385e:	6674      	str	r4, [r6, #100]	; 0x64
  403860:	6134      	str	r4, [r6, #16]
  403862:	6174      	str	r4, [r6, #20]
  403864:	61b4      	str	r4, [r6, #24]
  403866:	2208      	movs	r2, #8
  403868:	9301      	str	r3, [sp, #4]
  40386a:	f7fe fd67 	bl	40233c <memset>
  40386e:	68fd      	ldr	r5, [r7, #12]
  403870:	61f6      	str	r6, [r6, #28]
  403872:	2012      	movs	r0, #18
  403874:	2202      	movs	r2, #2
  403876:	f8c6 b020 	str.w	fp, [r6, #32]
  40387a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40387e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403882:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  403886:	4621      	mov	r1, r4
  403888:	81a8      	strh	r0, [r5, #12]
  40388a:	81ea      	strh	r2, [r5, #14]
  40388c:	602c      	str	r4, [r5, #0]
  40388e:	606c      	str	r4, [r5, #4]
  403890:	60ac      	str	r4, [r5, #8]
  403892:	666c      	str	r4, [r5, #100]	; 0x64
  403894:	612c      	str	r4, [r5, #16]
  403896:	616c      	str	r4, [r5, #20]
  403898:	61ac      	str	r4, [r5, #24]
  40389a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40389e:	2208      	movs	r2, #8
  4038a0:	f7fe fd4c 	bl	40233c <memset>
  4038a4:	9b01      	ldr	r3, [sp, #4]
  4038a6:	61ed      	str	r5, [r5, #28]
  4038a8:	f8c5 b020 	str.w	fp, [r5, #32]
  4038ac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4038b0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4038b4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4038b8:	63bb      	str	r3, [r7, #56]	; 0x38
  4038ba:	b003      	add	sp, #12
  4038bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038c0:	004037d9 	.word	0x004037d9
  4038c4:	00404cb9 	.word	0x00404cb9
  4038c8:	00404cdd 	.word	0x00404cdd
  4038cc:	00404d19 	.word	0x00404d19
  4038d0:	00404d39 	.word	0x00404d39

004038d4 <__sinit>:
  4038d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4038d6:	b103      	cbz	r3, 4038da <__sinit+0x6>
  4038d8:	4770      	bx	lr
  4038da:	f7ff bf83 	b.w	4037e4 <__sinit.part.1>
  4038de:	bf00      	nop

004038e0 <__sfp_lock_acquire>:
  4038e0:	4770      	bx	lr
  4038e2:	bf00      	nop

004038e4 <__sfp_lock_release>:
  4038e4:	4770      	bx	lr
  4038e6:	bf00      	nop

004038e8 <__libc_fini_array>:
  4038e8:	b538      	push	{r3, r4, r5, lr}
  4038ea:	4d07      	ldr	r5, [pc, #28]	; (403908 <__libc_fini_array+0x20>)
  4038ec:	4c07      	ldr	r4, [pc, #28]	; (40390c <__libc_fini_array+0x24>)
  4038ee:	1b2c      	subs	r4, r5, r4
  4038f0:	10a4      	asrs	r4, r4, #2
  4038f2:	d005      	beq.n	403900 <__libc_fini_array+0x18>
  4038f4:	3c01      	subs	r4, #1
  4038f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4038fa:	4798      	blx	r3
  4038fc:	2c00      	cmp	r4, #0
  4038fe:	d1f9      	bne.n	4038f4 <__libc_fini_array+0xc>
  403900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403904:	f001 be0e 	b.w	405524 <_fini>
  403908:	00405534 	.word	0x00405534
  40390c:	00405530 	.word	0x00405530

00403910 <__fputwc>:
  403910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403914:	b082      	sub	sp, #8
  403916:	4680      	mov	r8, r0
  403918:	4689      	mov	r9, r1
  40391a:	4614      	mov	r4, r2
  40391c:	f000 fb3c 	bl	403f98 <__locale_mb_cur_max>
  403920:	2801      	cmp	r0, #1
  403922:	d033      	beq.n	40398c <__fputwc+0x7c>
  403924:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403928:	464a      	mov	r2, r9
  40392a:	a901      	add	r1, sp, #4
  40392c:	4640      	mov	r0, r8
  40392e:	f001 fa5d 	bl	404dec <_wcrtomb_r>
  403932:	f1b0 3fff 	cmp.w	r0, #4294967295
  403936:	4682      	mov	sl, r0
  403938:	d021      	beq.n	40397e <__fputwc+0x6e>
  40393a:	b388      	cbz	r0, 4039a0 <__fputwc+0x90>
  40393c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  403940:	2500      	movs	r5, #0
  403942:	e008      	b.n	403956 <__fputwc+0x46>
  403944:	6823      	ldr	r3, [r4, #0]
  403946:	1c5a      	adds	r2, r3, #1
  403948:	6022      	str	r2, [r4, #0]
  40394a:	701e      	strb	r6, [r3, #0]
  40394c:	3501      	adds	r5, #1
  40394e:	4555      	cmp	r5, sl
  403950:	d226      	bcs.n	4039a0 <__fputwc+0x90>
  403952:	ab01      	add	r3, sp, #4
  403954:	5d5e      	ldrb	r6, [r3, r5]
  403956:	68a3      	ldr	r3, [r4, #8]
  403958:	3b01      	subs	r3, #1
  40395a:	2b00      	cmp	r3, #0
  40395c:	60a3      	str	r3, [r4, #8]
  40395e:	daf1      	bge.n	403944 <__fputwc+0x34>
  403960:	69a7      	ldr	r7, [r4, #24]
  403962:	42bb      	cmp	r3, r7
  403964:	4631      	mov	r1, r6
  403966:	4622      	mov	r2, r4
  403968:	4640      	mov	r0, r8
  40396a:	db01      	blt.n	403970 <__fputwc+0x60>
  40396c:	2e0a      	cmp	r6, #10
  40396e:	d1e9      	bne.n	403944 <__fputwc+0x34>
  403970:	f001 f9e6 	bl	404d40 <__swbuf_r>
  403974:	1c43      	adds	r3, r0, #1
  403976:	d1e9      	bne.n	40394c <__fputwc+0x3c>
  403978:	b002      	add	sp, #8
  40397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40397e:	89a3      	ldrh	r3, [r4, #12]
  403980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403984:	81a3      	strh	r3, [r4, #12]
  403986:	b002      	add	sp, #8
  403988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40398c:	f109 33ff 	add.w	r3, r9, #4294967295
  403990:	2bfe      	cmp	r3, #254	; 0xfe
  403992:	d8c7      	bhi.n	403924 <__fputwc+0x14>
  403994:	fa5f f689 	uxtb.w	r6, r9
  403998:	4682      	mov	sl, r0
  40399a:	f88d 6004 	strb.w	r6, [sp, #4]
  40399e:	e7cf      	b.n	403940 <__fputwc+0x30>
  4039a0:	4648      	mov	r0, r9
  4039a2:	b002      	add	sp, #8
  4039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004039a8 <_fputwc_r>:
  4039a8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4039ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4039b0:	d10a      	bne.n	4039c8 <_fputwc_r+0x20>
  4039b2:	b410      	push	{r4}
  4039b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4039b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4039ba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4039be:	6654      	str	r4, [r2, #100]	; 0x64
  4039c0:	8193      	strh	r3, [r2, #12]
  4039c2:	bc10      	pop	{r4}
  4039c4:	f7ff bfa4 	b.w	403910 <__fputwc>
  4039c8:	f7ff bfa2 	b.w	403910 <__fputwc>

004039cc <_malloc_trim_r>:
  4039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4039ce:	4f23      	ldr	r7, [pc, #140]	; (403a5c <_malloc_trim_r+0x90>)
  4039d0:	460c      	mov	r4, r1
  4039d2:	4606      	mov	r6, r0
  4039d4:	f000 ff6a 	bl	4048ac <__malloc_lock>
  4039d8:	68bb      	ldr	r3, [r7, #8]
  4039da:	685d      	ldr	r5, [r3, #4]
  4039dc:	f025 0503 	bic.w	r5, r5, #3
  4039e0:	1b29      	subs	r1, r5, r4
  4039e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4039e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4039ea:	f021 010f 	bic.w	r1, r1, #15
  4039ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4039f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4039f6:	db07      	blt.n	403a08 <_malloc_trim_r+0x3c>
  4039f8:	2100      	movs	r1, #0
  4039fa:	4630      	mov	r0, r6
  4039fc:	f001 f94a 	bl	404c94 <_sbrk_r>
  403a00:	68bb      	ldr	r3, [r7, #8]
  403a02:	442b      	add	r3, r5
  403a04:	4298      	cmp	r0, r3
  403a06:	d004      	beq.n	403a12 <_malloc_trim_r+0x46>
  403a08:	4630      	mov	r0, r6
  403a0a:	f000 ff51 	bl	4048b0 <__malloc_unlock>
  403a0e:	2000      	movs	r0, #0
  403a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a12:	4261      	negs	r1, r4
  403a14:	4630      	mov	r0, r6
  403a16:	f001 f93d 	bl	404c94 <_sbrk_r>
  403a1a:	3001      	adds	r0, #1
  403a1c:	d00d      	beq.n	403a3a <_malloc_trim_r+0x6e>
  403a1e:	4b10      	ldr	r3, [pc, #64]	; (403a60 <_malloc_trim_r+0x94>)
  403a20:	68ba      	ldr	r2, [r7, #8]
  403a22:	6819      	ldr	r1, [r3, #0]
  403a24:	1b2d      	subs	r5, r5, r4
  403a26:	f045 0501 	orr.w	r5, r5, #1
  403a2a:	4630      	mov	r0, r6
  403a2c:	1b09      	subs	r1, r1, r4
  403a2e:	6055      	str	r5, [r2, #4]
  403a30:	6019      	str	r1, [r3, #0]
  403a32:	f000 ff3d 	bl	4048b0 <__malloc_unlock>
  403a36:	2001      	movs	r0, #1
  403a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a3a:	2100      	movs	r1, #0
  403a3c:	4630      	mov	r0, r6
  403a3e:	f001 f929 	bl	404c94 <_sbrk_r>
  403a42:	68ba      	ldr	r2, [r7, #8]
  403a44:	1a83      	subs	r3, r0, r2
  403a46:	2b0f      	cmp	r3, #15
  403a48:	ddde      	ble.n	403a08 <_malloc_trim_r+0x3c>
  403a4a:	4c06      	ldr	r4, [pc, #24]	; (403a64 <_malloc_trim_r+0x98>)
  403a4c:	4904      	ldr	r1, [pc, #16]	; (403a60 <_malloc_trim_r+0x94>)
  403a4e:	6824      	ldr	r4, [r4, #0]
  403a50:	f043 0301 	orr.w	r3, r3, #1
  403a54:	1b00      	subs	r0, r0, r4
  403a56:	6053      	str	r3, [r2, #4]
  403a58:	6008      	str	r0, [r1, #0]
  403a5a:	e7d5      	b.n	403a08 <_malloc_trim_r+0x3c>
  403a5c:	20400460 	.word	0x20400460
  403a60:	2040091c 	.word	0x2040091c
  403a64:	2040086c 	.word	0x2040086c

00403a68 <_free_r>:
  403a68:	2900      	cmp	r1, #0
  403a6a:	d045      	beq.n	403af8 <_free_r+0x90>
  403a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a70:	460d      	mov	r5, r1
  403a72:	4680      	mov	r8, r0
  403a74:	f000 ff1a 	bl	4048ac <__malloc_lock>
  403a78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403a7c:	496a      	ldr	r1, [pc, #424]	; (403c28 <_free_r+0x1c0>)
  403a7e:	f027 0301 	bic.w	r3, r7, #1
  403a82:	f1a5 0408 	sub.w	r4, r5, #8
  403a86:	18e2      	adds	r2, r4, r3
  403a88:	688e      	ldr	r6, [r1, #8]
  403a8a:	6850      	ldr	r0, [r2, #4]
  403a8c:	42b2      	cmp	r2, r6
  403a8e:	f020 0003 	bic.w	r0, r0, #3
  403a92:	d062      	beq.n	403b5a <_free_r+0xf2>
  403a94:	07fe      	lsls	r6, r7, #31
  403a96:	6050      	str	r0, [r2, #4]
  403a98:	d40b      	bmi.n	403ab2 <_free_r+0x4a>
  403a9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403a9e:	1be4      	subs	r4, r4, r7
  403aa0:	f101 0e08 	add.w	lr, r1, #8
  403aa4:	68a5      	ldr	r5, [r4, #8]
  403aa6:	4575      	cmp	r5, lr
  403aa8:	443b      	add	r3, r7
  403aaa:	d06f      	beq.n	403b8c <_free_r+0x124>
  403aac:	68e7      	ldr	r7, [r4, #12]
  403aae:	60ef      	str	r7, [r5, #12]
  403ab0:	60bd      	str	r5, [r7, #8]
  403ab2:	1815      	adds	r5, r2, r0
  403ab4:	686d      	ldr	r5, [r5, #4]
  403ab6:	07ed      	lsls	r5, r5, #31
  403ab8:	d542      	bpl.n	403b40 <_free_r+0xd8>
  403aba:	f043 0201 	orr.w	r2, r3, #1
  403abe:	6062      	str	r2, [r4, #4]
  403ac0:	50e3      	str	r3, [r4, r3]
  403ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403ac6:	d218      	bcs.n	403afa <_free_r+0x92>
  403ac8:	08db      	lsrs	r3, r3, #3
  403aca:	1c5a      	adds	r2, r3, #1
  403acc:	684d      	ldr	r5, [r1, #4]
  403ace:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  403ad2:	60a7      	str	r7, [r4, #8]
  403ad4:	2001      	movs	r0, #1
  403ad6:	109b      	asrs	r3, r3, #2
  403ad8:	fa00 f303 	lsl.w	r3, r0, r3
  403adc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  403ae0:	431d      	orrs	r5, r3
  403ae2:	3808      	subs	r0, #8
  403ae4:	60e0      	str	r0, [r4, #12]
  403ae6:	604d      	str	r5, [r1, #4]
  403ae8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  403aec:	60fc      	str	r4, [r7, #12]
  403aee:	4640      	mov	r0, r8
  403af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403af4:	f000 bedc 	b.w	4048b0 <__malloc_unlock>
  403af8:	4770      	bx	lr
  403afa:	0a5a      	lsrs	r2, r3, #9
  403afc:	2a04      	cmp	r2, #4
  403afe:	d853      	bhi.n	403ba8 <_free_r+0x140>
  403b00:	099a      	lsrs	r2, r3, #6
  403b02:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403b06:	007f      	lsls	r7, r7, #1
  403b08:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403b0c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  403b10:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  403b14:	4944      	ldr	r1, [pc, #272]	; (403c28 <_free_r+0x1c0>)
  403b16:	3808      	subs	r0, #8
  403b18:	4290      	cmp	r0, r2
  403b1a:	d04d      	beq.n	403bb8 <_free_r+0x150>
  403b1c:	6851      	ldr	r1, [r2, #4]
  403b1e:	f021 0103 	bic.w	r1, r1, #3
  403b22:	428b      	cmp	r3, r1
  403b24:	d202      	bcs.n	403b2c <_free_r+0xc4>
  403b26:	6892      	ldr	r2, [r2, #8]
  403b28:	4290      	cmp	r0, r2
  403b2a:	d1f7      	bne.n	403b1c <_free_r+0xb4>
  403b2c:	68d0      	ldr	r0, [r2, #12]
  403b2e:	60e0      	str	r0, [r4, #12]
  403b30:	60a2      	str	r2, [r4, #8]
  403b32:	6084      	str	r4, [r0, #8]
  403b34:	60d4      	str	r4, [r2, #12]
  403b36:	4640      	mov	r0, r8
  403b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403b3c:	f000 beb8 	b.w	4048b0 <__malloc_unlock>
  403b40:	6895      	ldr	r5, [r2, #8]
  403b42:	4f3a      	ldr	r7, [pc, #232]	; (403c2c <_free_r+0x1c4>)
  403b44:	42bd      	cmp	r5, r7
  403b46:	4403      	add	r3, r0
  403b48:	d03f      	beq.n	403bca <_free_r+0x162>
  403b4a:	68d0      	ldr	r0, [r2, #12]
  403b4c:	60e8      	str	r0, [r5, #12]
  403b4e:	f043 0201 	orr.w	r2, r3, #1
  403b52:	6085      	str	r5, [r0, #8]
  403b54:	6062      	str	r2, [r4, #4]
  403b56:	50e3      	str	r3, [r4, r3]
  403b58:	e7b3      	b.n	403ac2 <_free_r+0x5a>
  403b5a:	07ff      	lsls	r7, r7, #31
  403b5c:	4403      	add	r3, r0
  403b5e:	d407      	bmi.n	403b70 <_free_r+0x108>
  403b60:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403b64:	1aa4      	subs	r4, r4, r2
  403b66:	4413      	add	r3, r2
  403b68:	68a0      	ldr	r0, [r4, #8]
  403b6a:	68e2      	ldr	r2, [r4, #12]
  403b6c:	60c2      	str	r2, [r0, #12]
  403b6e:	6090      	str	r0, [r2, #8]
  403b70:	4a2f      	ldr	r2, [pc, #188]	; (403c30 <_free_r+0x1c8>)
  403b72:	6812      	ldr	r2, [r2, #0]
  403b74:	f043 0001 	orr.w	r0, r3, #1
  403b78:	4293      	cmp	r3, r2
  403b7a:	6060      	str	r0, [r4, #4]
  403b7c:	608c      	str	r4, [r1, #8]
  403b7e:	d3b6      	bcc.n	403aee <_free_r+0x86>
  403b80:	4b2c      	ldr	r3, [pc, #176]	; (403c34 <_free_r+0x1cc>)
  403b82:	4640      	mov	r0, r8
  403b84:	6819      	ldr	r1, [r3, #0]
  403b86:	f7ff ff21 	bl	4039cc <_malloc_trim_r>
  403b8a:	e7b0      	b.n	403aee <_free_r+0x86>
  403b8c:	1811      	adds	r1, r2, r0
  403b8e:	6849      	ldr	r1, [r1, #4]
  403b90:	07c9      	lsls	r1, r1, #31
  403b92:	d444      	bmi.n	403c1e <_free_r+0x1b6>
  403b94:	6891      	ldr	r1, [r2, #8]
  403b96:	68d2      	ldr	r2, [r2, #12]
  403b98:	60ca      	str	r2, [r1, #12]
  403b9a:	4403      	add	r3, r0
  403b9c:	f043 0001 	orr.w	r0, r3, #1
  403ba0:	6091      	str	r1, [r2, #8]
  403ba2:	6060      	str	r0, [r4, #4]
  403ba4:	50e3      	str	r3, [r4, r3]
  403ba6:	e7a2      	b.n	403aee <_free_r+0x86>
  403ba8:	2a14      	cmp	r2, #20
  403baa:	d817      	bhi.n	403bdc <_free_r+0x174>
  403bac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403bb0:	007f      	lsls	r7, r7, #1
  403bb2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403bb6:	e7a9      	b.n	403b0c <_free_r+0xa4>
  403bb8:	10aa      	asrs	r2, r5, #2
  403bba:	684b      	ldr	r3, [r1, #4]
  403bbc:	2501      	movs	r5, #1
  403bbe:	fa05 f202 	lsl.w	r2, r5, r2
  403bc2:	4313      	orrs	r3, r2
  403bc4:	604b      	str	r3, [r1, #4]
  403bc6:	4602      	mov	r2, r0
  403bc8:	e7b1      	b.n	403b2e <_free_r+0xc6>
  403bca:	f043 0201 	orr.w	r2, r3, #1
  403bce:	614c      	str	r4, [r1, #20]
  403bd0:	610c      	str	r4, [r1, #16]
  403bd2:	60e5      	str	r5, [r4, #12]
  403bd4:	60a5      	str	r5, [r4, #8]
  403bd6:	6062      	str	r2, [r4, #4]
  403bd8:	50e3      	str	r3, [r4, r3]
  403bda:	e788      	b.n	403aee <_free_r+0x86>
  403bdc:	2a54      	cmp	r2, #84	; 0x54
  403bde:	d806      	bhi.n	403bee <_free_r+0x186>
  403be0:	0b1a      	lsrs	r2, r3, #12
  403be2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403be6:	007f      	lsls	r7, r7, #1
  403be8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403bec:	e78e      	b.n	403b0c <_free_r+0xa4>
  403bee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403bf2:	d806      	bhi.n	403c02 <_free_r+0x19a>
  403bf4:	0bda      	lsrs	r2, r3, #15
  403bf6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403bfa:	007f      	lsls	r7, r7, #1
  403bfc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403c00:	e784      	b.n	403b0c <_free_r+0xa4>
  403c02:	f240 5054 	movw	r0, #1364	; 0x554
  403c06:	4282      	cmp	r2, r0
  403c08:	d806      	bhi.n	403c18 <_free_r+0x1b0>
  403c0a:	0c9a      	lsrs	r2, r3, #18
  403c0c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403c10:	007f      	lsls	r7, r7, #1
  403c12:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403c16:	e779      	b.n	403b0c <_free_r+0xa4>
  403c18:	27fe      	movs	r7, #254	; 0xfe
  403c1a:	257e      	movs	r5, #126	; 0x7e
  403c1c:	e776      	b.n	403b0c <_free_r+0xa4>
  403c1e:	f043 0201 	orr.w	r2, r3, #1
  403c22:	6062      	str	r2, [r4, #4]
  403c24:	50e3      	str	r3, [r4, r3]
  403c26:	e762      	b.n	403aee <_free_r+0x86>
  403c28:	20400460 	.word	0x20400460
  403c2c:	20400468 	.word	0x20400468
  403c30:	20400868 	.word	0x20400868
  403c34:	20400918 	.word	0x20400918

00403c38 <__sfvwrite_r>:
  403c38:	6893      	ldr	r3, [r2, #8]
  403c3a:	2b00      	cmp	r3, #0
  403c3c:	d076      	beq.n	403d2c <__sfvwrite_r+0xf4>
  403c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c42:	898b      	ldrh	r3, [r1, #12]
  403c44:	b085      	sub	sp, #20
  403c46:	460c      	mov	r4, r1
  403c48:	0719      	lsls	r1, r3, #28
  403c4a:	9001      	str	r0, [sp, #4]
  403c4c:	4616      	mov	r6, r2
  403c4e:	d529      	bpl.n	403ca4 <__sfvwrite_r+0x6c>
  403c50:	6922      	ldr	r2, [r4, #16]
  403c52:	b33a      	cbz	r2, 403ca4 <__sfvwrite_r+0x6c>
  403c54:	f003 0802 	and.w	r8, r3, #2
  403c58:	fa1f f088 	uxth.w	r0, r8
  403c5c:	6835      	ldr	r5, [r6, #0]
  403c5e:	2800      	cmp	r0, #0
  403c60:	d02f      	beq.n	403cc2 <__sfvwrite_r+0x8a>
  403c62:	f04f 0900 	mov.w	r9, #0
  403c66:	4fb4      	ldr	r7, [pc, #720]	; (403f38 <__sfvwrite_r+0x300>)
  403c68:	46c8      	mov	r8, r9
  403c6a:	46b2      	mov	sl, r6
  403c6c:	45b8      	cmp	r8, r7
  403c6e:	4643      	mov	r3, r8
  403c70:	464a      	mov	r2, r9
  403c72:	bf28      	it	cs
  403c74:	463b      	movcs	r3, r7
  403c76:	9801      	ldr	r0, [sp, #4]
  403c78:	f1b8 0f00 	cmp.w	r8, #0
  403c7c:	d050      	beq.n	403d20 <__sfvwrite_r+0xe8>
  403c7e:	69e1      	ldr	r1, [r4, #28]
  403c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403c82:	47b0      	blx	r6
  403c84:	2800      	cmp	r0, #0
  403c86:	dd71      	ble.n	403d6c <__sfvwrite_r+0x134>
  403c88:	f8da 3008 	ldr.w	r3, [sl, #8]
  403c8c:	1a1b      	subs	r3, r3, r0
  403c8e:	4481      	add	r9, r0
  403c90:	ebc0 0808 	rsb	r8, r0, r8
  403c94:	f8ca 3008 	str.w	r3, [sl, #8]
  403c98:	2b00      	cmp	r3, #0
  403c9a:	d1e7      	bne.n	403c6c <__sfvwrite_r+0x34>
  403c9c:	2000      	movs	r0, #0
  403c9e:	b005      	add	sp, #20
  403ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ca4:	4621      	mov	r1, r4
  403ca6:	9801      	ldr	r0, [sp, #4]
  403ca8:	f7ff fc68 	bl	40357c <__swsetup_r>
  403cac:	2800      	cmp	r0, #0
  403cae:	f040 813a 	bne.w	403f26 <__sfvwrite_r+0x2ee>
  403cb2:	89a3      	ldrh	r3, [r4, #12]
  403cb4:	6835      	ldr	r5, [r6, #0]
  403cb6:	f003 0802 	and.w	r8, r3, #2
  403cba:	fa1f f088 	uxth.w	r0, r8
  403cbe:	2800      	cmp	r0, #0
  403cc0:	d1cf      	bne.n	403c62 <__sfvwrite_r+0x2a>
  403cc2:	f013 0901 	ands.w	r9, r3, #1
  403cc6:	d15b      	bne.n	403d80 <__sfvwrite_r+0x148>
  403cc8:	464f      	mov	r7, r9
  403cca:	9602      	str	r6, [sp, #8]
  403ccc:	b31f      	cbz	r7, 403d16 <__sfvwrite_r+0xde>
  403cce:	059a      	lsls	r2, r3, #22
  403cd0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403cd4:	d52c      	bpl.n	403d30 <__sfvwrite_r+0xf8>
  403cd6:	4547      	cmp	r7, r8
  403cd8:	46c2      	mov	sl, r8
  403cda:	f0c0 80a4 	bcc.w	403e26 <__sfvwrite_r+0x1ee>
  403cde:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403ce2:	f040 80b1 	bne.w	403e48 <__sfvwrite_r+0x210>
  403ce6:	6820      	ldr	r0, [r4, #0]
  403ce8:	4652      	mov	r2, sl
  403cea:	4649      	mov	r1, r9
  403cec:	f000 fd7a 	bl	4047e4 <memmove>
  403cf0:	68a0      	ldr	r0, [r4, #8]
  403cf2:	6823      	ldr	r3, [r4, #0]
  403cf4:	ebc8 0000 	rsb	r0, r8, r0
  403cf8:	4453      	add	r3, sl
  403cfa:	60a0      	str	r0, [r4, #8]
  403cfc:	6023      	str	r3, [r4, #0]
  403cfe:	4638      	mov	r0, r7
  403d00:	9a02      	ldr	r2, [sp, #8]
  403d02:	6893      	ldr	r3, [r2, #8]
  403d04:	1a1b      	subs	r3, r3, r0
  403d06:	4481      	add	r9, r0
  403d08:	1a3f      	subs	r7, r7, r0
  403d0a:	6093      	str	r3, [r2, #8]
  403d0c:	2b00      	cmp	r3, #0
  403d0e:	d0c5      	beq.n	403c9c <__sfvwrite_r+0x64>
  403d10:	89a3      	ldrh	r3, [r4, #12]
  403d12:	2f00      	cmp	r7, #0
  403d14:	d1db      	bne.n	403cce <__sfvwrite_r+0x96>
  403d16:	f8d5 9000 	ldr.w	r9, [r5]
  403d1a:	686f      	ldr	r7, [r5, #4]
  403d1c:	3508      	adds	r5, #8
  403d1e:	e7d5      	b.n	403ccc <__sfvwrite_r+0x94>
  403d20:	f8d5 9000 	ldr.w	r9, [r5]
  403d24:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403d28:	3508      	adds	r5, #8
  403d2a:	e79f      	b.n	403c6c <__sfvwrite_r+0x34>
  403d2c:	2000      	movs	r0, #0
  403d2e:	4770      	bx	lr
  403d30:	6820      	ldr	r0, [r4, #0]
  403d32:	6923      	ldr	r3, [r4, #16]
  403d34:	4298      	cmp	r0, r3
  403d36:	d803      	bhi.n	403d40 <__sfvwrite_r+0x108>
  403d38:	6961      	ldr	r1, [r4, #20]
  403d3a:	428f      	cmp	r7, r1
  403d3c:	f080 80b7 	bcs.w	403eae <__sfvwrite_r+0x276>
  403d40:	45b8      	cmp	r8, r7
  403d42:	bf28      	it	cs
  403d44:	46b8      	movcs	r8, r7
  403d46:	4642      	mov	r2, r8
  403d48:	4649      	mov	r1, r9
  403d4a:	f000 fd4b 	bl	4047e4 <memmove>
  403d4e:	68a3      	ldr	r3, [r4, #8]
  403d50:	6822      	ldr	r2, [r4, #0]
  403d52:	ebc8 0303 	rsb	r3, r8, r3
  403d56:	4442      	add	r2, r8
  403d58:	60a3      	str	r3, [r4, #8]
  403d5a:	6022      	str	r2, [r4, #0]
  403d5c:	2b00      	cmp	r3, #0
  403d5e:	d149      	bne.n	403df4 <__sfvwrite_r+0x1bc>
  403d60:	4621      	mov	r1, r4
  403d62:	9801      	ldr	r0, [sp, #4]
  403d64:	f7ff fd22 	bl	4037ac <_fflush_r>
  403d68:	2800      	cmp	r0, #0
  403d6a:	d043      	beq.n	403df4 <__sfvwrite_r+0x1bc>
  403d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403d74:	f04f 30ff 	mov.w	r0, #4294967295
  403d78:	81a3      	strh	r3, [r4, #12]
  403d7a:	b005      	add	sp, #20
  403d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d80:	4680      	mov	r8, r0
  403d82:	9002      	str	r0, [sp, #8]
  403d84:	4682      	mov	sl, r0
  403d86:	4681      	mov	r9, r0
  403d88:	f1b9 0f00 	cmp.w	r9, #0
  403d8c:	d02a      	beq.n	403de4 <__sfvwrite_r+0x1ac>
  403d8e:	9b02      	ldr	r3, [sp, #8]
  403d90:	2b00      	cmp	r3, #0
  403d92:	d04c      	beq.n	403e2e <__sfvwrite_r+0x1f6>
  403d94:	6820      	ldr	r0, [r4, #0]
  403d96:	6923      	ldr	r3, [r4, #16]
  403d98:	6962      	ldr	r2, [r4, #20]
  403d9a:	45c8      	cmp	r8, r9
  403d9c:	46c3      	mov	fp, r8
  403d9e:	bf28      	it	cs
  403da0:	46cb      	movcs	fp, r9
  403da2:	4298      	cmp	r0, r3
  403da4:	465f      	mov	r7, fp
  403da6:	d904      	bls.n	403db2 <__sfvwrite_r+0x17a>
  403da8:	68a3      	ldr	r3, [r4, #8]
  403daa:	4413      	add	r3, r2
  403dac:	459b      	cmp	fp, r3
  403dae:	f300 8090 	bgt.w	403ed2 <__sfvwrite_r+0x29a>
  403db2:	4593      	cmp	fp, r2
  403db4:	db20      	blt.n	403df8 <__sfvwrite_r+0x1c0>
  403db6:	4613      	mov	r3, r2
  403db8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403dba:	69e1      	ldr	r1, [r4, #28]
  403dbc:	9801      	ldr	r0, [sp, #4]
  403dbe:	4652      	mov	r2, sl
  403dc0:	47b8      	blx	r7
  403dc2:	1e07      	subs	r7, r0, #0
  403dc4:	ddd2      	ble.n	403d6c <__sfvwrite_r+0x134>
  403dc6:	ebb8 0807 	subs.w	r8, r8, r7
  403dca:	d023      	beq.n	403e14 <__sfvwrite_r+0x1dc>
  403dcc:	68b3      	ldr	r3, [r6, #8]
  403dce:	1bdb      	subs	r3, r3, r7
  403dd0:	44ba      	add	sl, r7
  403dd2:	ebc7 0909 	rsb	r9, r7, r9
  403dd6:	60b3      	str	r3, [r6, #8]
  403dd8:	2b00      	cmp	r3, #0
  403dda:	f43f af5f 	beq.w	403c9c <__sfvwrite_r+0x64>
  403dde:	f1b9 0f00 	cmp.w	r9, #0
  403de2:	d1d4      	bne.n	403d8e <__sfvwrite_r+0x156>
  403de4:	2300      	movs	r3, #0
  403de6:	f8d5 a000 	ldr.w	sl, [r5]
  403dea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  403dee:	9302      	str	r3, [sp, #8]
  403df0:	3508      	adds	r5, #8
  403df2:	e7c9      	b.n	403d88 <__sfvwrite_r+0x150>
  403df4:	4640      	mov	r0, r8
  403df6:	e783      	b.n	403d00 <__sfvwrite_r+0xc8>
  403df8:	465a      	mov	r2, fp
  403dfa:	4651      	mov	r1, sl
  403dfc:	f000 fcf2 	bl	4047e4 <memmove>
  403e00:	68a2      	ldr	r2, [r4, #8]
  403e02:	6823      	ldr	r3, [r4, #0]
  403e04:	ebcb 0202 	rsb	r2, fp, r2
  403e08:	445b      	add	r3, fp
  403e0a:	ebb8 0807 	subs.w	r8, r8, r7
  403e0e:	60a2      	str	r2, [r4, #8]
  403e10:	6023      	str	r3, [r4, #0]
  403e12:	d1db      	bne.n	403dcc <__sfvwrite_r+0x194>
  403e14:	4621      	mov	r1, r4
  403e16:	9801      	ldr	r0, [sp, #4]
  403e18:	f7ff fcc8 	bl	4037ac <_fflush_r>
  403e1c:	2800      	cmp	r0, #0
  403e1e:	d1a5      	bne.n	403d6c <__sfvwrite_r+0x134>
  403e20:	f8cd 8008 	str.w	r8, [sp, #8]
  403e24:	e7d2      	b.n	403dcc <__sfvwrite_r+0x194>
  403e26:	6820      	ldr	r0, [r4, #0]
  403e28:	46b8      	mov	r8, r7
  403e2a:	46ba      	mov	sl, r7
  403e2c:	e75c      	b.n	403ce8 <__sfvwrite_r+0xb0>
  403e2e:	464a      	mov	r2, r9
  403e30:	210a      	movs	r1, #10
  403e32:	4650      	mov	r0, sl
  403e34:	f000 fbec 	bl	404610 <memchr>
  403e38:	2800      	cmp	r0, #0
  403e3a:	d06f      	beq.n	403f1c <__sfvwrite_r+0x2e4>
  403e3c:	3001      	adds	r0, #1
  403e3e:	2301      	movs	r3, #1
  403e40:	ebca 0800 	rsb	r8, sl, r0
  403e44:	9302      	str	r3, [sp, #8]
  403e46:	e7a5      	b.n	403d94 <__sfvwrite_r+0x15c>
  403e48:	6962      	ldr	r2, [r4, #20]
  403e4a:	6820      	ldr	r0, [r4, #0]
  403e4c:	6921      	ldr	r1, [r4, #16]
  403e4e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403e52:	ebc1 0a00 	rsb	sl, r1, r0
  403e56:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403e5a:	f10a 0001 	add.w	r0, sl, #1
  403e5e:	ea4f 0868 	mov.w	r8, r8, asr #1
  403e62:	4438      	add	r0, r7
  403e64:	4540      	cmp	r0, r8
  403e66:	4642      	mov	r2, r8
  403e68:	bf84      	itt	hi
  403e6a:	4680      	movhi	r8, r0
  403e6c:	4642      	movhi	r2, r8
  403e6e:	055b      	lsls	r3, r3, #21
  403e70:	d542      	bpl.n	403ef8 <__sfvwrite_r+0x2c0>
  403e72:	4611      	mov	r1, r2
  403e74:	9801      	ldr	r0, [sp, #4]
  403e76:	f000 f911 	bl	40409c <_malloc_r>
  403e7a:	4683      	mov	fp, r0
  403e7c:	2800      	cmp	r0, #0
  403e7e:	d055      	beq.n	403f2c <__sfvwrite_r+0x2f4>
  403e80:	4652      	mov	r2, sl
  403e82:	6921      	ldr	r1, [r4, #16]
  403e84:	f000 fc14 	bl	4046b0 <memcpy>
  403e88:	89a3      	ldrh	r3, [r4, #12]
  403e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403e92:	81a3      	strh	r3, [r4, #12]
  403e94:	ebca 0308 	rsb	r3, sl, r8
  403e98:	eb0b 000a 	add.w	r0, fp, sl
  403e9c:	f8c4 8014 	str.w	r8, [r4, #20]
  403ea0:	f8c4 b010 	str.w	fp, [r4, #16]
  403ea4:	6020      	str	r0, [r4, #0]
  403ea6:	60a3      	str	r3, [r4, #8]
  403ea8:	46b8      	mov	r8, r7
  403eaa:	46ba      	mov	sl, r7
  403eac:	e71c      	b.n	403ce8 <__sfvwrite_r+0xb0>
  403eae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403eb2:	42bb      	cmp	r3, r7
  403eb4:	bf28      	it	cs
  403eb6:	463b      	movcs	r3, r7
  403eb8:	464a      	mov	r2, r9
  403eba:	fb93 f3f1 	sdiv	r3, r3, r1
  403ebe:	9801      	ldr	r0, [sp, #4]
  403ec0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403ec2:	fb01 f303 	mul.w	r3, r1, r3
  403ec6:	69e1      	ldr	r1, [r4, #28]
  403ec8:	47b0      	blx	r6
  403eca:	2800      	cmp	r0, #0
  403ecc:	f73f af18 	bgt.w	403d00 <__sfvwrite_r+0xc8>
  403ed0:	e74c      	b.n	403d6c <__sfvwrite_r+0x134>
  403ed2:	461a      	mov	r2, r3
  403ed4:	4651      	mov	r1, sl
  403ed6:	9303      	str	r3, [sp, #12]
  403ed8:	f000 fc84 	bl	4047e4 <memmove>
  403edc:	6822      	ldr	r2, [r4, #0]
  403ede:	9b03      	ldr	r3, [sp, #12]
  403ee0:	9801      	ldr	r0, [sp, #4]
  403ee2:	441a      	add	r2, r3
  403ee4:	6022      	str	r2, [r4, #0]
  403ee6:	4621      	mov	r1, r4
  403ee8:	f7ff fc60 	bl	4037ac <_fflush_r>
  403eec:	9b03      	ldr	r3, [sp, #12]
  403eee:	2800      	cmp	r0, #0
  403ef0:	f47f af3c 	bne.w	403d6c <__sfvwrite_r+0x134>
  403ef4:	461f      	mov	r7, r3
  403ef6:	e766      	b.n	403dc6 <__sfvwrite_r+0x18e>
  403ef8:	9801      	ldr	r0, [sp, #4]
  403efa:	f000 fcdb 	bl	4048b4 <_realloc_r>
  403efe:	4683      	mov	fp, r0
  403f00:	2800      	cmp	r0, #0
  403f02:	d1c7      	bne.n	403e94 <__sfvwrite_r+0x25c>
  403f04:	9d01      	ldr	r5, [sp, #4]
  403f06:	6921      	ldr	r1, [r4, #16]
  403f08:	4628      	mov	r0, r5
  403f0a:	f7ff fdad 	bl	403a68 <_free_r>
  403f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f12:	220c      	movs	r2, #12
  403f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403f18:	602a      	str	r2, [r5, #0]
  403f1a:	e729      	b.n	403d70 <__sfvwrite_r+0x138>
  403f1c:	2301      	movs	r3, #1
  403f1e:	f109 0801 	add.w	r8, r9, #1
  403f22:	9302      	str	r3, [sp, #8]
  403f24:	e736      	b.n	403d94 <__sfvwrite_r+0x15c>
  403f26:	f04f 30ff 	mov.w	r0, #4294967295
  403f2a:	e6b8      	b.n	403c9e <__sfvwrite_r+0x66>
  403f2c:	9a01      	ldr	r2, [sp, #4]
  403f2e:	230c      	movs	r3, #12
  403f30:	6013      	str	r3, [r2, #0]
  403f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f36:	e71b      	b.n	403d70 <__sfvwrite_r+0x138>
  403f38:	7ffffc00 	.word	0x7ffffc00

00403f3c <_fwalk_reent>:
  403f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403f40:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403f44:	d01f      	beq.n	403f86 <_fwalk_reent+0x4a>
  403f46:	4688      	mov	r8, r1
  403f48:	4606      	mov	r6, r0
  403f4a:	f04f 0900 	mov.w	r9, #0
  403f4e:	687d      	ldr	r5, [r7, #4]
  403f50:	68bc      	ldr	r4, [r7, #8]
  403f52:	3d01      	subs	r5, #1
  403f54:	d411      	bmi.n	403f7a <_fwalk_reent+0x3e>
  403f56:	89a3      	ldrh	r3, [r4, #12]
  403f58:	2b01      	cmp	r3, #1
  403f5a:	f105 35ff 	add.w	r5, r5, #4294967295
  403f5e:	d908      	bls.n	403f72 <_fwalk_reent+0x36>
  403f60:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403f64:	3301      	adds	r3, #1
  403f66:	4621      	mov	r1, r4
  403f68:	4630      	mov	r0, r6
  403f6a:	d002      	beq.n	403f72 <_fwalk_reent+0x36>
  403f6c:	47c0      	blx	r8
  403f6e:	ea49 0900 	orr.w	r9, r9, r0
  403f72:	1c6b      	adds	r3, r5, #1
  403f74:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403f78:	d1ed      	bne.n	403f56 <_fwalk_reent+0x1a>
  403f7a:	683f      	ldr	r7, [r7, #0]
  403f7c:	2f00      	cmp	r7, #0
  403f7e:	d1e6      	bne.n	403f4e <_fwalk_reent+0x12>
  403f80:	4648      	mov	r0, r9
  403f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f86:	46b9      	mov	r9, r7
  403f88:	4648      	mov	r0, r9
  403f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f8e:	bf00      	nop

00403f90 <__locale_charset>:
  403f90:	4800      	ldr	r0, [pc, #0]	; (403f94 <__locale_charset+0x4>)
  403f92:	4770      	bx	lr
  403f94:	2040043c 	.word	0x2040043c

00403f98 <__locale_mb_cur_max>:
  403f98:	4b01      	ldr	r3, [pc, #4]	; (403fa0 <__locale_mb_cur_max+0x8>)
  403f9a:	6818      	ldr	r0, [r3, #0]
  403f9c:	4770      	bx	lr
  403f9e:	bf00      	nop
  403fa0:	2040045c 	.word	0x2040045c

00403fa4 <__swhatbuf_r>:
  403fa4:	b570      	push	{r4, r5, r6, lr}
  403fa6:	460d      	mov	r5, r1
  403fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403fac:	2900      	cmp	r1, #0
  403fae:	b090      	sub	sp, #64	; 0x40
  403fb0:	4614      	mov	r4, r2
  403fb2:	461e      	mov	r6, r3
  403fb4:	db14      	blt.n	403fe0 <__swhatbuf_r+0x3c>
  403fb6:	aa01      	add	r2, sp, #4
  403fb8:	f001 f80c 	bl	404fd4 <_fstat_r>
  403fbc:	2800      	cmp	r0, #0
  403fbe:	db0f      	blt.n	403fe0 <__swhatbuf_r+0x3c>
  403fc0:	9a02      	ldr	r2, [sp, #8]
  403fc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403fc6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403fca:	fab2 f282 	clz	r2, r2
  403fce:	0952      	lsrs	r2, r2, #5
  403fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403fd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403fd8:	6032      	str	r2, [r6, #0]
  403fda:	6023      	str	r3, [r4, #0]
  403fdc:	b010      	add	sp, #64	; 0x40
  403fde:	bd70      	pop	{r4, r5, r6, pc}
  403fe0:	89a8      	ldrh	r0, [r5, #12]
  403fe2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  403fe6:	b282      	uxth	r2, r0
  403fe8:	2000      	movs	r0, #0
  403fea:	6030      	str	r0, [r6, #0]
  403fec:	b11a      	cbz	r2, 403ff6 <__swhatbuf_r+0x52>
  403fee:	2340      	movs	r3, #64	; 0x40
  403ff0:	6023      	str	r3, [r4, #0]
  403ff2:	b010      	add	sp, #64	; 0x40
  403ff4:	bd70      	pop	{r4, r5, r6, pc}
  403ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403ffa:	4610      	mov	r0, r2
  403ffc:	6023      	str	r3, [r4, #0]
  403ffe:	b010      	add	sp, #64	; 0x40
  404000:	bd70      	pop	{r4, r5, r6, pc}
  404002:	bf00      	nop

00404004 <__smakebuf_r>:
  404004:	898a      	ldrh	r2, [r1, #12]
  404006:	0792      	lsls	r2, r2, #30
  404008:	460b      	mov	r3, r1
  40400a:	d506      	bpl.n	40401a <__smakebuf_r+0x16>
  40400c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404010:	2101      	movs	r1, #1
  404012:	601a      	str	r2, [r3, #0]
  404014:	611a      	str	r2, [r3, #16]
  404016:	6159      	str	r1, [r3, #20]
  404018:	4770      	bx	lr
  40401a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40401c:	b083      	sub	sp, #12
  40401e:	ab01      	add	r3, sp, #4
  404020:	466a      	mov	r2, sp
  404022:	460c      	mov	r4, r1
  404024:	4605      	mov	r5, r0
  404026:	f7ff ffbd 	bl	403fa4 <__swhatbuf_r>
  40402a:	9900      	ldr	r1, [sp, #0]
  40402c:	4606      	mov	r6, r0
  40402e:	4628      	mov	r0, r5
  404030:	f000 f834 	bl	40409c <_malloc_r>
  404034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404038:	b1d0      	cbz	r0, 404070 <__smakebuf_r+0x6c>
  40403a:	9a01      	ldr	r2, [sp, #4]
  40403c:	4f12      	ldr	r7, [pc, #72]	; (404088 <__smakebuf_r+0x84>)
  40403e:	9900      	ldr	r1, [sp, #0]
  404040:	63ef      	str	r7, [r5, #60]	; 0x3c
  404042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404046:	81a3      	strh	r3, [r4, #12]
  404048:	6020      	str	r0, [r4, #0]
  40404a:	6120      	str	r0, [r4, #16]
  40404c:	6161      	str	r1, [r4, #20]
  40404e:	b91a      	cbnz	r2, 404058 <__smakebuf_r+0x54>
  404050:	4333      	orrs	r3, r6
  404052:	81a3      	strh	r3, [r4, #12]
  404054:	b003      	add	sp, #12
  404056:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404058:	4628      	mov	r0, r5
  40405a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40405e:	f000 ffcd 	bl	404ffc <_isatty_r>
  404062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404066:	2800      	cmp	r0, #0
  404068:	d0f2      	beq.n	404050 <__smakebuf_r+0x4c>
  40406a:	f043 0301 	orr.w	r3, r3, #1
  40406e:	e7ef      	b.n	404050 <__smakebuf_r+0x4c>
  404070:	059a      	lsls	r2, r3, #22
  404072:	d4ef      	bmi.n	404054 <__smakebuf_r+0x50>
  404074:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404078:	f043 0302 	orr.w	r3, r3, #2
  40407c:	2101      	movs	r1, #1
  40407e:	81a3      	strh	r3, [r4, #12]
  404080:	6022      	str	r2, [r4, #0]
  404082:	6122      	str	r2, [r4, #16]
  404084:	6161      	str	r1, [r4, #20]
  404086:	e7e5      	b.n	404054 <__smakebuf_r+0x50>
  404088:	004037d9 	.word	0x004037d9

0040408c <malloc>:
  40408c:	4b02      	ldr	r3, [pc, #8]	; (404098 <malloc+0xc>)
  40408e:	4601      	mov	r1, r0
  404090:	6818      	ldr	r0, [r3, #0]
  404092:	f000 b803 	b.w	40409c <_malloc_r>
  404096:	bf00      	nop
  404098:	20400438 	.word	0x20400438

0040409c <_malloc_r>:
  40409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040a0:	f101 050b 	add.w	r5, r1, #11
  4040a4:	2d16      	cmp	r5, #22
  4040a6:	b083      	sub	sp, #12
  4040a8:	4606      	mov	r6, r0
  4040aa:	f240 809f 	bls.w	4041ec <_malloc_r+0x150>
  4040ae:	f035 0507 	bics.w	r5, r5, #7
  4040b2:	f100 80bf 	bmi.w	404234 <_malloc_r+0x198>
  4040b6:	42a9      	cmp	r1, r5
  4040b8:	f200 80bc 	bhi.w	404234 <_malloc_r+0x198>
  4040bc:	f000 fbf6 	bl	4048ac <__malloc_lock>
  4040c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4040c4:	f0c0 829c 	bcc.w	404600 <_malloc_r+0x564>
  4040c8:	0a6b      	lsrs	r3, r5, #9
  4040ca:	f000 80ba 	beq.w	404242 <_malloc_r+0x1a6>
  4040ce:	2b04      	cmp	r3, #4
  4040d0:	f200 8183 	bhi.w	4043da <_malloc_r+0x33e>
  4040d4:	09a8      	lsrs	r0, r5, #6
  4040d6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4040da:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4040de:	3038      	adds	r0, #56	; 0x38
  4040e0:	4fc4      	ldr	r7, [pc, #784]	; (4043f4 <_malloc_r+0x358>)
  4040e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4040e6:	f1a3 0108 	sub.w	r1, r3, #8
  4040ea:	685c      	ldr	r4, [r3, #4]
  4040ec:	42a1      	cmp	r1, r4
  4040ee:	d107      	bne.n	404100 <_malloc_r+0x64>
  4040f0:	e0ac      	b.n	40424c <_malloc_r+0x1b0>
  4040f2:	2a00      	cmp	r2, #0
  4040f4:	f280 80ac 	bge.w	404250 <_malloc_r+0x1b4>
  4040f8:	68e4      	ldr	r4, [r4, #12]
  4040fa:	42a1      	cmp	r1, r4
  4040fc:	f000 80a6 	beq.w	40424c <_malloc_r+0x1b0>
  404100:	6863      	ldr	r3, [r4, #4]
  404102:	f023 0303 	bic.w	r3, r3, #3
  404106:	1b5a      	subs	r2, r3, r5
  404108:	2a0f      	cmp	r2, #15
  40410a:	ddf2      	ble.n	4040f2 <_malloc_r+0x56>
  40410c:	49b9      	ldr	r1, [pc, #740]	; (4043f4 <_malloc_r+0x358>)
  40410e:	693c      	ldr	r4, [r7, #16]
  404110:	f101 0e08 	add.w	lr, r1, #8
  404114:	4574      	cmp	r4, lr
  404116:	f000 81b3 	beq.w	404480 <_malloc_r+0x3e4>
  40411a:	6863      	ldr	r3, [r4, #4]
  40411c:	f023 0303 	bic.w	r3, r3, #3
  404120:	1b5a      	subs	r2, r3, r5
  404122:	2a0f      	cmp	r2, #15
  404124:	f300 8199 	bgt.w	40445a <_malloc_r+0x3be>
  404128:	2a00      	cmp	r2, #0
  40412a:	f8c1 e014 	str.w	lr, [r1, #20]
  40412e:	f8c1 e010 	str.w	lr, [r1, #16]
  404132:	f280 809e 	bge.w	404272 <_malloc_r+0x1d6>
  404136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40413a:	f080 8167 	bcs.w	40440c <_malloc_r+0x370>
  40413e:	08db      	lsrs	r3, r3, #3
  404140:	f103 0c01 	add.w	ip, r3, #1
  404144:	2201      	movs	r2, #1
  404146:	109b      	asrs	r3, r3, #2
  404148:	fa02 f303 	lsl.w	r3, r2, r3
  40414c:	684a      	ldr	r2, [r1, #4]
  40414e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  404152:	f8c4 8008 	str.w	r8, [r4, #8]
  404156:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40415a:	431a      	orrs	r2, r3
  40415c:	f1a9 0308 	sub.w	r3, r9, #8
  404160:	60e3      	str	r3, [r4, #12]
  404162:	604a      	str	r2, [r1, #4]
  404164:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  404168:	f8c8 400c 	str.w	r4, [r8, #12]
  40416c:	1083      	asrs	r3, r0, #2
  40416e:	2401      	movs	r4, #1
  404170:	409c      	lsls	r4, r3
  404172:	4294      	cmp	r4, r2
  404174:	f200 808a 	bhi.w	40428c <_malloc_r+0x1f0>
  404178:	4214      	tst	r4, r2
  40417a:	d106      	bne.n	40418a <_malloc_r+0xee>
  40417c:	f020 0003 	bic.w	r0, r0, #3
  404180:	0064      	lsls	r4, r4, #1
  404182:	4214      	tst	r4, r2
  404184:	f100 0004 	add.w	r0, r0, #4
  404188:	d0fa      	beq.n	404180 <_malloc_r+0xe4>
  40418a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40418e:	46cc      	mov	ip, r9
  404190:	4680      	mov	r8, r0
  404192:	f8dc 100c 	ldr.w	r1, [ip, #12]
  404196:	458c      	cmp	ip, r1
  404198:	d107      	bne.n	4041aa <_malloc_r+0x10e>
  40419a:	e173      	b.n	404484 <_malloc_r+0x3e8>
  40419c:	2a00      	cmp	r2, #0
  40419e:	f280 8181 	bge.w	4044a4 <_malloc_r+0x408>
  4041a2:	68c9      	ldr	r1, [r1, #12]
  4041a4:	458c      	cmp	ip, r1
  4041a6:	f000 816d 	beq.w	404484 <_malloc_r+0x3e8>
  4041aa:	684b      	ldr	r3, [r1, #4]
  4041ac:	f023 0303 	bic.w	r3, r3, #3
  4041b0:	1b5a      	subs	r2, r3, r5
  4041b2:	2a0f      	cmp	r2, #15
  4041b4:	ddf2      	ble.n	40419c <_malloc_r+0x100>
  4041b6:	460c      	mov	r4, r1
  4041b8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4041bc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4041c0:	194b      	adds	r3, r1, r5
  4041c2:	f045 0501 	orr.w	r5, r5, #1
  4041c6:	604d      	str	r5, [r1, #4]
  4041c8:	f042 0101 	orr.w	r1, r2, #1
  4041cc:	f8c8 c00c 	str.w	ip, [r8, #12]
  4041d0:	4630      	mov	r0, r6
  4041d2:	f8cc 8008 	str.w	r8, [ip, #8]
  4041d6:	617b      	str	r3, [r7, #20]
  4041d8:	613b      	str	r3, [r7, #16]
  4041da:	f8c3 e00c 	str.w	lr, [r3, #12]
  4041de:	f8c3 e008 	str.w	lr, [r3, #8]
  4041e2:	6059      	str	r1, [r3, #4]
  4041e4:	509a      	str	r2, [r3, r2]
  4041e6:	f000 fb63 	bl	4048b0 <__malloc_unlock>
  4041ea:	e01f      	b.n	40422c <_malloc_r+0x190>
  4041ec:	2910      	cmp	r1, #16
  4041ee:	d821      	bhi.n	404234 <_malloc_r+0x198>
  4041f0:	f000 fb5c 	bl	4048ac <__malloc_lock>
  4041f4:	2510      	movs	r5, #16
  4041f6:	2306      	movs	r3, #6
  4041f8:	2002      	movs	r0, #2
  4041fa:	4f7e      	ldr	r7, [pc, #504]	; (4043f4 <_malloc_r+0x358>)
  4041fc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404200:	f1a3 0208 	sub.w	r2, r3, #8
  404204:	685c      	ldr	r4, [r3, #4]
  404206:	4294      	cmp	r4, r2
  404208:	f000 8145 	beq.w	404496 <_malloc_r+0x3fa>
  40420c:	6863      	ldr	r3, [r4, #4]
  40420e:	68e1      	ldr	r1, [r4, #12]
  404210:	68a5      	ldr	r5, [r4, #8]
  404212:	f023 0303 	bic.w	r3, r3, #3
  404216:	4423      	add	r3, r4
  404218:	4630      	mov	r0, r6
  40421a:	685a      	ldr	r2, [r3, #4]
  40421c:	60e9      	str	r1, [r5, #12]
  40421e:	f042 0201 	orr.w	r2, r2, #1
  404222:	608d      	str	r5, [r1, #8]
  404224:	605a      	str	r2, [r3, #4]
  404226:	f000 fb43 	bl	4048b0 <__malloc_unlock>
  40422a:	3408      	adds	r4, #8
  40422c:	4620      	mov	r0, r4
  40422e:	b003      	add	sp, #12
  404230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404234:	2400      	movs	r4, #0
  404236:	230c      	movs	r3, #12
  404238:	4620      	mov	r0, r4
  40423a:	6033      	str	r3, [r6, #0]
  40423c:	b003      	add	sp, #12
  40423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404242:	2380      	movs	r3, #128	; 0x80
  404244:	f04f 0e40 	mov.w	lr, #64	; 0x40
  404248:	203f      	movs	r0, #63	; 0x3f
  40424a:	e749      	b.n	4040e0 <_malloc_r+0x44>
  40424c:	4670      	mov	r0, lr
  40424e:	e75d      	b.n	40410c <_malloc_r+0x70>
  404250:	4423      	add	r3, r4
  404252:	68e1      	ldr	r1, [r4, #12]
  404254:	685a      	ldr	r2, [r3, #4]
  404256:	68a5      	ldr	r5, [r4, #8]
  404258:	f042 0201 	orr.w	r2, r2, #1
  40425c:	60e9      	str	r1, [r5, #12]
  40425e:	4630      	mov	r0, r6
  404260:	608d      	str	r5, [r1, #8]
  404262:	605a      	str	r2, [r3, #4]
  404264:	f000 fb24 	bl	4048b0 <__malloc_unlock>
  404268:	3408      	adds	r4, #8
  40426a:	4620      	mov	r0, r4
  40426c:	b003      	add	sp, #12
  40426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404272:	4423      	add	r3, r4
  404274:	4630      	mov	r0, r6
  404276:	685a      	ldr	r2, [r3, #4]
  404278:	f042 0201 	orr.w	r2, r2, #1
  40427c:	605a      	str	r2, [r3, #4]
  40427e:	f000 fb17 	bl	4048b0 <__malloc_unlock>
  404282:	3408      	adds	r4, #8
  404284:	4620      	mov	r0, r4
  404286:	b003      	add	sp, #12
  404288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40428c:	68bc      	ldr	r4, [r7, #8]
  40428e:	6863      	ldr	r3, [r4, #4]
  404290:	f023 0803 	bic.w	r8, r3, #3
  404294:	45a8      	cmp	r8, r5
  404296:	d304      	bcc.n	4042a2 <_malloc_r+0x206>
  404298:	ebc5 0308 	rsb	r3, r5, r8
  40429c:	2b0f      	cmp	r3, #15
  40429e:	f300 808c 	bgt.w	4043ba <_malloc_r+0x31e>
  4042a2:	4b55      	ldr	r3, [pc, #340]	; (4043f8 <_malloc_r+0x35c>)
  4042a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404408 <_malloc_r+0x36c>
  4042a8:	681a      	ldr	r2, [r3, #0]
  4042aa:	f8d9 3000 	ldr.w	r3, [r9]
  4042ae:	3301      	adds	r3, #1
  4042b0:	442a      	add	r2, r5
  4042b2:	eb04 0a08 	add.w	sl, r4, r8
  4042b6:	f000 8160 	beq.w	40457a <_malloc_r+0x4de>
  4042ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4042be:	320f      	adds	r2, #15
  4042c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4042c4:	f022 020f 	bic.w	r2, r2, #15
  4042c8:	4611      	mov	r1, r2
  4042ca:	4630      	mov	r0, r6
  4042cc:	9201      	str	r2, [sp, #4]
  4042ce:	f000 fce1 	bl	404c94 <_sbrk_r>
  4042d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4042d6:	4683      	mov	fp, r0
  4042d8:	9a01      	ldr	r2, [sp, #4]
  4042da:	f000 8158 	beq.w	40458e <_malloc_r+0x4f2>
  4042de:	4582      	cmp	sl, r0
  4042e0:	f200 80fc 	bhi.w	4044dc <_malloc_r+0x440>
  4042e4:	4b45      	ldr	r3, [pc, #276]	; (4043fc <_malloc_r+0x360>)
  4042e6:	6819      	ldr	r1, [r3, #0]
  4042e8:	45da      	cmp	sl, fp
  4042ea:	4411      	add	r1, r2
  4042ec:	6019      	str	r1, [r3, #0]
  4042ee:	f000 8153 	beq.w	404598 <_malloc_r+0x4fc>
  4042f2:	f8d9 0000 	ldr.w	r0, [r9]
  4042f6:	f8df e110 	ldr.w	lr, [pc, #272]	; 404408 <_malloc_r+0x36c>
  4042fa:	3001      	adds	r0, #1
  4042fc:	bf1b      	ittet	ne
  4042fe:	ebca 0a0b 	rsbne	sl, sl, fp
  404302:	4451      	addne	r1, sl
  404304:	f8ce b000 	streq.w	fp, [lr]
  404308:	6019      	strne	r1, [r3, #0]
  40430a:	f01b 0107 	ands.w	r1, fp, #7
  40430e:	f000 8117 	beq.w	404540 <_malloc_r+0x4a4>
  404312:	f1c1 0008 	rsb	r0, r1, #8
  404316:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40431a:	4483      	add	fp, r0
  40431c:	3108      	adds	r1, #8
  40431e:	445a      	add	r2, fp
  404320:	f3c2 020b 	ubfx	r2, r2, #0, #12
  404324:	ebc2 0901 	rsb	r9, r2, r1
  404328:	4649      	mov	r1, r9
  40432a:	4630      	mov	r0, r6
  40432c:	9301      	str	r3, [sp, #4]
  40432e:	f000 fcb1 	bl	404c94 <_sbrk_r>
  404332:	1c43      	adds	r3, r0, #1
  404334:	9b01      	ldr	r3, [sp, #4]
  404336:	f000 813f 	beq.w	4045b8 <_malloc_r+0x51c>
  40433a:	ebcb 0200 	rsb	r2, fp, r0
  40433e:	444a      	add	r2, r9
  404340:	f042 0201 	orr.w	r2, r2, #1
  404344:	6819      	ldr	r1, [r3, #0]
  404346:	f8c7 b008 	str.w	fp, [r7, #8]
  40434a:	4449      	add	r1, r9
  40434c:	42bc      	cmp	r4, r7
  40434e:	f8cb 2004 	str.w	r2, [fp, #4]
  404352:	6019      	str	r1, [r3, #0]
  404354:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4043fc <_malloc_r+0x360>
  404358:	d016      	beq.n	404388 <_malloc_r+0x2ec>
  40435a:	f1b8 0f0f 	cmp.w	r8, #15
  40435e:	f240 80fd 	bls.w	40455c <_malloc_r+0x4c0>
  404362:	6862      	ldr	r2, [r4, #4]
  404364:	f1a8 030c 	sub.w	r3, r8, #12
  404368:	f023 0307 	bic.w	r3, r3, #7
  40436c:	18e0      	adds	r0, r4, r3
  40436e:	f002 0201 	and.w	r2, r2, #1
  404372:	f04f 0e05 	mov.w	lr, #5
  404376:	431a      	orrs	r2, r3
  404378:	2b0f      	cmp	r3, #15
  40437a:	6062      	str	r2, [r4, #4]
  40437c:	f8c0 e004 	str.w	lr, [r0, #4]
  404380:	f8c0 e008 	str.w	lr, [r0, #8]
  404384:	f200 811c 	bhi.w	4045c0 <_malloc_r+0x524>
  404388:	4b1d      	ldr	r3, [pc, #116]	; (404400 <_malloc_r+0x364>)
  40438a:	68bc      	ldr	r4, [r7, #8]
  40438c:	681a      	ldr	r2, [r3, #0]
  40438e:	4291      	cmp	r1, r2
  404390:	bf88      	it	hi
  404392:	6019      	strhi	r1, [r3, #0]
  404394:	4b1b      	ldr	r3, [pc, #108]	; (404404 <_malloc_r+0x368>)
  404396:	681a      	ldr	r2, [r3, #0]
  404398:	4291      	cmp	r1, r2
  40439a:	6862      	ldr	r2, [r4, #4]
  40439c:	bf88      	it	hi
  40439e:	6019      	strhi	r1, [r3, #0]
  4043a0:	f022 0203 	bic.w	r2, r2, #3
  4043a4:	4295      	cmp	r5, r2
  4043a6:	eba2 0305 	sub.w	r3, r2, r5
  4043aa:	d801      	bhi.n	4043b0 <_malloc_r+0x314>
  4043ac:	2b0f      	cmp	r3, #15
  4043ae:	dc04      	bgt.n	4043ba <_malloc_r+0x31e>
  4043b0:	4630      	mov	r0, r6
  4043b2:	f000 fa7d 	bl	4048b0 <__malloc_unlock>
  4043b6:	2400      	movs	r4, #0
  4043b8:	e738      	b.n	40422c <_malloc_r+0x190>
  4043ba:	1962      	adds	r2, r4, r5
  4043bc:	f043 0301 	orr.w	r3, r3, #1
  4043c0:	f045 0501 	orr.w	r5, r5, #1
  4043c4:	6065      	str	r5, [r4, #4]
  4043c6:	4630      	mov	r0, r6
  4043c8:	60ba      	str	r2, [r7, #8]
  4043ca:	6053      	str	r3, [r2, #4]
  4043cc:	f000 fa70 	bl	4048b0 <__malloc_unlock>
  4043d0:	3408      	adds	r4, #8
  4043d2:	4620      	mov	r0, r4
  4043d4:	b003      	add	sp, #12
  4043d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043da:	2b14      	cmp	r3, #20
  4043dc:	d971      	bls.n	4044c2 <_malloc_r+0x426>
  4043de:	2b54      	cmp	r3, #84	; 0x54
  4043e0:	f200 80a4 	bhi.w	40452c <_malloc_r+0x490>
  4043e4:	0b28      	lsrs	r0, r5, #12
  4043e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4043ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4043ee:	306e      	adds	r0, #110	; 0x6e
  4043f0:	e676      	b.n	4040e0 <_malloc_r+0x44>
  4043f2:	bf00      	nop
  4043f4:	20400460 	.word	0x20400460
  4043f8:	20400918 	.word	0x20400918
  4043fc:	2040091c 	.word	0x2040091c
  404400:	20400914 	.word	0x20400914
  404404:	20400910 	.word	0x20400910
  404408:	2040086c 	.word	0x2040086c
  40440c:	0a5a      	lsrs	r2, r3, #9
  40440e:	2a04      	cmp	r2, #4
  404410:	d95e      	bls.n	4044d0 <_malloc_r+0x434>
  404412:	2a14      	cmp	r2, #20
  404414:	f200 80b3 	bhi.w	40457e <_malloc_r+0x4e2>
  404418:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40441c:	0049      	lsls	r1, r1, #1
  40441e:	325b      	adds	r2, #91	; 0x5b
  404420:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  404424:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404428:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 404608 <_malloc_r+0x56c>
  40442c:	f1ac 0c08 	sub.w	ip, ip, #8
  404430:	458c      	cmp	ip, r1
  404432:	f000 8088 	beq.w	404546 <_malloc_r+0x4aa>
  404436:	684a      	ldr	r2, [r1, #4]
  404438:	f022 0203 	bic.w	r2, r2, #3
  40443c:	4293      	cmp	r3, r2
  40443e:	d202      	bcs.n	404446 <_malloc_r+0x3aa>
  404440:	6889      	ldr	r1, [r1, #8]
  404442:	458c      	cmp	ip, r1
  404444:	d1f7      	bne.n	404436 <_malloc_r+0x39a>
  404446:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40444a:	687a      	ldr	r2, [r7, #4]
  40444c:	f8c4 c00c 	str.w	ip, [r4, #12]
  404450:	60a1      	str	r1, [r4, #8]
  404452:	f8cc 4008 	str.w	r4, [ip, #8]
  404456:	60cc      	str	r4, [r1, #12]
  404458:	e688      	b.n	40416c <_malloc_r+0xd0>
  40445a:	1963      	adds	r3, r4, r5
  40445c:	f042 0701 	orr.w	r7, r2, #1
  404460:	f045 0501 	orr.w	r5, r5, #1
  404464:	6065      	str	r5, [r4, #4]
  404466:	4630      	mov	r0, r6
  404468:	614b      	str	r3, [r1, #20]
  40446a:	610b      	str	r3, [r1, #16]
  40446c:	f8c3 e00c 	str.w	lr, [r3, #12]
  404470:	f8c3 e008 	str.w	lr, [r3, #8]
  404474:	605f      	str	r7, [r3, #4]
  404476:	509a      	str	r2, [r3, r2]
  404478:	3408      	adds	r4, #8
  40447a:	f000 fa19 	bl	4048b0 <__malloc_unlock>
  40447e:	e6d5      	b.n	40422c <_malloc_r+0x190>
  404480:	684a      	ldr	r2, [r1, #4]
  404482:	e673      	b.n	40416c <_malloc_r+0xd0>
  404484:	f108 0801 	add.w	r8, r8, #1
  404488:	f018 0f03 	tst.w	r8, #3
  40448c:	f10c 0c08 	add.w	ip, ip, #8
  404490:	f47f ae7f 	bne.w	404192 <_malloc_r+0xf6>
  404494:	e030      	b.n	4044f8 <_malloc_r+0x45c>
  404496:	68dc      	ldr	r4, [r3, #12]
  404498:	42a3      	cmp	r3, r4
  40449a:	bf08      	it	eq
  40449c:	3002      	addeq	r0, #2
  40449e:	f43f ae35 	beq.w	40410c <_malloc_r+0x70>
  4044a2:	e6b3      	b.n	40420c <_malloc_r+0x170>
  4044a4:	440b      	add	r3, r1
  4044a6:	460c      	mov	r4, r1
  4044a8:	685a      	ldr	r2, [r3, #4]
  4044aa:	68c9      	ldr	r1, [r1, #12]
  4044ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4044b0:	f042 0201 	orr.w	r2, r2, #1
  4044b4:	605a      	str	r2, [r3, #4]
  4044b6:	4630      	mov	r0, r6
  4044b8:	60e9      	str	r1, [r5, #12]
  4044ba:	608d      	str	r5, [r1, #8]
  4044bc:	f000 f9f8 	bl	4048b0 <__malloc_unlock>
  4044c0:	e6b4      	b.n	40422c <_malloc_r+0x190>
  4044c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4044c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4044ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4044ce:	e607      	b.n	4040e0 <_malloc_r+0x44>
  4044d0:	099a      	lsrs	r2, r3, #6
  4044d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4044d6:	0049      	lsls	r1, r1, #1
  4044d8:	3238      	adds	r2, #56	; 0x38
  4044da:	e7a1      	b.n	404420 <_malloc_r+0x384>
  4044dc:	42bc      	cmp	r4, r7
  4044de:	4b4a      	ldr	r3, [pc, #296]	; (404608 <_malloc_r+0x56c>)
  4044e0:	f43f af00 	beq.w	4042e4 <_malloc_r+0x248>
  4044e4:	689c      	ldr	r4, [r3, #8]
  4044e6:	6862      	ldr	r2, [r4, #4]
  4044e8:	f022 0203 	bic.w	r2, r2, #3
  4044ec:	e75a      	b.n	4043a4 <_malloc_r+0x308>
  4044ee:	f859 3908 	ldr.w	r3, [r9], #-8
  4044f2:	4599      	cmp	r9, r3
  4044f4:	f040 8082 	bne.w	4045fc <_malloc_r+0x560>
  4044f8:	f010 0f03 	tst.w	r0, #3
  4044fc:	f100 30ff 	add.w	r0, r0, #4294967295
  404500:	d1f5      	bne.n	4044ee <_malloc_r+0x452>
  404502:	687b      	ldr	r3, [r7, #4]
  404504:	ea23 0304 	bic.w	r3, r3, r4
  404508:	607b      	str	r3, [r7, #4]
  40450a:	0064      	lsls	r4, r4, #1
  40450c:	429c      	cmp	r4, r3
  40450e:	f63f aebd 	bhi.w	40428c <_malloc_r+0x1f0>
  404512:	2c00      	cmp	r4, #0
  404514:	f43f aeba 	beq.w	40428c <_malloc_r+0x1f0>
  404518:	421c      	tst	r4, r3
  40451a:	4640      	mov	r0, r8
  40451c:	f47f ae35 	bne.w	40418a <_malloc_r+0xee>
  404520:	0064      	lsls	r4, r4, #1
  404522:	421c      	tst	r4, r3
  404524:	f100 0004 	add.w	r0, r0, #4
  404528:	d0fa      	beq.n	404520 <_malloc_r+0x484>
  40452a:	e62e      	b.n	40418a <_malloc_r+0xee>
  40452c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404530:	d818      	bhi.n	404564 <_malloc_r+0x4c8>
  404532:	0be8      	lsrs	r0, r5, #15
  404534:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404538:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40453c:	3077      	adds	r0, #119	; 0x77
  40453e:	e5cf      	b.n	4040e0 <_malloc_r+0x44>
  404540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404544:	e6eb      	b.n	40431e <_malloc_r+0x282>
  404546:	2101      	movs	r1, #1
  404548:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40454c:	1092      	asrs	r2, r2, #2
  40454e:	fa01 f202 	lsl.w	r2, r1, r2
  404552:	431a      	orrs	r2, r3
  404554:	f8c8 2004 	str.w	r2, [r8, #4]
  404558:	4661      	mov	r1, ip
  40455a:	e777      	b.n	40444c <_malloc_r+0x3b0>
  40455c:	2301      	movs	r3, #1
  40455e:	f8cb 3004 	str.w	r3, [fp, #4]
  404562:	e725      	b.n	4043b0 <_malloc_r+0x314>
  404564:	f240 5254 	movw	r2, #1364	; 0x554
  404568:	4293      	cmp	r3, r2
  40456a:	d820      	bhi.n	4045ae <_malloc_r+0x512>
  40456c:	0ca8      	lsrs	r0, r5, #18
  40456e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404572:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404576:	307c      	adds	r0, #124	; 0x7c
  404578:	e5b2      	b.n	4040e0 <_malloc_r+0x44>
  40457a:	3210      	adds	r2, #16
  40457c:	e6a4      	b.n	4042c8 <_malloc_r+0x22c>
  40457e:	2a54      	cmp	r2, #84	; 0x54
  404580:	d826      	bhi.n	4045d0 <_malloc_r+0x534>
  404582:	0b1a      	lsrs	r2, r3, #12
  404584:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404588:	0049      	lsls	r1, r1, #1
  40458a:	326e      	adds	r2, #110	; 0x6e
  40458c:	e748      	b.n	404420 <_malloc_r+0x384>
  40458e:	68bc      	ldr	r4, [r7, #8]
  404590:	6862      	ldr	r2, [r4, #4]
  404592:	f022 0203 	bic.w	r2, r2, #3
  404596:	e705      	b.n	4043a4 <_malloc_r+0x308>
  404598:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40459c:	2800      	cmp	r0, #0
  40459e:	f47f aea8 	bne.w	4042f2 <_malloc_r+0x256>
  4045a2:	4442      	add	r2, r8
  4045a4:	68bb      	ldr	r3, [r7, #8]
  4045a6:	f042 0201 	orr.w	r2, r2, #1
  4045aa:	605a      	str	r2, [r3, #4]
  4045ac:	e6ec      	b.n	404388 <_malloc_r+0x2ec>
  4045ae:	23fe      	movs	r3, #254	; 0xfe
  4045b0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4045b4:	207e      	movs	r0, #126	; 0x7e
  4045b6:	e593      	b.n	4040e0 <_malloc_r+0x44>
  4045b8:	2201      	movs	r2, #1
  4045ba:	f04f 0900 	mov.w	r9, #0
  4045be:	e6c1      	b.n	404344 <_malloc_r+0x2a8>
  4045c0:	f104 0108 	add.w	r1, r4, #8
  4045c4:	4630      	mov	r0, r6
  4045c6:	f7ff fa4f 	bl	403a68 <_free_r>
  4045ca:	f8d9 1000 	ldr.w	r1, [r9]
  4045ce:	e6db      	b.n	404388 <_malloc_r+0x2ec>
  4045d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4045d4:	d805      	bhi.n	4045e2 <_malloc_r+0x546>
  4045d6:	0bda      	lsrs	r2, r3, #15
  4045d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4045dc:	0049      	lsls	r1, r1, #1
  4045de:	3277      	adds	r2, #119	; 0x77
  4045e0:	e71e      	b.n	404420 <_malloc_r+0x384>
  4045e2:	f240 5154 	movw	r1, #1364	; 0x554
  4045e6:	428a      	cmp	r2, r1
  4045e8:	d805      	bhi.n	4045f6 <_malloc_r+0x55a>
  4045ea:	0c9a      	lsrs	r2, r3, #18
  4045ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4045f0:	0049      	lsls	r1, r1, #1
  4045f2:	327c      	adds	r2, #124	; 0x7c
  4045f4:	e714      	b.n	404420 <_malloc_r+0x384>
  4045f6:	21fe      	movs	r1, #254	; 0xfe
  4045f8:	227e      	movs	r2, #126	; 0x7e
  4045fa:	e711      	b.n	404420 <_malloc_r+0x384>
  4045fc:	687b      	ldr	r3, [r7, #4]
  4045fe:	e784      	b.n	40450a <_malloc_r+0x46e>
  404600:	08e8      	lsrs	r0, r5, #3
  404602:	1c43      	adds	r3, r0, #1
  404604:	005b      	lsls	r3, r3, #1
  404606:	e5f8      	b.n	4041fa <_malloc_r+0x15e>
  404608:	20400460 	.word	0x20400460
  40460c:	00000000 	.word	0x00000000

00404610 <memchr>:
  404610:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404614:	2a10      	cmp	r2, #16
  404616:	db2b      	blt.n	404670 <memchr+0x60>
  404618:	f010 0f07 	tst.w	r0, #7
  40461c:	d008      	beq.n	404630 <memchr+0x20>
  40461e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404622:	3a01      	subs	r2, #1
  404624:	428b      	cmp	r3, r1
  404626:	d02d      	beq.n	404684 <memchr+0x74>
  404628:	f010 0f07 	tst.w	r0, #7
  40462c:	b342      	cbz	r2, 404680 <memchr+0x70>
  40462e:	d1f6      	bne.n	40461e <memchr+0xe>
  404630:	b4f0      	push	{r4, r5, r6, r7}
  404632:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404636:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40463a:	f022 0407 	bic.w	r4, r2, #7
  40463e:	f07f 0700 	mvns.w	r7, #0
  404642:	2300      	movs	r3, #0
  404644:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404648:	3c08      	subs	r4, #8
  40464a:	ea85 0501 	eor.w	r5, r5, r1
  40464e:	ea86 0601 	eor.w	r6, r6, r1
  404652:	fa85 f547 	uadd8	r5, r5, r7
  404656:	faa3 f587 	sel	r5, r3, r7
  40465a:	fa86 f647 	uadd8	r6, r6, r7
  40465e:	faa5 f687 	sel	r6, r5, r7
  404662:	b98e      	cbnz	r6, 404688 <memchr+0x78>
  404664:	d1ee      	bne.n	404644 <memchr+0x34>
  404666:	bcf0      	pop	{r4, r5, r6, r7}
  404668:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40466c:	f002 0207 	and.w	r2, r2, #7
  404670:	b132      	cbz	r2, 404680 <memchr+0x70>
  404672:	f810 3b01 	ldrb.w	r3, [r0], #1
  404676:	3a01      	subs	r2, #1
  404678:	ea83 0301 	eor.w	r3, r3, r1
  40467c:	b113      	cbz	r3, 404684 <memchr+0x74>
  40467e:	d1f8      	bne.n	404672 <memchr+0x62>
  404680:	2000      	movs	r0, #0
  404682:	4770      	bx	lr
  404684:	3801      	subs	r0, #1
  404686:	4770      	bx	lr
  404688:	2d00      	cmp	r5, #0
  40468a:	bf06      	itte	eq
  40468c:	4635      	moveq	r5, r6
  40468e:	3803      	subeq	r0, #3
  404690:	3807      	subne	r0, #7
  404692:	f015 0f01 	tst.w	r5, #1
  404696:	d107      	bne.n	4046a8 <memchr+0x98>
  404698:	3001      	adds	r0, #1
  40469a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40469e:	bf02      	ittt	eq
  4046a0:	3001      	addeq	r0, #1
  4046a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4046a6:	3001      	addeq	r0, #1
  4046a8:	bcf0      	pop	{r4, r5, r6, r7}
  4046aa:	3801      	subs	r0, #1
  4046ac:	4770      	bx	lr
  4046ae:	bf00      	nop

004046b0 <memcpy>:
  4046b0:	4684      	mov	ip, r0
  4046b2:	ea41 0300 	orr.w	r3, r1, r0
  4046b6:	f013 0303 	ands.w	r3, r3, #3
  4046ba:	d16d      	bne.n	404798 <memcpy+0xe8>
  4046bc:	3a40      	subs	r2, #64	; 0x40
  4046be:	d341      	bcc.n	404744 <memcpy+0x94>
  4046c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c4:	f840 3b04 	str.w	r3, [r0], #4
  4046c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046cc:	f840 3b04 	str.w	r3, [r0], #4
  4046d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046d4:	f840 3b04 	str.w	r3, [r0], #4
  4046d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046dc:	f840 3b04 	str.w	r3, [r0], #4
  4046e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046e4:	f840 3b04 	str.w	r3, [r0], #4
  4046e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046ec:	f840 3b04 	str.w	r3, [r0], #4
  4046f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046f4:	f840 3b04 	str.w	r3, [r0], #4
  4046f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046fc:	f840 3b04 	str.w	r3, [r0], #4
  404700:	f851 3b04 	ldr.w	r3, [r1], #4
  404704:	f840 3b04 	str.w	r3, [r0], #4
  404708:	f851 3b04 	ldr.w	r3, [r1], #4
  40470c:	f840 3b04 	str.w	r3, [r0], #4
  404710:	f851 3b04 	ldr.w	r3, [r1], #4
  404714:	f840 3b04 	str.w	r3, [r0], #4
  404718:	f851 3b04 	ldr.w	r3, [r1], #4
  40471c:	f840 3b04 	str.w	r3, [r0], #4
  404720:	f851 3b04 	ldr.w	r3, [r1], #4
  404724:	f840 3b04 	str.w	r3, [r0], #4
  404728:	f851 3b04 	ldr.w	r3, [r1], #4
  40472c:	f840 3b04 	str.w	r3, [r0], #4
  404730:	f851 3b04 	ldr.w	r3, [r1], #4
  404734:	f840 3b04 	str.w	r3, [r0], #4
  404738:	f851 3b04 	ldr.w	r3, [r1], #4
  40473c:	f840 3b04 	str.w	r3, [r0], #4
  404740:	3a40      	subs	r2, #64	; 0x40
  404742:	d2bd      	bcs.n	4046c0 <memcpy+0x10>
  404744:	3230      	adds	r2, #48	; 0x30
  404746:	d311      	bcc.n	40476c <memcpy+0xbc>
  404748:	f851 3b04 	ldr.w	r3, [r1], #4
  40474c:	f840 3b04 	str.w	r3, [r0], #4
  404750:	f851 3b04 	ldr.w	r3, [r1], #4
  404754:	f840 3b04 	str.w	r3, [r0], #4
  404758:	f851 3b04 	ldr.w	r3, [r1], #4
  40475c:	f840 3b04 	str.w	r3, [r0], #4
  404760:	f851 3b04 	ldr.w	r3, [r1], #4
  404764:	f840 3b04 	str.w	r3, [r0], #4
  404768:	3a10      	subs	r2, #16
  40476a:	d2ed      	bcs.n	404748 <memcpy+0x98>
  40476c:	320c      	adds	r2, #12
  40476e:	d305      	bcc.n	40477c <memcpy+0xcc>
  404770:	f851 3b04 	ldr.w	r3, [r1], #4
  404774:	f840 3b04 	str.w	r3, [r0], #4
  404778:	3a04      	subs	r2, #4
  40477a:	d2f9      	bcs.n	404770 <memcpy+0xc0>
  40477c:	3204      	adds	r2, #4
  40477e:	d008      	beq.n	404792 <memcpy+0xe2>
  404780:	07d2      	lsls	r2, r2, #31
  404782:	bf1c      	itt	ne
  404784:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404788:	f800 3b01 	strbne.w	r3, [r0], #1
  40478c:	d301      	bcc.n	404792 <memcpy+0xe2>
  40478e:	880b      	ldrh	r3, [r1, #0]
  404790:	8003      	strh	r3, [r0, #0]
  404792:	4660      	mov	r0, ip
  404794:	4770      	bx	lr
  404796:	bf00      	nop
  404798:	2a08      	cmp	r2, #8
  40479a:	d313      	bcc.n	4047c4 <memcpy+0x114>
  40479c:	078b      	lsls	r3, r1, #30
  40479e:	d08d      	beq.n	4046bc <memcpy+0xc>
  4047a0:	f010 0303 	ands.w	r3, r0, #3
  4047a4:	d08a      	beq.n	4046bc <memcpy+0xc>
  4047a6:	f1c3 0304 	rsb	r3, r3, #4
  4047aa:	1ad2      	subs	r2, r2, r3
  4047ac:	07db      	lsls	r3, r3, #31
  4047ae:	bf1c      	itt	ne
  4047b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4047b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4047b8:	d380      	bcc.n	4046bc <memcpy+0xc>
  4047ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4047be:	f820 3b02 	strh.w	r3, [r0], #2
  4047c2:	e77b      	b.n	4046bc <memcpy+0xc>
  4047c4:	3a04      	subs	r2, #4
  4047c6:	d3d9      	bcc.n	40477c <memcpy+0xcc>
  4047c8:	3a01      	subs	r2, #1
  4047ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4047ce:	f800 3b01 	strb.w	r3, [r0], #1
  4047d2:	d2f9      	bcs.n	4047c8 <memcpy+0x118>
  4047d4:	780b      	ldrb	r3, [r1, #0]
  4047d6:	7003      	strb	r3, [r0, #0]
  4047d8:	784b      	ldrb	r3, [r1, #1]
  4047da:	7043      	strb	r3, [r0, #1]
  4047dc:	788b      	ldrb	r3, [r1, #2]
  4047de:	7083      	strb	r3, [r0, #2]
  4047e0:	4660      	mov	r0, ip
  4047e2:	4770      	bx	lr

004047e4 <memmove>:
  4047e4:	4288      	cmp	r0, r1
  4047e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047e8:	d90d      	bls.n	404806 <memmove+0x22>
  4047ea:	188b      	adds	r3, r1, r2
  4047ec:	4298      	cmp	r0, r3
  4047ee:	d20a      	bcs.n	404806 <memmove+0x22>
  4047f0:	1881      	adds	r1, r0, r2
  4047f2:	2a00      	cmp	r2, #0
  4047f4:	d051      	beq.n	40489a <memmove+0xb6>
  4047f6:	1a9a      	subs	r2, r3, r2
  4047f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4047fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  404800:	4293      	cmp	r3, r2
  404802:	d1f9      	bne.n	4047f8 <memmove+0x14>
  404804:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404806:	2a0f      	cmp	r2, #15
  404808:	d948      	bls.n	40489c <memmove+0xb8>
  40480a:	ea41 0300 	orr.w	r3, r1, r0
  40480e:	079b      	lsls	r3, r3, #30
  404810:	d146      	bne.n	4048a0 <memmove+0xbc>
  404812:	f100 0410 	add.w	r4, r0, #16
  404816:	f101 0310 	add.w	r3, r1, #16
  40481a:	4615      	mov	r5, r2
  40481c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404820:	f844 6c10 	str.w	r6, [r4, #-16]
  404824:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404828:	f844 6c0c 	str.w	r6, [r4, #-12]
  40482c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404830:	f844 6c08 	str.w	r6, [r4, #-8]
  404834:	3d10      	subs	r5, #16
  404836:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40483a:	f844 6c04 	str.w	r6, [r4, #-4]
  40483e:	2d0f      	cmp	r5, #15
  404840:	f103 0310 	add.w	r3, r3, #16
  404844:	f104 0410 	add.w	r4, r4, #16
  404848:	d8e8      	bhi.n	40481c <memmove+0x38>
  40484a:	f1a2 0310 	sub.w	r3, r2, #16
  40484e:	f023 030f 	bic.w	r3, r3, #15
  404852:	f002 0e0f 	and.w	lr, r2, #15
  404856:	3310      	adds	r3, #16
  404858:	f1be 0f03 	cmp.w	lr, #3
  40485c:	4419      	add	r1, r3
  40485e:	4403      	add	r3, r0
  404860:	d921      	bls.n	4048a6 <memmove+0xc2>
  404862:	1f1e      	subs	r6, r3, #4
  404864:	460d      	mov	r5, r1
  404866:	4674      	mov	r4, lr
  404868:	3c04      	subs	r4, #4
  40486a:	f855 7b04 	ldr.w	r7, [r5], #4
  40486e:	f846 7f04 	str.w	r7, [r6, #4]!
  404872:	2c03      	cmp	r4, #3
  404874:	d8f8      	bhi.n	404868 <memmove+0x84>
  404876:	f1ae 0404 	sub.w	r4, lr, #4
  40487a:	f024 0403 	bic.w	r4, r4, #3
  40487e:	3404      	adds	r4, #4
  404880:	4423      	add	r3, r4
  404882:	4421      	add	r1, r4
  404884:	f002 0203 	and.w	r2, r2, #3
  404888:	b162      	cbz	r2, 4048a4 <memmove+0xc0>
  40488a:	3b01      	subs	r3, #1
  40488c:	440a      	add	r2, r1
  40488e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404892:	f803 4f01 	strb.w	r4, [r3, #1]!
  404896:	428a      	cmp	r2, r1
  404898:	d1f9      	bne.n	40488e <memmove+0xaa>
  40489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40489c:	4603      	mov	r3, r0
  40489e:	e7f3      	b.n	404888 <memmove+0xa4>
  4048a0:	4603      	mov	r3, r0
  4048a2:	e7f2      	b.n	40488a <memmove+0xa6>
  4048a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4048a6:	4672      	mov	r2, lr
  4048a8:	e7ee      	b.n	404888 <memmove+0xa4>
  4048aa:	bf00      	nop

004048ac <__malloc_lock>:
  4048ac:	4770      	bx	lr
  4048ae:	bf00      	nop

004048b0 <__malloc_unlock>:
  4048b0:	4770      	bx	lr
  4048b2:	bf00      	nop

004048b4 <_realloc_r>:
  4048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048b8:	4617      	mov	r7, r2
  4048ba:	b083      	sub	sp, #12
  4048bc:	2900      	cmp	r1, #0
  4048be:	f000 80c1 	beq.w	404a44 <_realloc_r+0x190>
  4048c2:	460e      	mov	r6, r1
  4048c4:	4681      	mov	r9, r0
  4048c6:	f107 050b 	add.w	r5, r7, #11
  4048ca:	f7ff ffef 	bl	4048ac <__malloc_lock>
  4048ce:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4048d2:	2d16      	cmp	r5, #22
  4048d4:	f02e 0403 	bic.w	r4, lr, #3
  4048d8:	f1a6 0808 	sub.w	r8, r6, #8
  4048dc:	d840      	bhi.n	404960 <_realloc_r+0xac>
  4048de:	2210      	movs	r2, #16
  4048e0:	4615      	mov	r5, r2
  4048e2:	42af      	cmp	r7, r5
  4048e4:	d841      	bhi.n	40496a <_realloc_r+0xb6>
  4048e6:	4294      	cmp	r4, r2
  4048e8:	da75      	bge.n	4049d6 <_realloc_r+0x122>
  4048ea:	4bc9      	ldr	r3, [pc, #804]	; (404c10 <_realloc_r+0x35c>)
  4048ec:	6899      	ldr	r1, [r3, #8]
  4048ee:	eb08 0004 	add.w	r0, r8, r4
  4048f2:	4288      	cmp	r0, r1
  4048f4:	6841      	ldr	r1, [r0, #4]
  4048f6:	f000 80d9 	beq.w	404aac <_realloc_r+0x1f8>
  4048fa:	f021 0301 	bic.w	r3, r1, #1
  4048fe:	4403      	add	r3, r0
  404900:	685b      	ldr	r3, [r3, #4]
  404902:	07db      	lsls	r3, r3, #31
  404904:	d57d      	bpl.n	404a02 <_realloc_r+0x14e>
  404906:	f01e 0f01 	tst.w	lr, #1
  40490a:	d035      	beq.n	404978 <_realloc_r+0xc4>
  40490c:	4639      	mov	r1, r7
  40490e:	4648      	mov	r0, r9
  404910:	f7ff fbc4 	bl	40409c <_malloc_r>
  404914:	4607      	mov	r7, r0
  404916:	b1e0      	cbz	r0, 404952 <_realloc_r+0x9e>
  404918:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40491c:	f023 0301 	bic.w	r3, r3, #1
  404920:	4443      	add	r3, r8
  404922:	f1a0 0208 	sub.w	r2, r0, #8
  404926:	429a      	cmp	r2, r3
  404928:	f000 8144 	beq.w	404bb4 <_realloc_r+0x300>
  40492c:	1f22      	subs	r2, r4, #4
  40492e:	2a24      	cmp	r2, #36	; 0x24
  404930:	f200 8131 	bhi.w	404b96 <_realloc_r+0x2e2>
  404934:	2a13      	cmp	r2, #19
  404936:	f200 8104 	bhi.w	404b42 <_realloc_r+0x28e>
  40493a:	4603      	mov	r3, r0
  40493c:	4632      	mov	r2, r6
  40493e:	6811      	ldr	r1, [r2, #0]
  404940:	6019      	str	r1, [r3, #0]
  404942:	6851      	ldr	r1, [r2, #4]
  404944:	6059      	str	r1, [r3, #4]
  404946:	6892      	ldr	r2, [r2, #8]
  404948:	609a      	str	r2, [r3, #8]
  40494a:	4631      	mov	r1, r6
  40494c:	4648      	mov	r0, r9
  40494e:	f7ff f88b 	bl	403a68 <_free_r>
  404952:	4648      	mov	r0, r9
  404954:	f7ff ffac 	bl	4048b0 <__malloc_unlock>
  404958:	4638      	mov	r0, r7
  40495a:	b003      	add	sp, #12
  40495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404960:	f025 0507 	bic.w	r5, r5, #7
  404964:	2d00      	cmp	r5, #0
  404966:	462a      	mov	r2, r5
  404968:	dabb      	bge.n	4048e2 <_realloc_r+0x2e>
  40496a:	230c      	movs	r3, #12
  40496c:	2000      	movs	r0, #0
  40496e:	f8c9 3000 	str.w	r3, [r9]
  404972:	b003      	add	sp, #12
  404974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404978:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40497c:	ebc3 0a08 	rsb	sl, r3, r8
  404980:	f8da 3004 	ldr.w	r3, [sl, #4]
  404984:	f023 0c03 	bic.w	ip, r3, #3
  404988:	eb04 030c 	add.w	r3, r4, ip
  40498c:	4293      	cmp	r3, r2
  40498e:	dbbd      	blt.n	40490c <_realloc_r+0x58>
  404990:	4657      	mov	r7, sl
  404992:	f8da 100c 	ldr.w	r1, [sl, #12]
  404996:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40499a:	1f22      	subs	r2, r4, #4
  40499c:	2a24      	cmp	r2, #36	; 0x24
  40499e:	60c1      	str	r1, [r0, #12]
  4049a0:	6088      	str	r0, [r1, #8]
  4049a2:	f200 8117 	bhi.w	404bd4 <_realloc_r+0x320>
  4049a6:	2a13      	cmp	r2, #19
  4049a8:	f240 8112 	bls.w	404bd0 <_realloc_r+0x31c>
  4049ac:	6831      	ldr	r1, [r6, #0]
  4049ae:	f8ca 1008 	str.w	r1, [sl, #8]
  4049b2:	6871      	ldr	r1, [r6, #4]
  4049b4:	f8ca 100c 	str.w	r1, [sl, #12]
  4049b8:	2a1b      	cmp	r2, #27
  4049ba:	f200 812b 	bhi.w	404c14 <_realloc_r+0x360>
  4049be:	3608      	adds	r6, #8
  4049c0:	f10a 0210 	add.w	r2, sl, #16
  4049c4:	6831      	ldr	r1, [r6, #0]
  4049c6:	6011      	str	r1, [r2, #0]
  4049c8:	6871      	ldr	r1, [r6, #4]
  4049ca:	6051      	str	r1, [r2, #4]
  4049cc:	68b1      	ldr	r1, [r6, #8]
  4049ce:	6091      	str	r1, [r2, #8]
  4049d0:	463e      	mov	r6, r7
  4049d2:	461c      	mov	r4, r3
  4049d4:	46d0      	mov	r8, sl
  4049d6:	1b63      	subs	r3, r4, r5
  4049d8:	2b0f      	cmp	r3, #15
  4049da:	d81d      	bhi.n	404a18 <_realloc_r+0x164>
  4049dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4049e0:	f003 0301 	and.w	r3, r3, #1
  4049e4:	4323      	orrs	r3, r4
  4049e6:	4444      	add	r4, r8
  4049e8:	f8c8 3004 	str.w	r3, [r8, #4]
  4049ec:	6863      	ldr	r3, [r4, #4]
  4049ee:	f043 0301 	orr.w	r3, r3, #1
  4049f2:	6063      	str	r3, [r4, #4]
  4049f4:	4648      	mov	r0, r9
  4049f6:	f7ff ff5b 	bl	4048b0 <__malloc_unlock>
  4049fa:	4630      	mov	r0, r6
  4049fc:	b003      	add	sp, #12
  4049fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a02:	f021 0103 	bic.w	r1, r1, #3
  404a06:	4421      	add	r1, r4
  404a08:	4291      	cmp	r1, r2
  404a0a:	db21      	blt.n	404a50 <_realloc_r+0x19c>
  404a0c:	68c3      	ldr	r3, [r0, #12]
  404a0e:	6882      	ldr	r2, [r0, #8]
  404a10:	460c      	mov	r4, r1
  404a12:	60d3      	str	r3, [r2, #12]
  404a14:	609a      	str	r2, [r3, #8]
  404a16:	e7de      	b.n	4049d6 <_realloc_r+0x122>
  404a18:	f8d8 2004 	ldr.w	r2, [r8, #4]
  404a1c:	eb08 0105 	add.w	r1, r8, r5
  404a20:	f002 0201 	and.w	r2, r2, #1
  404a24:	4315      	orrs	r5, r2
  404a26:	f043 0201 	orr.w	r2, r3, #1
  404a2a:	440b      	add	r3, r1
  404a2c:	f8c8 5004 	str.w	r5, [r8, #4]
  404a30:	604a      	str	r2, [r1, #4]
  404a32:	685a      	ldr	r2, [r3, #4]
  404a34:	f042 0201 	orr.w	r2, r2, #1
  404a38:	3108      	adds	r1, #8
  404a3a:	605a      	str	r2, [r3, #4]
  404a3c:	4648      	mov	r0, r9
  404a3e:	f7ff f813 	bl	403a68 <_free_r>
  404a42:	e7d7      	b.n	4049f4 <_realloc_r+0x140>
  404a44:	4611      	mov	r1, r2
  404a46:	b003      	add	sp, #12
  404a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a4c:	f7ff bb26 	b.w	40409c <_malloc_r>
  404a50:	f01e 0f01 	tst.w	lr, #1
  404a54:	f47f af5a 	bne.w	40490c <_realloc_r+0x58>
  404a58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  404a5c:	ebc3 0a08 	rsb	sl, r3, r8
  404a60:	f8da 3004 	ldr.w	r3, [sl, #4]
  404a64:	f023 0c03 	bic.w	ip, r3, #3
  404a68:	eb01 0e0c 	add.w	lr, r1, ip
  404a6c:	4596      	cmp	lr, r2
  404a6e:	db8b      	blt.n	404988 <_realloc_r+0xd4>
  404a70:	68c3      	ldr	r3, [r0, #12]
  404a72:	6882      	ldr	r2, [r0, #8]
  404a74:	4657      	mov	r7, sl
  404a76:	60d3      	str	r3, [r2, #12]
  404a78:	609a      	str	r2, [r3, #8]
  404a7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  404a7e:	f8da 300c 	ldr.w	r3, [sl, #12]
  404a82:	60cb      	str	r3, [r1, #12]
  404a84:	1f22      	subs	r2, r4, #4
  404a86:	2a24      	cmp	r2, #36	; 0x24
  404a88:	6099      	str	r1, [r3, #8]
  404a8a:	f200 8099 	bhi.w	404bc0 <_realloc_r+0x30c>
  404a8e:	2a13      	cmp	r2, #19
  404a90:	d962      	bls.n	404b58 <_realloc_r+0x2a4>
  404a92:	6833      	ldr	r3, [r6, #0]
  404a94:	f8ca 3008 	str.w	r3, [sl, #8]
  404a98:	6873      	ldr	r3, [r6, #4]
  404a9a:	f8ca 300c 	str.w	r3, [sl, #12]
  404a9e:	2a1b      	cmp	r2, #27
  404aa0:	f200 80a0 	bhi.w	404be4 <_realloc_r+0x330>
  404aa4:	3608      	adds	r6, #8
  404aa6:	f10a 0310 	add.w	r3, sl, #16
  404aaa:	e056      	b.n	404b5a <_realloc_r+0x2a6>
  404aac:	f021 0b03 	bic.w	fp, r1, #3
  404ab0:	44a3      	add	fp, r4
  404ab2:	f105 0010 	add.w	r0, r5, #16
  404ab6:	4583      	cmp	fp, r0
  404ab8:	da59      	bge.n	404b6e <_realloc_r+0x2ba>
  404aba:	f01e 0f01 	tst.w	lr, #1
  404abe:	f47f af25 	bne.w	40490c <_realloc_r+0x58>
  404ac2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  404ac6:	ebc1 0a08 	rsb	sl, r1, r8
  404aca:	f8da 1004 	ldr.w	r1, [sl, #4]
  404ace:	f021 0c03 	bic.w	ip, r1, #3
  404ad2:	44e3      	add	fp, ip
  404ad4:	4558      	cmp	r0, fp
  404ad6:	f73f af57 	bgt.w	404988 <_realloc_r+0xd4>
  404ada:	4657      	mov	r7, sl
  404adc:	f8da 100c 	ldr.w	r1, [sl, #12]
  404ae0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  404ae4:	1f22      	subs	r2, r4, #4
  404ae6:	2a24      	cmp	r2, #36	; 0x24
  404ae8:	60c1      	str	r1, [r0, #12]
  404aea:	6088      	str	r0, [r1, #8]
  404aec:	f200 80b4 	bhi.w	404c58 <_realloc_r+0x3a4>
  404af0:	2a13      	cmp	r2, #19
  404af2:	f240 80a5 	bls.w	404c40 <_realloc_r+0x38c>
  404af6:	6831      	ldr	r1, [r6, #0]
  404af8:	f8ca 1008 	str.w	r1, [sl, #8]
  404afc:	6871      	ldr	r1, [r6, #4]
  404afe:	f8ca 100c 	str.w	r1, [sl, #12]
  404b02:	2a1b      	cmp	r2, #27
  404b04:	f200 80af 	bhi.w	404c66 <_realloc_r+0x3b2>
  404b08:	3608      	adds	r6, #8
  404b0a:	f10a 0210 	add.w	r2, sl, #16
  404b0e:	6831      	ldr	r1, [r6, #0]
  404b10:	6011      	str	r1, [r2, #0]
  404b12:	6871      	ldr	r1, [r6, #4]
  404b14:	6051      	str	r1, [r2, #4]
  404b16:	68b1      	ldr	r1, [r6, #8]
  404b18:	6091      	str	r1, [r2, #8]
  404b1a:	eb0a 0105 	add.w	r1, sl, r5
  404b1e:	ebc5 020b 	rsb	r2, r5, fp
  404b22:	f042 0201 	orr.w	r2, r2, #1
  404b26:	6099      	str	r1, [r3, #8]
  404b28:	604a      	str	r2, [r1, #4]
  404b2a:	f8da 3004 	ldr.w	r3, [sl, #4]
  404b2e:	f003 0301 	and.w	r3, r3, #1
  404b32:	431d      	orrs	r5, r3
  404b34:	4648      	mov	r0, r9
  404b36:	f8ca 5004 	str.w	r5, [sl, #4]
  404b3a:	f7ff feb9 	bl	4048b0 <__malloc_unlock>
  404b3e:	4638      	mov	r0, r7
  404b40:	e75c      	b.n	4049fc <_realloc_r+0x148>
  404b42:	6833      	ldr	r3, [r6, #0]
  404b44:	6003      	str	r3, [r0, #0]
  404b46:	6873      	ldr	r3, [r6, #4]
  404b48:	6043      	str	r3, [r0, #4]
  404b4a:	2a1b      	cmp	r2, #27
  404b4c:	d827      	bhi.n	404b9e <_realloc_r+0x2ea>
  404b4e:	f100 0308 	add.w	r3, r0, #8
  404b52:	f106 0208 	add.w	r2, r6, #8
  404b56:	e6f2      	b.n	40493e <_realloc_r+0x8a>
  404b58:	463b      	mov	r3, r7
  404b5a:	6832      	ldr	r2, [r6, #0]
  404b5c:	601a      	str	r2, [r3, #0]
  404b5e:	6872      	ldr	r2, [r6, #4]
  404b60:	605a      	str	r2, [r3, #4]
  404b62:	68b2      	ldr	r2, [r6, #8]
  404b64:	609a      	str	r2, [r3, #8]
  404b66:	463e      	mov	r6, r7
  404b68:	4674      	mov	r4, lr
  404b6a:	46d0      	mov	r8, sl
  404b6c:	e733      	b.n	4049d6 <_realloc_r+0x122>
  404b6e:	eb08 0105 	add.w	r1, r8, r5
  404b72:	ebc5 0b0b 	rsb	fp, r5, fp
  404b76:	f04b 0201 	orr.w	r2, fp, #1
  404b7a:	6099      	str	r1, [r3, #8]
  404b7c:	604a      	str	r2, [r1, #4]
  404b7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404b82:	f003 0301 	and.w	r3, r3, #1
  404b86:	431d      	orrs	r5, r3
  404b88:	4648      	mov	r0, r9
  404b8a:	f846 5c04 	str.w	r5, [r6, #-4]
  404b8e:	f7ff fe8f 	bl	4048b0 <__malloc_unlock>
  404b92:	4630      	mov	r0, r6
  404b94:	e732      	b.n	4049fc <_realloc_r+0x148>
  404b96:	4631      	mov	r1, r6
  404b98:	f7ff fe24 	bl	4047e4 <memmove>
  404b9c:	e6d5      	b.n	40494a <_realloc_r+0x96>
  404b9e:	68b3      	ldr	r3, [r6, #8]
  404ba0:	6083      	str	r3, [r0, #8]
  404ba2:	68f3      	ldr	r3, [r6, #12]
  404ba4:	60c3      	str	r3, [r0, #12]
  404ba6:	2a24      	cmp	r2, #36	; 0x24
  404ba8:	d028      	beq.n	404bfc <_realloc_r+0x348>
  404baa:	f100 0310 	add.w	r3, r0, #16
  404bae:	f106 0210 	add.w	r2, r6, #16
  404bb2:	e6c4      	b.n	40493e <_realloc_r+0x8a>
  404bb4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404bb8:	f023 0303 	bic.w	r3, r3, #3
  404bbc:	441c      	add	r4, r3
  404bbe:	e70a      	b.n	4049d6 <_realloc_r+0x122>
  404bc0:	4631      	mov	r1, r6
  404bc2:	4638      	mov	r0, r7
  404bc4:	4674      	mov	r4, lr
  404bc6:	46d0      	mov	r8, sl
  404bc8:	f7ff fe0c 	bl	4047e4 <memmove>
  404bcc:	463e      	mov	r6, r7
  404bce:	e702      	b.n	4049d6 <_realloc_r+0x122>
  404bd0:	463a      	mov	r2, r7
  404bd2:	e6f7      	b.n	4049c4 <_realloc_r+0x110>
  404bd4:	4631      	mov	r1, r6
  404bd6:	4638      	mov	r0, r7
  404bd8:	461c      	mov	r4, r3
  404bda:	46d0      	mov	r8, sl
  404bdc:	f7ff fe02 	bl	4047e4 <memmove>
  404be0:	463e      	mov	r6, r7
  404be2:	e6f8      	b.n	4049d6 <_realloc_r+0x122>
  404be4:	68b3      	ldr	r3, [r6, #8]
  404be6:	f8ca 3010 	str.w	r3, [sl, #16]
  404bea:	68f3      	ldr	r3, [r6, #12]
  404bec:	f8ca 3014 	str.w	r3, [sl, #20]
  404bf0:	2a24      	cmp	r2, #36	; 0x24
  404bf2:	d01b      	beq.n	404c2c <_realloc_r+0x378>
  404bf4:	3610      	adds	r6, #16
  404bf6:	f10a 0318 	add.w	r3, sl, #24
  404bfa:	e7ae      	b.n	404b5a <_realloc_r+0x2a6>
  404bfc:	6933      	ldr	r3, [r6, #16]
  404bfe:	6103      	str	r3, [r0, #16]
  404c00:	6973      	ldr	r3, [r6, #20]
  404c02:	6143      	str	r3, [r0, #20]
  404c04:	f106 0218 	add.w	r2, r6, #24
  404c08:	f100 0318 	add.w	r3, r0, #24
  404c0c:	e697      	b.n	40493e <_realloc_r+0x8a>
  404c0e:	bf00      	nop
  404c10:	20400460 	.word	0x20400460
  404c14:	68b1      	ldr	r1, [r6, #8]
  404c16:	f8ca 1010 	str.w	r1, [sl, #16]
  404c1a:	68f1      	ldr	r1, [r6, #12]
  404c1c:	f8ca 1014 	str.w	r1, [sl, #20]
  404c20:	2a24      	cmp	r2, #36	; 0x24
  404c22:	d00f      	beq.n	404c44 <_realloc_r+0x390>
  404c24:	3610      	adds	r6, #16
  404c26:	f10a 0218 	add.w	r2, sl, #24
  404c2a:	e6cb      	b.n	4049c4 <_realloc_r+0x110>
  404c2c:	6933      	ldr	r3, [r6, #16]
  404c2e:	f8ca 3018 	str.w	r3, [sl, #24]
  404c32:	6973      	ldr	r3, [r6, #20]
  404c34:	f8ca 301c 	str.w	r3, [sl, #28]
  404c38:	3618      	adds	r6, #24
  404c3a:	f10a 0320 	add.w	r3, sl, #32
  404c3e:	e78c      	b.n	404b5a <_realloc_r+0x2a6>
  404c40:	463a      	mov	r2, r7
  404c42:	e764      	b.n	404b0e <_realloc_r+0x25a>
  404c44:	6932      	ldr	r2, [r6, #16]
  404c46:	f8ca 2018 	str.w	r2, [sl, #24]
  404c4a:	6972      	ldr	r2, [r6, #20]
  404c4c:	f8ca 201c 	str.w	r2, [sl, #28]
  404c50:	3618      	adds	r6, #24
  404c52:	f10a 0220 	add.w	r2, sl, #32
  404c56:	e6b5      	b.n	4049c4 <_realloc_r+0x110>
  404c58:	4631      	mov	r1, r6
  404c5a:	4638      	mov	r0, r7
  404c5c:	9301      	str	r3, [sp, #4]
  404c5e:	f7ff fdc1 	bl	4047e4 <memmove>
  404c62:	9b01      	ldr	r3, [sp, #4]
  404c64:	e759      	b.n	404b1a <_realloc_r+0x266>
  404c66:	68b1      	ldr	r1, [r6, #8]
  404c68:	f8ca 1010 	str.w	r1, [sl, #16]
  404c6c:	68f1      	ldr	r1, [r6, #12]
  404c6e:	f8ca 1014 	str.w	r1, [sl, #20]
  404c72:	2a24      	cmp	r2, #36	; 0x24
  404c74:	d003      	beq.n	404c7e <_realloc_r+0x3ca>
  404c76:	3610      	adds	r6, #16
  404c78:	f10a 0218 	add.w	r2, sl, #24
  404c7c:	e747      	b.n	404b0e <_realloc_r+0x25a>
  404c7e:	6932      	ldr	r2, [r6, #16]
  404c80:	f8ca 2018 	str.w	r2, [sl, #24]
  404c84:	6972      	ldr	r2, [r6, #20]
  404c86:	f8ca 201c 	str.w	r2, [sl, #28]
  404c8a:	3618      	adds	r6, #24
  404c8c:	f10a 0220 	add.w	r2, sl, #32
  404c90:	e73d      	b.n	404b0e <_realloc_r+0x25a>
  404c92:	bf00      	nop

00404c94 <_sbrk_r>:
  404c94:	b538      	push	{r3, r4, r5, lr}
  404c96:	4c07      	ldr	r4, [pc, #28]	; (404cb4 <_sbrk_r+0x20>)
  404c98:	2300      	movs	r3, #0
  404c9a:	4605      	mov	r5, r0
  404c9c:	4608      	mov	r0, r1
  404c9e:	6023      	str	r3, [r4, #0]
  404ca0:	f7fc fe54 	bl	40194c <_sbrk>
  404ca4:	1c43      	adds	r3, r0, #1
  404ca6:	d000      	beq.n	404caa <_sbrk_r+0x16>
  404ca8:	bd38      	pop	{r3, r4, r5, pc}
  404caa:	6823      	ldr	r3, [r4, #0]
  404cac:	2b00      	cmp	r3, #0
  404cae:	d0fb      	beq.n	404ca8 <_sbrk_r+0x14>
  404cb0:	602b      	str	r3, [r5, #0]
  404cb2:	bd38      	pop	{r3, r4, r5, pc}
  404cb4:	20400950 	.word	0x20400950

00404cb8 <__sread>:
  404cb8:	b510      	push	{r4, lr}
  404cba:	460c      	mov	r4, r1
  404cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404cc0:	f000 f9c4 	bl	40504c <_read_r>
  404cc4:	2800      	cmp	r0, #0
  404cc6:	db03      	blt.n	404cd0 <__sread+0x18>
  404cc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404cca:	4403      	add	r3, r0
  404ccc:	6523      	str	r3, [r4, #80]	; 0x50
  404cce:	bd10      	pop	{r4, pc}
  404cd0:	89a3      	ldrh	r3, [r4, #12]
  404cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404cd6:	81a3      	strh	r3, [r4, #12]
  404cd8:	bd10      	pop	{r4, pc}
  404cda:	bf00      	nop

00404cdc <__swrite>:
  404cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ce0:	4616      	mov	r6, r2
  404ce2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404ce6:	461f      	mov	r7, r3
  404ce8:	05d3      	lsls	r3, r2, #23
  404cea:	460c      	mov	r4, r1
  404cec:	4605      	mov	r5, r0
  404cee:	d507      	bpl.n	404d00 <__swrite+0x24>
  404cf0:	2200      	movs	r2, #0
  404cf2:	2302      	movs	r3, #2
  404cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404cf8:	f000 f992 	bl	405020 <_lseek_r>
  404cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404d04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404d08:	81a2      	strh	r2, [r4, #12]
  404d0a:	463b      	mov	r3, r7
  404d0c:	4632      	mov	r2, r6
  404d0e:	4628      	mov	r0, r5
  404d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404d14:	f000 b8a2 	b.w	404e5c <_write_r>

00404d18 <__sseek>:
  404d18:	b510      	push	{r4, lr}
  404d1a:	460c      	mov	r4, r1
  404d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d20:	f000 f97e 	bl	405020 <_lseek_r>
  404d24:	89a3      	ldrh	r3, [r4, #12]
  404d26:	1c42      	adds	r2, r0, #1
  404d28:	bf0e      	itee	eq
  404d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404d32:	6520      	strne	r0, [r4, #80]	; 0x50
  404d34:	81a3      	strh	r3, [r4, #12]
  404d36:	bd10      	pop	{r4, pc}

00404d38 <__sclose>:
  404d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d3c:	f000 b8f6 	b.w	404f2c <_close_r>

00404d40 <__swbuf_r>:
  404d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d42:	460e      	mov	r6, r1
  404d44:	4614      	mov	r4, r2
  404d46:	4607      	mov	r7, r0
  404d48:	b110      	cbz	r0, 404d50 <__swbuf_r+0x10>
  404d4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404d4c:	2b00      	cmp	r3, #0
  404d4e:	d04a      	beq.n	404de6 <__swbuf_r+0xa6>
  404d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404d54:	69a3      	ldr	r3, [r4, #24]
  404d56:	60a3      	str	r3, [r4, #8]
  404d58:	b291      	uxth	r1, r2
  404d5a:	0708      	lsls	r0, r1, #28
  404d5c:	d538      	bpl.n	404dd0 <__swbuf_r+0x90>
  404d5e:	6923      	ldr	r3, [r4, #16]
  404d60:	2b00      	cmp	r3, #0
  404d62:	d035      	beq.n	404dd0 <__swbuf_r+0x90>
  404d64:	0489      	lsls	r1, r1, #18
  404d66:	b2f5      	uxtb	r5, r6
  404d68:	d515      	bpl.n	404d96 <__swbuf_r+0x56>
  404d6a:	6822      	ldr	r2, [r4, #0]
  404d6c:	6961      	ldr	r1, [r4, #20]
  404d6e:	1ad3      	subs	r3, r2, r3
  404d70:	428b      	cmp	r3, r1
  404d72:	da1c      	bge.n	404dae <__swbuf_r+0x6e>
  404d74:	3301      	adds	r3, #1
  404d76:	68a1      	ldr	r1, [r4, #8]
  404d78:	1c50      	adds	r0, r2, #1
  404d7a:	3901      	subs	r1, #1
  404d7c:	60a1      	str	r1, [r4, #8]
  404d7e:	6020      	str	r0, [r4, #0]
  404d80:	7016      	strb	r6, [r2, #0]
  404d82:	6962      	ldr	r2, [r4, #20]
  404d84:	429a      	cmp	r2, r3
  404d86:	d01a      	beq.n	404dbe <__swbuf_r+0x7e>
  404d88:	89a3      	ldrh	r3, [r4, #12]
  404d8a:	07db      	lsls	r3, r3, #31
  404d8c:	d501      	bpl.n	404d92 <__swbuf_r+0x52>
  404d8e:	2d0a      	cmp	r5, #10
  404d90:	d015      	beq.n	404dbe <__swbuf_r+0x7e>
  404d92:	4628      	mov	r0, r5
  404d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d96:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404d9c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404da0:	81a2      	strh	r2, [r4, #12]
  404da2:	6822      	ldr	r2, [r4, #0]
  404da4:	6661      	str	r1, [r4, #100]	; 0x64
  404da6:	6961      	ldr	r1, [r4, #20]
  404da8:	1ad3      	subs	r3, r2, r3
  404daa:	428b      	cmp	r3, r1
  404dac:	dbe2      	blt.n	404d74 <__swbuf_r+0x34>
  404dae:	4621      	mov	r1, r4
  404db0:	4638      	mov	r0, r7
  404db2:	f7fe fcfb 	bl	4037ac <_fflush_r>
  404db6:	b940      	cbnz	r0, 404dca <__swbuf_r+0x8a>
  404db8:	6822      	ldr	r2, [r4, #0]
  404dba:	2301      	movs	r3, #1
  404dbc:	e7db      	b.n	404d76 <__swbuf_r+0x36>
  404dbe:	4621      	mov	r1, r4
  404dc0:	4638      	mov	r0, r7
  404dc2:	f7fe fcf3 	bl	4037ac <_fflush_r>
  404dc6:	2800      	cmp	r0, #0
  404dc8:	d0e3      	beq.n	404d92 <__swbuf_r+0x52>
  404dca:	f04f 30ff 	mov.w	r0, #4294967295
  404dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404dd0:	4621      	mov	r1, r4
  404dd2:	4638      	mov	r0, r7
  404dd4:	f7fe fbd2 	bl	40357c <__swsetup_r>
  404dd8:	2800      	cmp	r0, #0
  404dda:	d1f6      	bne.n	404dca <__swbuf_r+0x8a>
  404ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404de0:	6923      	ldr	r3, [r4, #16]
  404de2:	b291      	uxth	r1, r2
  404de4:	e7be      	b.n	404d64 <__swbuf_r+0x24>
  404de6:	f7fe fd75 	bl	4038d4 <__sinit>
  404dea:	e7b1      	b.n	404d50 <__swbuf_r+0x10>

00404dec <_wcrtomb_r>:
  404dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404df0:	4605      	mov	r5, r0
  404df2:	b086      	sub	sp, #24
  404df4:	461e      	mov	r6, r3
  404df6:	460c      	mov	r4, r1
  404df8:	b1a1      	cbz	r1, 404e24 <_wcrtomb_r+0x38>
  404dfa:	4b10      	ldr	r3, [pc, #64]	; (404e3c <_wcrtomb_r+0x50>)
  404dfc:	4617      	mov	r7, r2
  404dfe:	f8d3 8000 	ldr.w	r8, [r3]
  404e02:	f7ff f8c5 	bl	403f90 <__locale_charset>
  404e06:	9600      	str	r6, [sp, #0]
  404e08:	4603      	mov	r3, r0
  404e0a:	463a      	mov	r2, r7
  404e0c:	4621      	mov	r1, r4
  404e0e:	4628      	mov	r0, r5
  404e10:	47c0      	blx	r8
  404e12:	1c43      	adds	r3, r0, #1
  404e14:	d103      	bne.n	404e1e <_wcrtomb_r+0x32>
  404e16:	2200      	movs	r2, #0
  404e18:	238a      	movs	r3, #138	; 0x8a
  404e1a:	6032      	str	r2, [r6, #0]
  404e1c:	602b      	str	r3, [r5, #0]
  404e1e:	b006      	add	sp, #24
  404e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e24:	4b05      	ldr	r3, [pc, #20]	; (404e3c <_wcrtomb_r+0x50>)
  404e26:	681f      	ldr	r7, [r3, #0]
  404e28:	f7ff f8b2 	bl	403f90 <__locale_charset>
  404e2c:	9600      	str	r6, [sp, #0]
  404e2e:	4603      	mov	r3, r0
  404e30:	4622      	mov	r2, r4
  404e32:	a903      	add	r1, sp, #12
  404e34:	4628      	mov	r0, r5
  404e36:	47b8      	blx	r7
  404e38:	e7eb      	b.n	404e12 <_wcrtomb_r+0x26>
  404e3a:	bf00      	nop
  404e3c:	20400870 	.word	0x20400870

00404e40 <__ascii_wctomb>:
  404e40:	b121      	cbz	r1, 404e4c <__ascii_wctomb+0xc>
  404e42:	2aff      	cmp	r2, #255	; 0xff
  404e44:	d804      	bhi.n	404e50 <__ascii_wctomb+0x10>
  404e46:	700a      	strb	r2, [r1, #0]
  404e48:	2001      	movs	r0, #1
  404e4a:	4770      	bx	lr
  404e4c:	4608      	mov	r0, r1
  404e4e:	4770      	bx	lr
  404e50:	238a      	movs	r3, #138	; 0x8a
  404e52:	6003      	str	r3, [r0, #0]
  404e54:	f04f 30ff 	mov.w	r0, #4294967295
  404e58:	4770      	bx	lr
  404e5a:	bf00      	nop

00404e5c <_write_r>:
  404e5c:	b570      	push	{r4, r5, r6, lr}
  404e5e:	460d      	mov	r5, r1
  404e60:	4c08      	ldr	r4, [pc, #32]	; (404e84 <_write_r+0x28>)
  404e62:	4611      	mov	r1, r2
  404e64:	4606      	mov	r6, r0
  404e66:	461a      	mov	r2, r3
  404e68:	4628      	mov	r0, r5
  404e6a:	2300      	movs	r3, #0
  404e6c:	6023      	str	r3, [r4, #0]
  404e6e:	f7fb fb7d 	bl	40056c <_write>
  404e72:	1c43      	adds	r3, r0, #1
  404e74:	d000      	beq.n	404e78 <_write_r+0x1c>
  404e76:	bd70      	pop	{r4, r5, r6, pc}
  404e78:	6823      	ldr	r3, [r4, #0]
  404e7a:	2b00      	cmp	r3, #0
  404e7c:	d0fb      	beq.n	404e76 <_write_r+0x1a>
  404e7e:	6033      	str	r3, [r6, #0]
  404e80:	bd70      	pop	{r4, r5, r6, pc}
  404e82:	bf00      	nop
  404e84:	20400950 	.word	0x20400950

00404e88 <__register_exitproc>:
  404e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e8c:	4c25      	ldr	r4, [pc, #148]	; (404f24 <__register_exitproc+0x9c>)
  404e8e:	6825      	ldr	r5, [r4, #0]
  404e90:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404e94:	4606      	mov	r6, r0
  404e96:	4688      	mov	r8, r1
  404e98:	4692      	mov	sl, r2
  404e9a:	4699      	mov	r9, r3
  404e9c:	b3c4      	cbz	r4, 404f10 <__register_exitproc+0x88>
  404e9e:	6860      	ldr	r0, [r4, #4]
  404ea0:	281f      	cmp	r0, #31
  404ea2:	dc17      	bgt.n	404ed4 <__register_exitproc+0x4c>
  404ea4:	1c43      	adds	r3, r0, #1
  404ea6:	b176      	cbz	r6, 404ec6 <__register_exitproc+0x3e>
  404ea8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404eac:	2201      	movs	r2, #1
  404eae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404eb2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404eb6:	4082      	lsls	r2, r0
  404eb8:	4311      	orrs	r1, r2
  404eba:	2e02      	cmp	r6, #2
  404ebc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404ec0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404ec4:	d01e      	beq.n	404f04 <__register_exitproc+0x7c>
  404ec6:	3002      	adds	r0, #2
  404ec8:	6063      	str	r3, [r4, #4]
  404eca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404ece:	2000      	movs	r0, #0
  404ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404ed4:	4b14      	ldr	r3, [pc, #80]	; (404f28 <__register_exitproc+0xa0>)
  404ed6:	b303      	cbz	r3, 404f1a <__register_exitproc+0x92>
  404ed8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404edc:	f7ff f8d6 	bl	40408c <malloc>
  404ee0:	4604      	mov	r4, r0
  404ee2:	b1d0      	cbz	r0, 404f1a <__register_exitproc+0x92>
  404ee4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404ee8:	2700      	movs	r7, #0
  404eea:	e880 0088 	stmia.w	r0, {r3, r7}
  404eee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404ef2:	4638      	mov	r0, r7
  404ef4:	2301      	movs	r3, #1
  404ef6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404efa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  404efe:	2e00      	cmp	r6, #0
  404f00:	d0e1      	beq.n	404ec6 <__register_exitproc+0x3e>
  404f02:	e7d1      	b.n	404ea8 <__register_exitproc+0x20>
  404f04:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404f08:	430a      	orrs	r2, r1
  404f0a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  404f0e:	e7da      	b.n	404ec6 <__register_exitproc+0x3e>
  404f10:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404f14:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404f18:	e7c1      	b.n	404e9e <__register_exitproc+0x16>
  404f1a:	f04f 30ff 	mov.w	r0, #4294967295
  404f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f22:	bf00      	nop
  404f24:	004054b8 	.word	0x004054b8
  404f28:	0040408d 	.word	0x0040408d

00404f2c <_close_r>:
  404f2c:	b538      	push	{r3, r4, r5, lr}
  404f2e:	4c07      	ldr	r4, [pc, #28]	; (404f4c <_close_r+0x20>)
  404f30:	2300      	movs	r3, #0
  404f32:	4605      	mov	r5, r0
  404f34:	4608      	mov	r0, r1
  404f36:	6023      	str	r3, [r4, #0]
  404f38:	f7fc fd34 	bl	4019a4 <_close>
  404f3c:	1c43      	adds	r3, r0, #1
  404f3e:	d000      	beq.n	404f42 <_close_r+0x16>
  404f40:	bd38      	pop	{r3, r4, r5, pc}
  404f42:	6823      	ldr	r3, [r4, #0]
  404f44:	2b00      	cmp	r3, #0
  404f46:	d0fb      	beq.n	404f40 <_close_r+0x14>
  404f48:	602b      	str	r3, [r5, #0]
  404f4a:	bd38      	pop	{r3, r4, r5, pc}
  404f4c:	20400950 	.word	0x20400950

00404f50 <_fclose_r>:
  404f50:	2900      	cmp	r1, #0
  404f52:	d03d      	beq.n	404fd0 <_fclose_r+0x80>
  404f54:	b570      	push	{r4, r5, r6, lr}
  404f56:	4605      	mov	r5, r0
  404f58:	460c      	mov	r4, r1
  404f5a:	b108      	cbz	r0, 404f60 <_fclose_r+0x10>
  404f5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404f5e:	b37b      	cbz	r3, 404fc0 <_fclose_r+0x70>
  404f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f64:	b90b      	cbnz	r3, 404f6a <_fclose_r+0x1a>
  404f66:	2000      	movs	r0, #0
  404f68:	bd70      	pop	{r4, r5, r6, pc}
  404f6a:	4621      	mov	r1, r4
  404f6c:	4628      	mov	r0, r5
  404f6e:	f7fe fb79 	bl	403664 <__sflush_r>
  404f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404f74:	4606      	mov	r6, r0
  404f76:	b133      	cbz	r3, 404f86 <_fclose_r+0x36>
  404f78:	69e1      	ldr	r1, [r4, #28]
  404f7a:	4628      	mov	r0, r5
  404f7c:	4798      	blx	r3
  404f7e:	2800      	cmp	r0, #0
  404f80:	bfb8      	it	lt
  404f82:	f04f 36ff 	movlt.w	r6, #4294967295
  404f86:	89a3      	ldrh	r3, [r4, #12]
  404f88:	061b      	lsls	r3, r3, #24
  404f8a:	d41c      	bmi.n	404fc6 <_fclose_r+0x76>
  404f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404f8e:	b141      	cbz	r1, 404fa2 <_fclose_r+0x52>
  404f90:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404f94:	4299      	cmp	r1, r3
  404f96:	d002      	beq.n	404f9e <_fclose_r+0x4e>
  404f98:	4628      	mov	r0, r5
  404f9a:	f7fe fd65 	bl	403a68 <_free_r>
  404f9e:	2300      	movs	r3, #0
  404fa0:	6323      	str	r3, [r4, #48]	; 0x30
  404fa2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404fa4:	b121      	cbz	r1, 404fb0 <_fclose_r+0x60>
  404fa6:	4628      	mov	r0, r5
  404fa8:	f7fe fd5e 	bl	403a68 <_free_r>
  404fac:	2300      	movs	r3, #0
  404fae:	6463      	str	r3, [r4, #68]	; 0x44
  404fb0:	f7fe fc96 	bl	4038e0 <__sfp_lock_acquire>
  404fb4:	2300      	movs	r3, #0
  404fb6:	81a3      	strh	r3, [r4, #12]
  404fb8:	f7fe fc94 	bl	4038e4 <__sfp_lock_release>
  404fbc:	4630      	mov	r0, r6
  404fbe:	bd70      	pop	{r4, r5, r6, pc}
  404fc0:	f7fe fc88 	bl	4038d4 <__sinit>
  404fc4:	e7cc      	b.n	404f60 <_fclose_r+0x10>
  404fc6:	6921      	ldr	r1, [r4, #16]
  404fc8:	4628      	mov	r0, r5
  404fca:	f7fe fd4d 	bl	403a68 <_free_r>
  404fce:	e7dd      	b.n	404f8c <_fclose_r+0x3c>
  404fd0:	2000      	movs	r0, #0
  404fd2:	4770      	bx	lr

00404fd4 <_fstat_r>:
  404fd4:	b538      	push	{r3, r4, r5, lr}
  404fd6:	460b      	mov	r3, r1
  404fd8:	4c07      	ldr	r4, [pc, #28]	; (404ff8 <_fstat_r+0x24>)
  404fda:	4605      	mov	r5, r0
  404fdc:	4611      	mov	r1, r2
  404fde:	4618      	mov	r0, r3
  404fe0:	2300      	movs	r3, #0
  404fe2:	6023      	str	r3, [r4, #0]
  404fe4:	f7fc fcea 	bl	4019bc <_fstat>
  404fe8:	1c43      	adds	r3, r0, #1
  404fea:	d000      	beq.n	404fee <_fstat_r+0x1a>
  404fec:	bd38      	pop	{r3, r4, r5, pc}
  404fee:	6823      	ldr	r3, [r4, #0]
  404ff0:	2b00      	cmp	r3, #0
  404ff2:	d0fb      	beq.n	404fec <_fstat_r+0x18>
  404ff4:	602b      	str	r3, [r5, #0]
  404ff6:	bd38      	pop	{r3, r4, r5, pc}
  404ff8:	20400950 	.word	0x20400950

00404ffc <_isatty_r>:
  404ffc:	b538      	push	{r3, r4, r5, lr}
  404ffe:	4c07      	ldr	r4, [pc, #28]	; (40501c <_isatty_r+0x20>)
  405000:	2300      	movs	r3, #0
  405002:	4605      	mov	r5, r0
  405004:	4608      	mov	r0, r1
  405006:	6023      	str	r3, [r4, #0]
  405008:	f7fc fce8 	bl	4019dc <_isatty>
  40500c:	1c43      	adds	r3, r0, #1
  40500e:	d000      	beq.n	405012 <_isatty_r+0x16>
  405010:	bd38      	pop	{r3, r4, r5, pc}
  405012:	6823      	ldr	r3, [r4, #0]
  405014:	2b00      	cmp	r3, #0
  405016:	d0fb      	beq.n	405010 <_isatty_r+0x14>
  405018:	602b      	str	r3, [r5, #0]
  40501a:	bd38      	pop	{r3, r4, r5, pc}
  40501c:	20400950 	.word	0x20400950

00405020 <_lseek_r>:
  405020:	b570      	push	{r4, r5, r6, lr}
  405022:	460d      	mov	r5, r1
  405024:	4c08      	ldr	r4, [pc, #32]	; (405048 <_lseek_r+0x28>)
  405026:	4611      	mov	r1, r2
  405028:	4606      	mov	r6, r0
  40502a:	461a      	mov	r2, r3
  40502c:	4628      	mov	r0, r5
  40502e:	2300      	movs	r3, #0
  405030:	6023      	str	r3, [r4, #0]
  405032:	f7fc fcdf 	bl	4019f4 <_lseek>
  405036:	1c43      	adds	r3, r0, #1
  405038:	d000      	beq.n	40503c <_lseek_r+0x1c>
  40503a:	bd70      	pop	{r4, r5, r6, pc}
  40503c:	6823      	ldr	r3, [r4, #0]
  40503e:	2b00      	cmp	r3, #0
  405040:	d0fb      	beq.n	40503a <_lseek_r+0x1a>
  405042:	6033      	str	r3, [r6, #0]
  405044:	bd70      	pop	{r4, r5, r6, pc}
  405046:	bf00      	nop
  405048:	20400950 	.word	0x20400950

0040504c <_read_r>:
  40504c:	b570      	push	{r4, r5, r6, lr}
  40504e:	460d      	mov	r5, r1
  405050:	4c08      	ldr	r4, [pc, #32]	; (405074 <_read_r+0x28>)
  405052:	4611      	mov	r1, r2
  405054:	4606      	mov	r6, r0
  405056:	461a      	mov	r2, r3
  405058:	4628      	mov	r0, r5
  40505a:	2300      	movs	r3, #0
  40505c:	6023      	str	r3, [r4, #0]
  40505e:	f7fb fa5b 	bl	400518 <_read>
  405062:	1c43      	adds	r3, r0, #1
  405064:	d000      	beq.n	405068 <_read_r+0x1c>
  405066:	bd70      	pop	{r4, r5, r6, pc}
  405068:	6823      	ldr	r3, [r4, #0]
  40506a:	2b00      	cmp	r3, #0
  40506c:	d0fb      	beq.n	405066 <_read_r+0x1a>
  40506e:	6033      	str	r3, [r6, #0]
  405070:	bd70      	pop	{r4, r5, r6, pc}
  405072:	bf00      	nop
  405074:	20400950 	.word	0x20400950

00405078 <__aeabi_uldivmod>:
  405078:	b953      	cbnz	r3, 405090 <__aeabi_uldivmod+0x18>
  40507a:	b94a      	cbnz	r2, 405090 <__aeabi_uldivmod+0x18>
  40507c:	2900      	cmp	r1, #0
  40507e:	bf08      	it	eq
  405080:	2800      	cmpeq	r0, #0
  405082:	bf1c      	itt	ne
  405084:	f04f 31ff 	movne.w	r1, #4294967295
  405088:	f04f 30ff 	movne.w	r0, #4294967295
  40508c:	f000 b97e 	b.w	40538c <__aeabi_idiv0>
  405090:	f1ad 0c08 	sub.w	ip, sp, #8
  405094:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405098:	f000 f806 	bl	4050a8 <__udivmoddi4>
  40509c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4050a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4050a4:	b004      	add	sp, #16
  4050a6:	4770      	bx	lr

004050a8 <__udivmoddi4>:
  4050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4050ac:	468c      	mov	ip, r1
  4050ae:	460e      	mov	r6, r1
  4050b0:	4604      	mov	r4, r0
  4050b2:	9d08      	ldr	r5, [sp, #32]
  4050b4:	2b00      	cmp	r3, #0
  4050b6:	d150      	bne.n	40515a <__udivmoddi4+0xb2>
  4050b8:	428a      	cmp	r2, r1
  4050ba:	4617      	mov	r7, r2
  4050bc:	d96c      	bls.n	405198 <__udivmoddi4+0xf0>
  4050be:	fab2 fe82 	clz	lr, r2
  4050c2:	f1be 0f00 	cmp.w	lr, #0
  4050c6:	d00b      	beq.n	4050e0 <__udivmoddi4+0x38>
  4050c8:	f1ce 0420 	rsb	r4, lr, #32
  4050cc:	fa20 f404 	lsr.w	r4, r0, r4
  4050d0:	fa01 f60e 	lsl.w	r6, r1, lr
  4050d4:	ea44 0c06 	orr.w	ip, r4, r6
  4050d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4050dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4050e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4050e4:	0c22      	lsrs	r2, r4, #16
  4050e6:	fbbc f0f9 	udiv	r0, ip, r9
  4050ea:	fa1f f887 	uxth.w	r8, r7
  4050ee:	fb09 c610 	mls	r6, r9, r0, ip
  4050f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4050f6:	fb00 f308 	mul.w	r3, r0, r8
  4050fa:	42b3      	cmp	r3, r6
  4050fc:	d909      	bls.n	405112 <__udivmoddi4+0x6a>
  4050fe:	19f6      	adds	r6, r6, r7
  405100:	f100 32ff 	add.w	r2, r0, #4294967295
  405104:	f080 8122 	bcs.w	40534c <__udivmoddi4+0x2a4>
  405108:	42b3      	cmp	r3, r6
  40510a:	f240 811f 	bls.w	40534c <__udivmoddi4+0x2a4>
  40510e:	3802      	subs	r0, #2
  405110:	443e      	add	r6, r7
  405112:	1af6      	subs	r6, r6, r3
  405114:	b2a2      	uxth	r2, r4
  405116:	fbb6 f3f9 	udiv	r3, r6, r9
  40511a:	fb09 6613 	mls	r6, r9, r3, r6
  40511e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  405122:	fb03 f808 	mul.w	r8, r3, r8
  405126:	45a0      	cmp	r8, r4
  405128:	d909      	bls.n	40513e <__udivmoddi4+0x96>
  40512a:	19e4      	adds	r4, r4, r7
  40512c:	f103 32ff 	add.w	r2, r3, #4294967295
  405130:	f080 810a 	bcs.w	405348 <__udivmoddi4+0x2a0>
  405134:	45a0      	cmp	r8, r4
  405136:	f240 8107 	bls.w	405348 <__udivmoddi4+0x2a0>
  40513a:	3b02      	subs	r3, #2
  40513c:	443c      	add	r4, r7
  40513e:	ebc8 0404 	rsb	r4, r8, r4
  405142:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405146:	2100      	movs	r1, #0
  405148:	2d00      	cmp	r5, #0
  40514a:	d062      	beq.n	405212 <__udivmoddi4+0x16a>
  40514c:	fa24 f40e 	lsr.w	r4, r4, lr
  405150:	2300      	movs	r3, #0
  405152:	602c      	str	r4, [r5, #0]
  405154:	606b      	str	r3, [r5, #4]
  405156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40515a:	428b      	cmp	r3, r1
  40515c:	d907      	bls.n	40516e <__udivmoddi4+0xc6>
  40515e:	2d00      	cmp	r5, #0
  405160:	d055      	beq.n	40520e <__udivmoddi4+0x166>
  405162:	2100      	movs	r1, #0
  405164:	e885 0041 	stmia.w	r5, {r0, r6}
  405168:	4608      	mov	r0, r1
  40516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40516e:	fab3 f183 	clz	r1, r3
  405172:	2900      	cmp	r1, #0
  405174:	f040 8090 	bne.w	405298 <__udivmoddi4+0x1f0>
  405178:	42b3      	cmp	r3, r6
  40517a:	d302      	bcc.n	405182 <__udivmoddi4+0xda>
  40517c:	4282      	cmp	r2, r0
  40517e:	f200 80f8 	bhi.w	405372 <__udivmoddi4+0x2ca>
  405182:	1a84      	subs	r4, r0, r2
  405184:	eb66 0603 	sbc.w	r6, r6, r3
  405188:	2001      	movs	r0, #1
  40518a:	46b4      	mov	ip, r6
  40518c:	2d00      	cmp	r5, #0
  40518e:	d040      	beq.n	405212 <__udivmoddi4+0x16a>
  405190:	e885 1010 	stmia.w	r5, {r4, ip}
  405194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405198:	b912      	cbnz	r2, 4051a0 <__udivmoddi4+0xf8>
  40519a:	2701      	movs	r7, #1
  40519c:	fbb7 f7f2 	udiv	r7, r7, r2
  4051a0:	fab7 fe87 	clz	lr, r7
  4051a4:	f1be 0f00 	cmp.w	lr, #0
  4051a8:	d135      	bne.n	405216 <__udivmoddi4+0x16e>
  4051aa:	1bf3      	subs	r3, r6, r7
  4051ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4051b0:	fa1f fc87 	uxth.w	ip, r7
  4051b4:	2101      	movs	r1, #1
  4051b6:	fbb3 f0f8 	udiv	r0, r3, r8
  4051ba:	0c22      	lsrs	r2, r4, #16
  4051bc:	fb08 3610 	mls	r6, r8, r0, r3
  4051c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4051c4:	fb0c f300 	mul.w	r3, ip, r0
  4051c8:	42b3      	cmp	r3, r6
  4051ca:	d907      	bls.n	4051dc <__udivmoddi4+0x134>
  4051cc:	19f6      	adds	r6, r6, r7
  4051ce:	f100 32ff 	add.w	r2, r0, #4294967295
  4051d2:	d202      	bcs.n	4051da <__udivmoddi4+0x132>
  4051d4:	42b3      	cmp	r3, r6
  4051d6:	f200 80ce 	bhi.w	405376 <__udivmoddi4+0x2ce>
  4051da:	4610      	mov	r0, r2
  4051dc:	1af6      	subs	r6, r6, r3
  4051de:	b2a2      	uxth	r2, r4
  4051e0:	fbb6 f3f8 	udiv	r3, r6, r8
  4051e4:	fb08 6613 	mls	r6, r8, r3, r6
  4051e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4051ec:	fb0c fc03 	mul.w	ip, ip, r3
  4051f0:	45a4      	cmp	ip, r4
  4051f2:	d907      	bls.n	405204 <__udivmoddi4+0x15c>
  4051f4:	19e4      	adds	r4, r4, r7
  4051f6:	f103 32ff 	add.w	r2, r3, #4294967295
  4051fa:	d202      	bcs.n	405202 <__udivmoddi4+0x15a>
  4051fc:	45a4      	cmp	ip, r4
  4051fe:	f200 80b5 	bhi.w	40536c <__udivmoddi4+0x2c4>
  405202:	4613      	mov	r3, r2
  405204:	ebcc 0404 	rsb	r4, ip, r4
  405208:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40520c:	e79c      	b.n	405148 <__udivmoddi4+0xa0>
  40520e:	4629      	mov	r1, r5
  405210:	4628      	mov	r0, r5
  405212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405216:	f1ce 0120 	rsb	r1, lr, #32
  40521a:	fa06 f30e 	lsl.w	r3, r6, lr
  40521e:	fa07 f70e 	lsl.w	r7, r7, lr
  405222:	fa20 f901 	lsr.w	r9, r0, r1
  405226:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40522a:	40ce      	lsrs	r6, r1
  40522c:	ea49 0903 	orr.w	r9, r9, r3
  405230:	fbb6 faf8 	udiv	sl, r6, r8
  405234:	ea4f 4419 	mov.w	r4, r9, lsr #16
  405238:	fb08 661a 	mls	r6, r8, sl, r6
  40523c:	fa1f fc87 	uxth.w	ip, r7
  405240:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  405244:	fb0a f20c 	mul.w	r2, sl, ip
  405248:	429a      	cmp	r2, r3
  40524a:	fa00 f40e 	lsl.w	r4, r0, lr
  40524e:	d90a      	bls.n	405266 <__udivmoddi4+0x1be>
  405250:	19db      	adds	r3, r3, r7
  405252:	f10a 31ff 	add.w	r1, sl, #4294967295
  405256:	f080 8087 	bcs.w	405368 <__udivmoddi4+0x2c0>
  40525a:	429a      	cmp	r2, r3
  40525c:	f240 8084 	bls.w	405368 <__udivmoddi4+0x2c0>
  405260:	f1aa 0a02 	sub.w	sl, sl, #2
  405264:	443b      	add	r3, r7
  405266:	1a9b      	subs	r3, r3, r2
  405268:	fa1f f989 	uxth.w	r9, r9
  40526c:	fbb3 f1f8 	udiv	r1, r3, r8
  405270:	fb08 3311 	mls	r3, r8, r1, r3
  405274:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  405278:	fb01 f60c 	mul.w	r6, r1, ip
  40527c:	429e      	cmp	r6, r3
  40527e:	d907      	bls.n	405290 <__udivmoddi4+0x1e8>
  405280:	19db      	adds	r3, r3, r7
  405282:	f101 32ff 	add.w	r2, r1, #4294967295
  405286:	d26b      	bcs.n	405360 <__udivmoddi4+0x2b8>
  405288:	429e      	cmp	r6, r3
  40528a:	d969      	bls.n	405360 <__udivmoddi4+0x2b8>
  40528c:	3902      	subs	r1, #2
  40528e:	443b      	add	r3, r7
  405290:	1b9b      	subs	r3, r3, r6
  405292:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  405296:	e78e      	b.n	4051b6 <__udivmoddi4+0x10e>
  405298:	f1c1 0e20 	rsb	lr, r1, #32
  40529c:	fa22 f40e 	lsr.w	r4, r2, lr
  4052a0:	408b      	lsls	r3, r1
  4052a2:	4323      	orrs	r3, r4
  4052a4:	fa20 f70e 	lsr.w	r7, r0, lr
  4052a8:	fa06 f401 	lsl.w	r4, r6, r1
  4052ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4052b0:	fa26 f60e 	lsr.w	r6, r6, lr
  4052b4:	433c      	orrs	r4, r7
  4052b6:	fbb6 f9fc 	udiv	r9, r6, ip
  4052ba:	0c27      	lsrs	r7, r4, #16
  4052bc:	fb0c 6619 	mls	r6, ip, r9, r6
  4052c0:	fa1f f883 	uxth.w	r8, r3
  4052c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4052c8:	fb09 f708 	mul.w	r7, r9, r8
  4052cc:	42b7      	cmp	r7, r6
  4052ce:	fa02 f201 	lsl.w	r2, r2, r1
  4052d2:	fa00 fa01 	lsl.w	sl, r0, r1
  4052d6:	d908      	bls.n	4052ea <__udivmoddi4+0x242>
  4052d8:	18f6      	adds	r6, r6, r3
  4052da:	f109 30ff 	add.w	r0, r9, #4294967295
  4052de:	d241      	bcs.n	405364 <__udivmoddi4+0x2bc>
  4052e0:	42b7      	cmp	r7, r6
  4052e2:	d93f      	bls.n	405364 <__udivmoddi4+0x2bc>
  4052e4:	f1a9 0902 	sub.w	r9, r9, #2
  4052e8:	441e      	add	r6, r3
  4052ea:	1bf6      	subs	r6, r6, r7
  4052ec:	b2a0      	uxth	r0, r4
  4052ee:	fbb6 f4fc 	udiv	r4, r6, ip
  4052f2:	fb0c 6614 	mls	r6, ip, r4, r6
  4052f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4052fa:	fb04 f808 	mul.w	r8, r4, r8
  4052fe:	45b8      	cmp	r8, r7
  405300:	d907      	bls.n	405312 <__udivmoddi4+0x26a>
  405302:	18ff      	adds	r7, r7, r3
  405304:	f104 30ff 	add.w	r0, r4, #4294967295
  405308:	d228      	bcs.n	40535c <__udivmoddi4+0x2b4>
  40530a:	45b8      	cmp	r8, r7
  40530c:	d926      	bls.n	40535c <__udivmoddi4+0x2b4>
  40530e:	3c02      	subs	r4, #2
  405310:	441f      	add	r7, r3
  405312:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  405316:	ebc8 0707 	rsb	r7, r8, r7
  40531a:	fba0 8902 	umull	r8, r9, r0, r2
  40531e:	454f      	cmp	r7, r9
  405320:	4644      	mov	r4, r8
  405322:	464e      	mov	r6, r9
  405324:	d314      	bcc.n	405350 <__udivmoddi4+0x2a8>
  405326:	d029      	beq.n	40537c <__udivmoddi4+0x2d4>
  405328:	b365      	cbz	r5, 405384 <__udivmoddi4+0x2dc>
  40532a:	ebba 0304 	subs.w	r3, sl, r4
  40532e:	eb67 0706 	sbc.w	r7, r7, r6
  405332:	fa07 fe0e 	lsl.w	lr, r7, lr
  405336:	40cb      	lsrs	r3, r1
  405338:	40cf      	lsrs	r7, r1
  40533a:	ea4e 0303 	orr.w	r3, lr, r3
  40533e:	e885 0088 	stmia.w	r5, {r3, r7}
  405342:	2100      	movs	r1, #0
  405344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405348:	4613      	mov	r3, r2
  40534a:	e6f8      	b.n	40513e <__udivmoddi4+0x96>
  40534c:	4610      	mov	r0, r2
  40534e:	e6e0      	b.n	405112 <__udivmoddi4+0x6a>
  405350:	ebb8 0402 	subs.w	r4, r8, r2
  405354:	eb69 0603 	sbc.w	r6, r9, r3
  405358:	3801      	subs	r0, #1
  40535a:	e7e5      	b.n	405328 <__udivmoddi4+0x280>
  40535c:	4604      	mov	r4, r0
  40535e:	e7d8      	b.n	405312 <__udivmoddi4+0x26a>
  405360:	4611      	mov	r1, r2
  405362:	e795      	b.n	405290 <__udivmoddi4+0x1e8>
  405364:	4681      	mov	r9, r0
  405366:	e7c0      	b.n	4052ea <__udivmoddi4+0x242>
  405368:	468a      	mov	sl, r1
  40536a:	e77c      	b.n	405266 <__udivmoddi4+0x1be>
  40536c:	3b02      	subs	r3, #2
  40536e:	443c      	add	r4, r7
  405370:	e748      	b.n	405204 <__udivmoddi4+0x15c>
  405372:	4608      	mov	r0, r1
  405374:	e70a      	b.n	40518c <__udivmoddi4+0xe4>
  405376:	3802      	subs	r0, #2
  405378:	443e      	add	r6, r7
  40537a:	e72f      	b.n	4051dc <__udivmoddi4+0x134>
  40537c:	45c2      	cmp	sl, r8
  40537e:	d3e7      	bcc.n	405350 <__udivmoddi4+0x2a8>
  405380:	463e      	mov	r6, r7
  405382:	e7d1      	b.n	405328 <__udivmoddi4+0x280>
  405384:	4629      	mov	r1, r5
  405386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40538a:	bf00      	nop

0040538c <__aeabi_idiv0>:
  40538c:	4770      	bx	lr
  40538e:	bf00      	nop
  405390:	0001c200 	.word	0x0001c200
  405394:	000000c0 	.word	0x000000c0
  405398:	00000800 	.word	0x00000800
  40539c:	00000000 	.word	0x00000000
  4053a0:	47202d2d 	.word	0x47202d2d
  4053a4:	69747465 	.word	0x69747465
  4053a8:	5320676e 	.word	0x5320676e
  4053ac:	74726174 	.word	0x74726174
  4053b0:	45206465 	.word	0x45206465
  4053b4:	706d6178 	.word	0x706d6178
  4053b8:	2d20656c 	.word	0x2d20656c
  4053bc:	2d0a0d2d 	.word	0x2d0a0d2d
  4053c0:	4153202d 	.word	0x4153202d
  4053c4:	3037454d 	.word	0x3037454d
  4053c8:	4c50582d 	.word	0x4c50582d
  4053cc:	2d2d2044 	.word	0x2d2d2044
  4053d0:	2d2d0a0d 	.word	0x2d2d0a0d
  4053d4:	6d6f4320 	.word	0x6d6f4320
  4053d8:	656c6970 	.word	0x656c6970
  4053dc:	46203a64 	.word	0x46203a64
  4053e0:	32206265 	.word	0x32206265
  4053e4:	30322030 	.word	0x30322030
  4053e8:	31203731 	.word	0x31203731
  4053ec:	30313a37 	.word	0x30313a37
  4053f0:	2033353a 	.word	0x2033353a
  4053f4:	000d2d2d 	.word	0x000d2d2d
  4053f8:	666e6f43 	.word	0x666e6f43
  4053fc:	72756769 	.word	0x72756769
  405400:	79732065 	.word	0x79732065
  405404:	6d657473 	.word	0x6d657473
  405408:	63697420 	.word	0x63697420
  40540c:	6f74206b 	.word	0x6f74206b
  405410:	74656720 	.word	0x74656720
  405414:	736d3120 	.word	0x736d3120
  405418:	63697420 	.word	0x63697420
  40541c:	6570206b 	.word	0x6570206b
  405420:	646f6972 	.word	0x646f6972
  405424:	00000d2e 	.word	0x00000d2e
  405428:	202d462d 	.word	0x202d462d
  40542c:	74737953 	.word	0x74737953
  405430:	206b6369 	.word	0x206b6369
  405434:	666e6f63 	.word	0x666e6f63
  405438:	72756769 	.word	0x72756769
  40543c:	6f697461 	.word	0x6f697461
  405440:	7265206e 	.word	0x7265206e
  405444:	0d726f72 	.word	0x0d726f72
  405448:	00000000 	.word	0x00000000
  40544c:	666e6f43 	.word	0x666e6f43
  405450:	72756769 	.word	0x72756769
  405454:	75622065 	.word	0x75622065
  405458:	6e6f7474 	.word	0x6e6f7474
  40545c:	69772073 	.word	0x69772073
  405460:	64206874 	.word	0x64206874
  405464:	756f6265 	.word	0x756f6265
  405468:	6e69636e 	.word	0x6e69636e
  40546c:	000d2e67 	.word	0x000d2e67
  405470:	3044454c 	.word	0x3044454c
  405474:	65792820 	.word	0x65792820
  405478:	776f6c6c 	.word	0x776f6c6c
  40547c:	00000029 	.word	0x00000029
  405480:	00305753 	.word	0x00305753
  405484:	73657250 	.word	0x73657250
  405488:	73252073 	.word	0x73252073
  40548c:	206f7420 	.word	0x206f7420
  405490:	72617453 	.word	0x72617453
  405494:	74532f74 	.word	0x74532f74
  405498:	7420706f 	.word	0x7420706f
  40549c:	25206568 	.word	0x25206568
  4054a0:	6c622073 	.word	0x6c622073
  4054a4:	696b6e69 	.word	0x696b6e69
  4054a8:	0d2e676e 	.word	0x0d2e676e
  4054ac:	0000000a 	.word	0x0000000a
  4054b0:	00002031 	.word	0x00002031
  4054b4:	00000043 	.word	0x00000043

004054b8 <_global_impure_ptr>:
  4054b8:	20400010 0000000a                       ..@ ....

004054c0 <zeroes.6993>:
  4054c0:	30303030 30303030 30303030 30303030     0000000000000000
  4054d0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4054e0:	00000000 33323130 37363534 62613938     ....0123456789ab
  4054f0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00405500 <blanks.6992>:
  405500:	20202020 20202020 20202020 20202020                     

00405510 <_init>:
  405510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405512:	bf00      	nop
  405514:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405516:	bc08      	pop	{r3}
  405518:	469e      	mov	lr, r3
  40551a:	4770      	bx	lr

0040551c <__init_array_start>:
  40551c:	00403645 	.word	0x00403645

00405520 <__frame_dummy_init_array_entry>:
  405520:	00400165                                e.@.

00405524 <_fini>:
  405524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405526:	bf00      	nop
  405528:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40552a:	bc08      	pop	{r3}
  40552c:	469e      	mov	lr, r3
  40552e:	4770      	bx	lr

00405530 <__fini_array_start>:
  405530:	00400141 	.word	0x00400141
