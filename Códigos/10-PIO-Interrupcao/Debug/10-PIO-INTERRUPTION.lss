
10-PIO-INTERRUPTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d88  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401d88  00401d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000440  20400000  00401d90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000098  20400440  004021d0  00020440  2**2
                  ALLOC
  4 .stack        00002000  204004d8  00402268  00020440  2**0
                  ALLOC
  5 .heap         00000200  204024d8  00404268  00020440  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00007943  00000000  00000000  000204c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001120  00000000  00000000  00027e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003810  00000000  00000000  00028f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000670  00000000  00000000  0002c73a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  0002cdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c366  00000000  00000000  0002d37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000076b1  00000000  00000000  000496e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00088fad  00000000  00000000  00050d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001b80  00000000  00000000  000d9d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204024d8 	.word	0x204024d8
  400004:	0040113d 	.word	0x0040113d
  400008:	004011ed 	.word	0x004011ed
  40000c:	004011ed 	.word	0x004011ed
  400010:	004011ed 	.word	0x004011ed
  400014:	004011ed 	.word	0x004011ed
  400018:	004011ed 	.word	0x004011ed
	...
  40002c:	004011ed 	.word	0x004011ed
  400030:	004011ed 	.word	0x004011ed
  400034:	00000000 	.word	0x00000000
  400038:	004011ed 	.word	0x004011ed
  40003c:	004011ed 	.word	0x004011ed
  400040:	004011ed 	.word	0x004011ed
  400044:	004011ed 	.word	0x004011ed
  400048:	004011ed 	.word	0x004011ed
  40004c:	004011ed 	.word	0x004011ed
  400050:	004011ed 	.word	0x004011ed
  400054:	004011ed 	.word	0x004011ed
  400058:	004011ed 	.word	0x004011ed
  40005c:	004011ed 	.word	0x004011ed
  400060:	004011ed 	.word	0x004011ed
  400064:	00000000 	.word	0x00000000
  400068:	004008b1 	.word	0x004008b1
  40006c:	004008c9 	.word	0x004008c9
  400070:	004008e1 	.word	0x004008e1
  400074:	004011ed 	.word	0x004011ed
  400078:	004011ed 	.word	0x004011ed
  40007c:	004011ed 	.word	0x004011ed
  400080:	004008f9 	.word	0x004008f9
  400084:	00400911 	.word	0x00400911
  400088:	004011ed 	.word	0x004011ed
  40008c:	004011ed 	.word	0x004011ed
  400090:	004011ed 	.word	0x004011ed
  400094:	004011ed 	.word	0x004011ed
  400098:	004011ed 	.word	0x004011ed
  40009c:	004011ed 	.word	0x004011ed
  4000a0:	004011ed 	.word	0x004011ed
  4000a4:	004011ed 	.word	0x004011ed
  4000a8:	004011ed 	.word	0x004011ed
  4000ac:	004011ed 	.word	0x004011ed
  4000b0:	004011ed 	.word	0x004011ed
  4000b4:	004011ed 	.word	0x004011ed
  4000b8:	004011ed 	.word	0x004011ed
  4000bc:	004011ed 	.word	0x004011ed
  4000c0:	004011ed 	.word	0x004011ed
  4000c4:	004011ed 	.word	0x004011ed
  4000c8:	004011ed 	.word	0x004011ed
  4000cc:	004011ed 	.word	0x004011ed
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004011ed 	.word	0x004011ed
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004011ed 	.word	0x004011ed
  4000e0:	004011ed 	.word	0x004011ed
  4000e4:	004011ed 	.word	0x004011ed
  4000e8:	004011ed 	.word	0x004011ed
  4000ec:	004011ed 	.word	0x004011ed
  4000f0:	004011ed 	.word	0x004011ed
  4000f4:	004011ed 	.word	0x004011ed
  4000f8:	004011ed 	.word	0x004011ed
  4000fc:	004011ed 	.word	0x004011ed
  400100:	004011ed 	.word	0x004011ed
  400104:	004011ed 	.word	0x004011ed
  400108:	004011ed 	.word	0x004011ed
  40010c:	004011ed 	.word	0x004011ed
  400110:	004011ed 	.word	0x004011ed
	...
  400120:	004011ed 	.word	0x004011ed
  400124:	004011ed 	.word	0x004011ed
  400128:	004011ed 	.word	0x004011ed
  40012c:	004011ed 	.word	0x004011ed
  400130:	004011ed 	.word	0x004011ed
  400134:	00000000 	.word	0x00000000
  400138:	004011ed 	.word	0x004011ed
  40013c:	004011ed 	.word	0x004011ed

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400440 	.word	0x20400440
  40015c:	00000000 	.word	0x00000000
  400160:	00401d90 	.word	0x00401d90

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400444 	.word	0x20400444
  400190:	00401d90 	.word	0x00401d90
  400194:	00401d90 	.word	0x00401d90
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00400a29 	.word	0x00400a29
  40021c:	00400a95 	.word	0x00400a95
  400220:	00400b05 	.word	0x00400b05

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	00400a61 	.word	0x00400a61
  400290:	00400b7d 	.word	0x00400b7d

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	00400b99 	.word	0x00400b99
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00400bb5 	.word	0x00400bb5
  400408:	00400bd1 	.word	0x00400bd1

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	00401361 	.word	0x00401361
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	00400929 	.word	0x00400929
  40050c:	004009a5 	.word	0x004009a5
  400510:	004011f5 	.word	0x004011f5
  400514:	00400489 	.word	0x00400489

00400518 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400518:	b480      	push	{r7}
  40051a:	b085      	sub	sp, #20
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	2b00      	cmp	r3, #0
  400528:	d003      	beq.n	400532 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40052a:	68fb      	ldr	r3, [r7, #12]
  40052c:	68ba      	ldr	r2, [r7, #8]
  40052e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400530:	e002      	b.n	400538 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400532:	68fb      	ldr	r3, [r7, #12]
  400534:	68ba      	ldr	r2, [r7, #8]
  400536:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400538:	bf00      	nop
  40053a:	3714      	adds	r7, #20
  40053c:	46bd      	mov	sp, r7
  40053e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400542:	4770      	bx	lr

00400544 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400544:	b480      	push	{r7}
  400546:	b083      	sub	sp, #12
  400548:	af00      	add	r7, sp, #0
  40054a:	6078      	str	r0, [r7, #4]
  40054c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	683a      	ldr	r2, [r7, #0]
  400552:	631a      	str	r2, [r3, #48]	; 0x30
}
  400554:	bf00      	nop
  400556:	370c      	adds	r7, #12
  400558:	46bd      	mov	sp, r7
  40055a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055e:	4770      	bx	lr

00400560 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	6078      	str	r0, [r7, #4]
  400568:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40056a:	687b      	ldr	r3, [r7, #4]
  40056c:	683a      	ldr	r2, [r7, #0]
  40056e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400570:	bf00      	nop
  400572:	370c      	adds	r7, #12
  400574:	46bd      	mov	sp, r7
  400576:	f85d 7b04 	ldr.w	r7, [sp], #4
  40057a:	4770      	bx	lr

0040057c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40057c:	b580      	push	{r7, lr}
  40057e:	b084      	sub	sp, #16
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400588:	68b9      	ldr	r1, [r7, #8]
  40058a:	68f8      	ldr	r0, [r7, #12]
  40058c:	4b19      	ldr	r3, [pc, #100]	; (4005f4 <pio_set_input+0x78>)
  40058e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400590:	687b      	ldr	r3, [r7, #4]
  400592:	f003 0301 	and.w	r3, r3, #1
  400596:	461a      	mov	r2, r3
  400598:	68b9      	ldr	r1, [r7, #8]
  40059a:	68f8      	ldr	r0, [r7, #12]
  40059c:	4b16      	ldr	r3, [pc, #88]	; (4005f8 <pio_set_input+0x7c>)
  40059e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	f003 030a 	and.w	r3, r3, #10
  4005a6:	2b00      	cmp	r3, #0
  4005a8:	d003      	beq.n	4005b2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4005aa:	68fb      	ldr	r3, [r7, #12]
  4005ac:	68ba      	ldr	r2, [r7, #8]
  4005ae:	621a      	str	r2, [r3, #32]
  4005b0:	e002      	b.n	4005b8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4005b2:	68fb      	ldr	r3, [r7, #12]
  4005b4:	68ba      	ldr	r2, [r7, #8]
  4005b6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4005b8:	687b      	ldr	r3, [r7, #4]
  4005ba:	f003 0302 	and.w	r3, r3, #2
  4005be:	2b00      	cmp	r3, #0
  4005c0:	d004      	beq.n	4005cc <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4005c2:	68fb      	ldr	r3, [r7, #12]
  4005c4:	68ba      	ldr	r2, [r7, #8]
  4005c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4005ca:	e008      	b.n	4005de <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4005cc:	687b      	ldr	r3, [r7, #4]
  4005ce:	f003 0308 	and.w	r3, r3, #8
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d003      	beq.n	4005de <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4005de:	68fb      	ldr	r3, [r7, #12]
  4005e0:	68ba      	ldr	r2, [r7, #8]
  4005e2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	601a      	str	r2, [r3, #0]
}
  4005ea:	bf00      	nop
  4005ec:	3710      	adds	r7, #16
  4005ee:	46bd      	mov	sp, r7
  4005f0:	bd80      	pop	{r7, pc}
  4005f2:	bf00      	nop
  4005f4:	00400711 	.word	0x00400711
  4005f8:	00400519 	.word	0x00400519

004005fc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4005fc:	b580      	push	{r7, lr}
  4005fe:	b084      	sub	sp, #16
  400600:	af00      	add	r7, sp, #0
  400602:	60f8      	str	r0, [r7, #12]
  400604:	60b9      	str	r1, [r7, #8]
  400606:	607a      	str	r2, [r7, #4]
  400608:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40060a:	68b9      	ldr	r1, [r7, #8]
  40060c:	68f8      	ldr	r0, [r7, #12]
  40060e:	4b12      	ldr	r3, [pc, #72]	; (400658 <pio_set_output+0x5c>)
  400610:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400612:	69ba      	ldr	r2, [r7, #24]
  400614:	68b9      	ldr	r1, [r7, #8]
  400616:	68f8      	ldr	r0, [r7, #12]
  400618:	4b10      	ldr	r3, [pc, #64]	; (40065c <pio_set_output+0x60>)
  40061a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40061c:	683b      	ldr	r3, [r7, #0]
  40061e:	2b00      	cmp	r3, #0
  400620:	d003      	beq.n	40062a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400622:	68fb      	ldr	r3, [r7, #12]
  400624:	68ba      	ldr	r2, [r7, #8]
  400626:	651a      	str	r2, [r3, #80]	; 0x50
  400628:	e002      	b.n	400630 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40062a:	68fb      	ldr	r3, [r7, #12]
  40062c:	68ba      	ldr	r2, [r7, #8]
  40062e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400630:	687b      	ldr	r3, [r7, #4]
  400632:	2b00      	cmp	r3, #0
  400634:	d003      	beq.n	40063e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	68ba      	ldr	r2, [r7, #8]
  40063a:	631a      	str	r2, [r3, #48]	; 0x30
  40063c:	e002      	b.n	400644 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40063e:	68fb      	ldr	r3, [r7, #12]
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400644:	68fb      	ldr	r3, [r7, #12]
  400646:	68ba      	ldr	r2, [r7, #8]
  400648:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	68ba      	ldr	r2, [r7, #8]
  40064e:	601a      	str	r2, [r3, #0]
}
  400650:	bf00      	nop
  400652:	3710      	adds	r7, #16
  400654:	46bd      	mov	sp, r7
  400656:	bd80      	pop	{r7, pc}
  400658:	00400711 	.word	0x00400711
  40065c:	00400519 	.word	0x00400519

00400660 <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  400660:	b480      	push	{r7}
  400662:	b083      	sub	sp, #12
  400664:	af00      	add	r7, sp, #0
  400666:	6078      	str	r0, [r7, #4]
  400668:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40066e:	683b      	ldr	r3, [r7, #0]
  400670:	4013      	ands	r3, r2
  400672:	2b00      	cmp	r3, #0
  400674:	d101      	bne.n	40067a <pio_get_output_data_status+0x1a>
		return 0;
  400676:	2300      	movs	r3, #0
  400678:	e000      	b.n	40067c <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  40067a:	2301      	movs	r3, #1
	}
}
  40067c:	4618      	mov	r0, r3
  40067e:	370c      	adds	r7, #12
  400680:	46bd      	mov	sp, r7
  400682:	f85d 7b04 	ldr.w	r7, [sp], #4
  400686:	4770      	bx	lr

00400688 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400688:	b480      	push	{r7}
  40068a:	b085      	sub	sp, #20
  40068c:	af00      	add	r7, sp, #0
  40068e:	60f8      	str	r0, [r7, #12]
  400690:	60b9      	str	r1, [r7, #8]
  400692:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	f003 0310 	and.w	r3, r3, #16
  40069a:	2b00      	cmp	r3, #0
  40069c:	d020      	beq.n	4006e0 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40069e:	68fb      	ldr	r3, [r7, #12]
  4006a0:	68ba      	ldr	r2, [r7, #8]
  4006a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4006a6:	687b      	ldr	r3, [r7, #4]
  4006a8:	f003 0320 	and.w	r3, r3, #32
  4006ac:	2b00      	cmp	r3, #0
  4006ae:	d004      	beq.n	4006ba <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4006b0:	68fb      	ldr	r3, [r7, #12]
  4006b2:	68ba      	ldr	r2, [r7, #8]
  4006b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4006b8:	e003      	b.n	4006c2 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4006c2:	687b      	ldr	r3, [r7, #4]
  4006c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4006c8:	2b00      	cmp	r3, #0
  4006ca:	d004      	beq.n	4006d6 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4006cc:	68fb      	ldr	r3, [r7, #12]
  4006ce:	68ba      	ldr	r2, [r7, #8]
  4006d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4006d4:	e008      	b.n	4006e8 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4006d6:	68fb      	ldr	r3, [r7, #12]
  4006d8:	68ba      	ldr	r2, [r7, #8]
  4006da:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4006de:	e003      	b.n	4006e8 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4006e0:	68fb      	ldr	r3, [r7, #12]
  4006e2:	68ba      	ldr	r2, [r7, #8]
  4006e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  4006e8:	bf00      	nop
  4006ea:	3714      	adds	r7, #20
  4006ec:	46bd      	mov	sp, r7
  4006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006f2:	4770      	bx	lr

004006f4 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4006f4:	b480      	push	{r7}
  4006f6:	b083      	sub	sp, #12
  4006f8:	af00      	add	r7, sp, #0
  4006fa:	6078      	str	r0, [r7, #4]
  4006fc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4006fe:	687b      	ldr	r3, [r7, #4]
  400700:	683a      	ldr	r2, [r7, #0]
  400702:	641a      	str	r2, [r3, #64]	; 0x40
}
  400704:	bf00      	nop
  400706:	370c      	adds	r7, #12
  400708:	46bd      	mov	sp, r7
  40070a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40070e:	4770      	bx	lr

00400710 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400710:	b480      	push	{r7}
  400712:	b083      	sub	sp, #12
  400714:	af00      	add	r7, sp, #0
  400716:	6078      	str	r0, [r7, #4]
  400718:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40071a:	687b      	ldr	r3, [r7, #4]
  40071c:	683a      	ldr	r2, [r7, #0]
  40071e:	645a      	str	r2, [r3, #68]	; 0x44
}
  400720:	bf00      	nop
  400722:	370c      	adds	r7, #12
  400724:	46bd      	mov	sp, r7
  400726:	f85d 7b04 	ldr.w	r7, [sp], #4
  40072a:	4770      	bx	lr

0040072c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40072c:	b480      	push	{r7}
  40072e:	b083      	sub	sp, #12
  400730:	af00      	add	r7, sp, #0
  400732:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400738:	4618      	mov	r0, r3
  40073a:	370c      	adds	r7, #12
  40073c:	46bd      	mov	sp, r7
  40073e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400742:	4770      	bx	lr

00400744 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400744:	b480      	push	{r7}
  400746:	b083      	sub	sp, #12
  400748:	af00      	add	r7, sp, #0
  40074a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40074c:	687b      	ldr	r3, [r7, #4]
  40074e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400750:	4618      	mov	r0, r3
  400752:	370c      	adds	r7, #12
  400754:	46bd      	mov	sp, r7
  400756:	f85d 7b04 	ldr.w	r7, [sp], #4
  40075a:	4770      	bx	lr

0040075c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40075c:	b580      	push	{r7, lr}
  40075e:	b084      	sub	sp, #16
  400760:	af00      	add	r7, sp, #0
  400762:	6078      	str	r0, [r7, #4]
  400764:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400766:	6878      	ldr	r0, [r7, #4]
  400768:	4b26      	ldr	r3, [pc, #152]	; (400804 <pio_handler_process+0xa8>)
  40076a:	4798      	blx	r3
  40076c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40076e:	6878      	ldr	r0, [r7, #4]
  400770:	4b25      	ldr	r3, [pc, #148]	; (400808 <pio_handler_process+0xac>)
  400772:	4798      	blx	r3
  400774:	4602      	mov	r2, r0
  400776:	68fb      	ldr	r3, [r7, #12]
  400778:	4013      	ands	r3, r2
  40077a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40077c:	68fb      	ldr	r3, [r7, #12]
  40077e:	2b00      	cmp	r3, #0
  400780:	d03c      	beq.n	4007fc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400782:	2300      	movs	r3, #0
  400784:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400786:	e034      	b.n	4007f2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400788:	4a20      	ldr	r2, [pc, #128]	; (40080c <pio_handler_process+0xb0>)
  40078a:	68bb      	ldr	r3, [r7, #8]
  40078c:	011b      	lsls	r3, r3, #4
  40078e:	4413      	add	r3, r2
  400790:	681a      	ldr	r2, [r3, #0]
  400792:	683b      	ldr	r3, [r7, #0]
  400794:	429a      	cmp	r2, r3
  400796:	d126      	bne.n	4007e6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400798:	4a1c      	ldr	r2, [pc, #112]	; (40080c <pio_handler_process+0xb0>)
  40079a:	68bb      	ldr	r3, [r7, #8]
  40079c:	011b      	lsls	r3, r3, #4
  40079e:	4413      	add	r3, r2
  4007a0:	3304      	adds	r3, #4
  4007a2:	681a      	ldr	r2, [r3, #0]
  4007a4:	68fb      	ldr	r3, [r7, #12]
  4007a6:	4013      	ands	r3, r2
  4007a8:	2b00      	cmp	r3, #0
  4007aa:	d01c      	beq.n	4007e6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007ac:	4a17      	ldr	r2, [pc, #92]	; (40080c <pio_handler_process+0xb0>)
  4007ae:	68bb      	ldr	r3, [r7, #8]
  4007b0:	011b      	lsls	r3, r3, #4
  4007b2:	4413      	add	r3, r2
  4007b4:	330c      	adds	r3, #12
  4007b6:	681b      	ldr	r3, [r3, #0]
  4007b8:	4914      	ldr	r1, [pc, #80]	; (40080c <pio_handler_process+0xb0>)
  4007ba:	68ba      	ldr	r2, [r7, #8]
  4007bc:	0112      	lsls	r2, r2, #4
  4007be:	440a      	add	r2, r1
  4007c0:	6810      	ldr	r0, [r2, #0]
  4007c2:	4912      	ldr	r1, [pc, #72]	; (40080c <pio_handler_process+0xb0>)
  4007c4:	68ba      	ldr	r2, [r7, #8]
  4007c6:	0112      	lsls	r2, r2, #4
  4007c8:	440a      	add	r2, r1
  4007ca:	3204      	adds	r2, #4
  4007cc:	6812      	ldr	r2, [r2, #0]
  4007ce:	4611      	mov	r1, r2
  4007d0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4007d2:	4a0e      	ldr	r2, [pc, #56]	; (40080c <pio_handler_process+0xb0>)
  4007d4:	68bb      	ldr	r3, [r7, #8]
  4007d6:	011b      	lsls	r3, r3, #4
  4007d8:	4413      	add	r3, r2
  4007da:	3304      	adds	r3, #4
  4007dc:	681b      	ldr	r3, [r3, #0]
  4007de:	43db      	mvns	r3, r3
  4007e0:	68fa      	ldr	r2, [r7, #12]
  4007e2:	4013      	ands	r3, r2
  4007e4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4007e6:	68bb      	ldr	r3, [r7, #8]
  4007e8:	3301      	adds	r3, #1
  4007ea:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4007ec:	68bb      	ldr	r3, [r7, #8]
  4007ee:	2b06      	cmp	r3, #6
  4007f0:	d803      	bhi.n	4007fa <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	2b00      	cmp	r3, #0
  4007f6:	d1c7      	bne.n	400788 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4007f8:	e000      	b.n	4007fc <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4007fa:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4007fc:	bf00      	nop
  4007fe:	3710      	adds	r7, #16
  400800:	46bd      	mov	sp, r7
  400802:	bd80      	pop	{r7, pc}
  400804:	0040072d 	.word	0x0040072d
  400808:	00400745 	.word	0x00400745
  40080c:	2040045c 	.word	0x2040045c

00400810 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400810:	b580      	push	{r7, lr}
  400812:	b086      	sub	sp, #24
  400814:	af00      	add	r7, sp, #0
  400816:	60f8      	str	r0, [r7, #12]
  400818:	60b9      	str	r1, [r7, #8]
  40081a:	607a      	str	r2, [r7, #4]
  40081c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40081e:	4b21      	ldr	r3, [pc, #132]	; (4008a4 <pio_handler_set+0x94>)
  400820:	681b      	ldr	r3, [r3, #0]
  400822:	2b06      	cmp	r3, #6
  400824:	d901      	bls.n	40082a <pio_handler_set+0x1a>
		return 1;
  400826:	2301      	movs	r3, #1
  400828:	e038      	b.n	40089c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40082a:	2300      	movs	r3, #0
  40082c:	75fb      	strb	r3, [r7, #23]
  40082e:	e011      	b.n	400854 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400830:	7dfb      	ldrb	r3, [r7, #23]
  400832:	011b      	lsls	r3, r3, #4
  400834:	4a1c      	ldr	r2, [pc, #112]	; (4008a8 <pio_handler_set+0x98>)
  400836:	4413      	add	r3, r2
  400838:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40083a:	693b      	ldr	r3, [r7, #16]
  40083c:	681a      	ldr	r2, [r3, #0]
  40083e:	68bb      	ldr	r3, [r7, #8]
  400840:	429a      	cmp	r2, r3
  400842:	d104      	bne.n	40084e <pio_handler_set+0x3e>
  400844:	693b      	ldr	r3, [r7, #16]
  400846:	685a      	ldr	r2, [r3, #4]
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	429a      	cmp	r2, r3
  40084c:	d008      	beq.n	400860 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40084e:	7dfb      	ldrb	r3, [r7, #23]
  400850:	3301      	adds	r3, #1
  400852:	75fb      	strb	r3, [r7, #23]
  400854:	7dfa      	ldrb	r2, [r7, #23]
  400856:	4b13      	ldr	r3, [pc, #76]	; (4008a4 <pio_handler_set+0x94>)
  400858:	681b      	ldr	r3, [r3, #0]
  40085a:	429a      	cmp	r2, r3
  40085c:	d9e8      	bls.n	400830 <pio_handler_set+0x20>
  40085e:	e000      	b.n	400862 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  400860:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400862:	693b      	ldr	r3, [r7, #16]
  400864:	68ba      	ldr	r2, [r7, #8]
  400866:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400868:	693b      	ldr	r3, [r7, #16]
  40086a:	687a      	ldr	r2, [r7, #4]
  40086c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40086e:	693b      	ldr	r3, [r7, #16]
  400870:	683a      	ldr	r2, [r7, #0]
  400872:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400874:	693b      	ldr	r3, [r7, #16]
  400876:	6a3a      	ldr	r2, [r7, #32]
  400878:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40087a:	7dfa      	ldrb	r2, [r7, #23]
  40087c:	4b09      	ldr	r3, [pc, #36]	; (4008a4 <pio_handler_set+0x94>)
  40087e:	681b      	ldr	r3, [r3, #0]
  400880:	3301      	adds	r3, #1
  400882:	429a      	cmp	r2, r3
  400884:	d104      	bne.n	400890 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400886:	4b07      	ldr	r3, [pc, #28]	; (4008a4 <pio_handler_set+0x94>)
  400888:	681b      	ldr	r3, [r3, #0]
  40088a:	3301      	adds	r3, #1
  40088c:	4a05      	ldr	r2, [pc, #20]	; (4008a4 <pio_handler_set+0x94>)
  40088e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400890:	683a      	ldr	r2, [r7, #0]
  400892:	6879      	ldr	r1, [r7, #4]
  400894:	68f8      	ldr	r0, [r7, #12]
  400896:	4b05      	ldr	r3, [pc, #20]	; (4008ac <pio_handler_set+0x9c>)
  400898:	4798      	blx	r3

	return 0;
  40089a:	2300      	movs	r3, #0
}
  40089c:	4618      	mov	r0, r3
  40089e:	3718      	adds	r7, #24
  4008a0:	46bd      	mov	sp, r7
  4008a2:	bd80      	pop	{r7, pc}
  4008a4:	204004cc 	.word	0x204004cc
  4008a8:	2040045c 	.word	0x2040045c
  4008ac:	00400689 	.word	0x00400689

004008b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4008b0:	b580      	push	{r7, lr}
  4008b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4008b4:	210a      	movs	r1, #10
  4008b6:	4802      	ldr	r0, [pc, #8]	; (4008c0 <PIOA_Handler+0x10>)
  4008b8:	4b02      	ldr	r3, [pc, #8]	; (4008c4 <PIOA_Handler+0x14>)
  4008ba:	4798      	blx	r3
}
  4008bc:	bf00      	nop
  4008be:	bd80      	pop	{r7, pc}
  4008c0:	400e0e00 	.word	0x400e0e00
  4008c4:	0040075d 	.word	0x0040075d

004008c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4008c8:	b580      	push	{r7, lr}
  4008ca:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4008cc:	210b      	movs	r1, #11
  4008ce:	4802      	ldr	r0, [pc, #8]	; (4008d8 <PIOB_Handler+0x10>)
  4008d0:	4b02      	ldr	r3, [pc, #8]	; (4008dc <PIOB_Handler+0x14>)
  4008d2:	4798      	blx	r3
}
  4008d4:	bf00      	nop
  4008d6:	bd80      	pop	{r7, pc}
  4008d8:	400e1000 	.word	0x400e1000
  4008dc:	0040075d 	.word	0x0040075d

004008e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4008e0:	b580      	push	{r7, lr}
  4008e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4008e4:	210c      	movs	r1, #12
  4008e6:	4802      	ldr	r0, [pc, #8]	; (4008f0 <PIOC_Handler+0x10>)
  4008e8:	4b02      	ldr	r3, [pc, #8]	; (4008f4 <PIOC_Handler+0x14>)
  4008ea:	4798      	blx	r3
}
  4008ec:	bf00      	nop
  4008ee:	bd80      	pop	{r7, pc}
  4008f0:	400e1200 	.word	0x400e1200
  4008f4:	0040075d 	.word	0x0040075d

004008f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4008f8:	b580      	push	{r7, lr}
  4008fa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4008fc:	2110      	movs	r1, #16
  4008fe:	4802      	ldr	r0, [pc, #8]	; (400908 <PIOD_Handler+0x10>)
  400900:	4b02      	ldr	r3, [pc, #8]	; (40090c <PIOD_Handler+0x14>)
  400902:	4798      	blx	r3
}
  400904:	bf00      	nop
  400906:	bd80      	pop	{r7, pc}
  400908:	400e1400 	.word	0x400e1400
  40090c:	0040075d 	.word	0x0040075d

00400910 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400910:	b580      	push	{r7, lr}
  400912:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400914:	2111      	movs	r1, #17
  400916:	4802      	ldr	r0, [pc, #8]	; (400920 <PIOE_Handler+0x10>)
  400918:	4b02      	ldr	r3, [pc, #8]	; (400924 <PIOE_Handler+0x14>)
  40091a:	4798      	blx	r3
}
  40091c:	bf00      	nop
  40091e:	bd80      	pop	{r7, pc}
  400920:	400e1600 	.word	0x400e1600
  400924:	0040075d 	.word	0x0040075d

00400928 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400928:	b480      	push	{r7}
  40092a:	b083      	sub	sp, #12
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400930:	687b      	ldr	r3, [r7, #4]
  400932:	3b01      	subs	r3, #1
  400934:	2b03      	cmp	r3, #3
  400936:	d81a      	bhi.n	40096e <pmc_mck_set_division+0x46>
  400938:	a201      	add	r2, pc, #4	; (adr r2, 400940 <pmc_mck_set_division+0x18>)
  40093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40093e:	bf00      	nop
  400940:	00400951 	.word	0x00400951
  400944:	00400957 	.word	0x00400957
  400948:	0040095f 	.word	0x0040095f
  40094c:	00400967 	.word	0x00400967
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400950:	2300      	movs	r3, #0
  400952:	607b      	str	r3, [r7, #4]
			break;
  400954:	e00e      	b.n	400974 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400956:	f44f 7380 	mov.w	r3, #256	; 0x100
  40095a:	607b      	str	r3, [r7, #4]
			break;
  40095c:	e00a      	b.n	400974 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40095e:	f44f 7340 	mov.w	r3, #768	; 0x300
  400962:	607b      	str	r3, [r7, #4]
			break;
  400964:	e006      	b.n	400974 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400966:	f44f 7300 	mov.w	r3, #512	; 0x200
  40096a:	607b      	str	r3, [r7, #4]
			break;
  40096c:	e002      	b.n	400974 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40096e:	2300      	movs	r3, #0
  400970:	607b      	str	r3, [r7, #4]
			break;
  400972:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400974:	490a      	ldr	r1, [pc, #40]	; (4009a0 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400976:	4b0a      	ldr	r3, [pc, #40]	; (4009a0 <pmc_mck_set_division+0x78>)
  400978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40097a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40097e:	687b      	ldr	r3, [r7, #4]
  400980:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400982:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400984:	bf00      	nop
  400986:	4b06      	ldr	r3, [pc, #24]	; (4009a0 <pmc_mck_set_division+0x78>)
  400988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40098a:	f003 0308 	and.w	r3, r3, #8
  40098e:	2b00      	cmp	r3, #0
  400990:	d0f9      	beq.n	400986 <pmc_mck_set_division+0x5e>
}
  400992:	bf00      	nop
  400994:	370c      	adds	r7, #12
  400996:	46bd      	mov	sp, r7
  400998:	f85d 7b04 	ldr.w	r7, [sp], #4
  40099c:	4770      	bx	lr
  40099e:	bf00      	nop
  4009a0:	400e0600 	.word	0x400e0600

004009a4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4009a4:	b480      	push	{r7}
  4009a6:	b085      	sub	sp, #20
  4009a8:	af00      	add	r7, sp, #0
  4009aa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4009ac:	491d      	ldr	r1, [pc, #116]	; (400a24 <pmc_switch_mck_to_pllack+0x80>)
  4009ae:	4b1d      	ldr	r3, [pc, #116]	; (400a24 <pmc_switch_mck_to_pllack+0x80>)
  4009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4009b6:	687b      	ldr	r3, [r7, #4]
  4009b8:	4313      	orrs	r3, r2
  4009ba:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4009c0:	60fb      	str	r3, [r7, #12]
  4009c2:	e007      	b.n	4009d4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009c4:	68fb      	ldr	r3, [r7, #12]
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	d101      	bne.n	4009ce <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4009ca:	2301      	movs	r3, #1
  4009cc:	e023      	b.n	400a16 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4009ce:	68fb      	ldr	r3, [r7, #12]
  4009d0:	3b01      	subs	r3, #1
  4009d2:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009d4:	4b13      	ldr	r3, [pc, #76]	; (400a24 <pmc_switch_mck_to_pllack+0x80>)
  4009d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009d8:	f003 0308 	and.w	r3, r3, #8
  4009dc:	2b00      	cmp	r3, #0
  4009de:	d0f1      	beq.n	4009c4 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4009e0:	4a10      	ldr	r2, [pc, #64]	; (400a24 <pmc_switch_mck_to_pllack+0x80>)
  4009e2:	4b10      	ldr	r3, [pc, #64]	; (400a24 <pmc_switch_mck_to_pllack+0x80>)
  4009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009e6:	f023 0303 	bic.w	r3, r3, #3
  4009ea:	f043 0302 	orr.w	r3, r3, #2
  4009ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4009f4:	60fb      	str	r3, [r7, #12]
  4009f6:	e007      	b.n	400a08 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009f8:	68fb      	ldr	r3, [r7, #12]
  4009fa:	2b00      	cmp	r3, #0
  4009fc:	d101      	bne.n	400a02 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4009fe:	2301      	movs	r3, #1
  400a00:	e009      	b.n	400a16 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	3b01      	subs	r3, #1
  400a06:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a08:	4b06      	ldr	r3, [pc, #24]	; (400a24 <pmc_switch_mck_to_pllack+0x80>)
  400a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a0c:	f003 0308 	and.w	r3, r3, #8
  400a10:	2b00      	cmp	r3, #0
  400a12:	d0f1      	beq.n	4009f8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400a14:	2300      	movs	r3, #0
}
  400a16:	4618      	mov	r0, r3
  400a18:	3714      	adds	r7, #20
  400a1a:	46bd      	mov	sp, r7
  400a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	400e0600 	.word	0x400e0600

00400a28 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400a28:	b480      	push	{r7}
  400a2a:	b083      	sub	sp, #12
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400a30:	687b      	ldr	r3, [r7, #4]
  400a32:	2b01      	cmp	r3, #1
  400a34:	d105      	bne.n	400a42 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400a36:	4907      	ldr	r1, [pc, #28]	; (400a54 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400a38:	4b06      	ldr	r3, [pc, #24]	; (400a54 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400a3a:	689a      	ldr	r2, [r3, #8]
  400a3c:	4b06      	ldr	r3, [pc, #24]	; (400a58 <pmc_switch_sclk_to_32kxtal+0x30>)
  400a3e:	4313      	orrs	r3, r2
  400a40:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400a42:	4b04      	ldr	r3, [pc, #16]	; (400a54 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400a44:	4a05      	ldr	r2, [pc, #20]	; (400a5c <pmc_switch_sclk_to_32kxtal+0x34>)
  400a46:	601a      	str	r2, [r3, #0]
}
  400a48:	bf00      	nop
  400a4a:	370c      	adds	r7, #12
  400a4c:	46bd      	mov	sp, r7
  400a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a52:	4770      	bx	lr
  400a54:	400e1810 	.word	0x400e1810
  400a58:	a5100000 	.word	0xa5100000
  400a5c:	a5000008 	.word	0xa5000008

00400a60 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400a60:	b480      	push	{r7}
  400a62:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400a64:	4b09      	ldr	r3, [pc, #36]	; (400a8c <pmc_osc_is_ready_32kxtal+0x2c>)
  400a66:	695b      	ldr	r3, [r3, #20]
  400a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400a6c:	2b00      	cmp	r3, #0
  400a6e:	d007      	beq.n	400a80 <pmc_osc_is_ready_32kxtal+0x20>
  400a70:	4b07      	ldr	r3, [pc, #28]	; (400a90 <pmc_osc_is_ready_32kxtal+0x30>)
  400a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d001      	beq.n	400a80 <pmc_osc_is_ready_32kxtal+0x20>
  400a7c:	2301      	movs	r3, #1
  400a7e:	e000      	b.n	400a82 <pmc_osc_is_ready_32kxtal+0x22>
  400a80:	2300      	movs	r3, #0
}
  400a82:	4618      	mov	r0, r3
  400a84:	46bd      	mov	sp, r7
  400a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a8a:	4770      	bx	lr
  400a8c:	400e1810 	.word	0x400e1810
  400a90:	400e0600 	.word	0x400e0600

00400a94 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400a94:	b480      	push	{r7}
  400a96:	b083      	sub	sp, #12
  400a98:	af00      	add	r7, sp, #0
  400a9a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400a9c:	4915      	ldr	r1, [pc, #84]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400a9e:	4b15      	ldr	r3, [pc, #84]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400aa0:	6a1a      	ldr	r2, [r3, #32]
  400aa2:	4b15      	ldr	r3, [pc, #84]	; (400af8 <pmc_switch_mainck_to_fastrc+0x64>)
  400aa4:	4313      	orrs	r3, r2
  400aa6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400aa8:	bf00      	nop
  400aaa:	4b12      	ldr	r3, [pc, #72]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d0f9      	beq.n	400aaa <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ab6:	490f      	ldr	r1, [pc, #60]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400ab8:	4b0e      	ldr	r3, [pc, #56]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400aba:	6a1a      	ldr	r2, [r3, #32]
  400abc:	4b0f      	ldr	r3, [pc, #60]	; (400afc <pmc_switch_mainck_to_fastrc+0x68>)
  400abe:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400ac0:	687a      	ldr	r2, [r7, #4]
  400ac2:	4313      	orrs	r3, r2
  400ac4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ac8:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400aca:	bf00      	nop
  400acc:	4b09      	ldr	r3, [pc, #36]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400ad4:	2b00      	cmp	r3, #0
  400ad6:	d0f9      	beq.n	400acc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400ad8:	4906      	ldr	r1, [pc, #24]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400ada:	4b06      	ldr	r3, [pc, #24]	; (400af4 <pmc_switch_mainck_to_fastrc+0x60>)
  400adc:	6a1a      	ldr	r2, [r3, #32]
  400ade:	4b08      	ldr	r3, [pc, #32]	; (400b00 <pmc_switch_mainck_to_fastrc+0x6c>)
  400ae0:	4013      	ands	r3, r2
  400ae2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400ae6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400ae8:	bf00      	nop
  400aea:	370c      	adds	r7, #12
  400aec:	46bd      	mov	sp, r7
  400aee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400af2:	4770      	bx	lr
  400af4:	400e0600 	.word	0x400e0600
  400af8:	00370008 	.word	0x00370008
  400afc:	ffc8ff8f 	.word	0xffc8ff8f
  400b00:	fec8ffff 	.word	0xfec8ffff

00400b04 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400b04:	b480      	push	{r7}
  400b06:	b083      	sub	sp, #12
  400b08:	af00      	add	r7, sp, #0
  400b0a:	6078      	str	r0, [r7, #4]
  400b0c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b0e:	687b      	ldr	r3, [r7, #4]
  400b10:	2b00      	cmp	r3, #0
  400b12:	d008      	beq.n	400b26 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b14:	4913      	ldr	r1, [pc, #76]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b16:	4b13      	ldr	r3, [pc, #76]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b18:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b1a:	4a13      	ldr	r2, [pc, #76]	; (400b68 <pmc_switch_mainck_to_xtal+0x64>)
  400b1c:	401a      	ands	r2, r3
  400b1e:	4b13      	ldr	r3, [pc, #76]	; (400b6c <pmc_switch_mainck_to_xtal+0x68>)
  400b20:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b22:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400b24:	e018      	b.n	400b58 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b26:	490f      	ldr	r1, [pc, #60]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b28:	4b0e      	ldr	r3, [pc, #56]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b2a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b2c:	4b10      	ldr	r3, [pc, #64]	; (400b70 <pmc_switch_mainck_to_xtal+0x6c>)
  400b2e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b30:	683a      	ldr	r2, [r7, #0]
  400b32:	0212      	lsls	r2, r2, #8
  400b34:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b36:	431a      	orrs	r2, r3
  400b38:	4b0e      	ldr	r3, [pc, #56]	; (400b74 <pmc_switch_mainck_to_xtal+0x70>)
  400b3a:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b3c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b3e:	bf00      	nop
  400b40:	4b08      	ldr	r3, [pc, #32]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b44:	f003 0301 	and.w	r3, r3, #1
  400b48:	2b00      	cmp	r3, #0
  400b4a:	d0f9      	beq.n	400b40 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b4c:	4905      	ldr	r1, [pc, #20]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b4e:	4b05      	ldr	r3, [pc, #20]	; (400b64 <pmc_switch_mainck_to_xtal+0x60>)
  400b50:	6a1a      	ldr	r2, [r3, #32]
  400b52:	4b09      	ldr	r3, [pc, #36]	; (400b78 <pmc_switch_mainck_to_xtal+0x74>)
  400b54:	4313      	orrs	r3, r2
  400b56:	620b      	str	r3, [r1, #32]
	}
}
  400b58:	bf00      	nop
  400b5a:	370c      	adds	r7, #12
  400b5c:	46bd      	mov	sp, r7
  400b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b62:	4770      	bx	lr
  400b64:	400e0600 	.word	0x400e0600
  400b68:	fec8fffc 	.word	0xfec8fffc
  400b6c:	01370002 	.word	0x01370002
  400b70:	ffc8fffc 	.word	0xffc8fffc
  400b74:	00370001 	.word	0x00370001
  400b78:	01370000 	.word	0x01370000

00400b7c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400b7c:	b480      	push	{r7}
  400b7e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b80:	4b04      	ldr	r3, [pc, #16]	; (400b94 <pmc_osc_is_ready_mainck+0x18>)
  400b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400b88:	4618      	mov	r0, r3
  400b8a:	46bd      	mov	sp, r7
  400b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	400e0600 	.word	0x400e0600

00400b98 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400b98:	b480      	push	{r7}
  400b9a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b9c:	4b04      	ldr	r3, [pc, #16]	; (400bb0 <pmc_disable_pllack+0x18>)
  400b9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400ba4:	bf00      	nop
  400ba6:	46bd      	mov	sp, r7
  400ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bac:	4770      	bx	lr
  400bae:	bf00      	nop
  400bb0:	400e0600 	.word	0x400e0600

00400bb4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400bb4:	b480      	push	{r7}
  400bb6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400bb8:	4b04      	ldr	r3, [pc, #16]	; (400bcc <pmc_is_locked_pllack+0x18>)
  400bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bbc:	f003 0302 	and.w	r3, r3, #2
}
  400bc0:	4618      	mov	r0, r3
  400bc2:	46bd      	mov	sp, r7
  400bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop
  400bcc:	400e0600 	.word	0x400e0600

00400bd0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400bd0:	b480      	push	{r7}
  400bd2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400bd4:	4b04      	ldr	r3, [pc, #16]	; (400be8 <pmc_is_locked_upll+0x18>)
  400bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400bdc:	4618      	mov	r0, r3
  400bde:	46bd      	mov	sp, r7
  400be0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop
  400be8:	400e0600 	.word	0x400e0600

00400bec <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400bf4:	687b      	ldr	r3, [r7, #4]
  400bf6:	2b3f      	cmp	r3, #63	; 0x3f
  400bf8:	d901      	bls.n	400bfe <pmc_enable_periph_clk+0x12>
		return 1;
  400bfa:	2301      	movs	r3, #1
  400bfc:	e02f      	b.n	400c5e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	2b1f      	cmp	r3, #31
  400c02:	d813      	bhi.n	400c2c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c04:	4b19      	ldr	r3, [pc, #100]	; (400c6c <pmc_enable_periph_clk+0x80>)
  400c06:	699a      	ldr	r2, [r3, #24]
  400c08:	2101      	movs	r1, #1
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	fa01 f303 	lsl.w	r3, r1, r3
  400c10:	401a      	ands	r2, r3
  400c12:	2101      	movs	r1, #1
  400c14:	687b      	ldr	r3, [r7, #4]
  400c16:	fa01 f303 	lsl.w	r3, r1, r3
  400c1a:	429a      	cmp	r2, r3
  400c1c:	d01e      	beq.n	400c5c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c1e:	4a13      	ldr	r2, [pc, #76]	; (400c6c <pmc_enable_periph_clk+0x80>)
  400c20:	2101      	movs	r1, #1
  400c22:	687b      	ldr	r3, [r7, #4]
  400c24:	fa01 f303 	lsl.w	r3, r1, r3
  400c28:	6113      	str	r3, [r2, #16]
  400c2a:	e017      	b.n	400c5c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400c2c:	687b      	ldr	r3, [r7, #4]
  400c2e:	3b20      	subs	r3, #32
  400c30:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c32:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <pmc_enable_periph_clk+0x80>)
  400c34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c38:	2101      	movs	r1, #1
  400c3a:	687b      	ldr	r3, [r7, #4]
  400c3c:	fa01 f303 	lsl.w	r3, r1, r3
  400c40:	401a      	ands	r2, r3
  400c42:	2101      	movs	r1, #1
  400c44:	687b      	ldr	r3, [r7, #4]
  400c46:	fa01 f303 	lsl.w	r3, r1, r3
  400c4a:	429a      	cmp	r2, r3
  400c4c:	d006      	beq.n	400c5c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c4e:	4a07      	ldr	r2, [pc, #28]	; (400c6c <pmc_enable_periph_clk+0x80>)
  400c50:	2101      	movs	r1, #1
  400c52:	687b      	ldr	r3, [r7, #4]
  400c54:	fa01 f303 	lsl.w	r3, r1, r3
  400c58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400c5c:	2300      	movs	r3, #0
}
  400c5e:	4618      	mov	r0, r3
  400c60:	370c      	adds	r7, #12
  400c62:	46bd      	mov	sp, r7
  400c64:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop
  400c6c:	400e0600 	.word	0x400e0600

00400c70 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400c70:	b480      	push	{r7}
  400c72:	b083      	sub	sp, #12
  400c74:	af00      	add	r7, sp, #0
  400c76:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  400c78:	4a04      	ldr	r2, [pc, #16]	; (400c8c <pmc_set_flash_in_wait_mode+0x1c>)
  400c7a:	687b      	ldr	r3, [r7, #4]
  400c7c:	6013      	str	r3, [r2, #0]
}
  400c7e:	bf00      	nop
  400c80:	370c      	adds	r7, #12
  400c82:	46bd      	mov	sp, r7
  400c84:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c88:	4770      	bx	lr
  400c8a:	bf00      	nop
  400c8c:	20400010 	.word	0x20400010

00400c90 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  400c90:	b480      	push	{r7}
  400c92:	b083      	sub	sp, #12
  400c94:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400c96:	4b20      	ldr	r3, [pc, #128]	; (400d18 <pmc_enable_waitmode+0x88>)
  400c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c9a:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400c9c:	687b      	ldr	r3, [r7, #4]
  400c9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400ca2:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400caa:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  400cac:	4a1a      	ldr	r2, [pc, #104]	; (400d18 <pmc_enable_waitmode+0x88>)
  400cae:	687b      	ldr	r3, [r7, #4]
  400cb0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400cb2:	4919      	ldr	r1, [pc, #100]	; (400d18 <pmc_enable_waitmode+0x88>)
  400cb4:	4b18      	ldr	r3, [pc, #96]	; (400d18 <pmc_enable_waitmode+0x88>)
  400cb6:	6a1a      	ldr	r2, [r3, #32]
  400cb8:	4b18      	ldr	r3, [pc, #96]	; (400d1c <pmc_enable_waitmode+0x8c>)
  400cba:	4313      	orrs	r3, r2
  400cbc:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400cbe:	bf00      	nop
  400cc0:	4b15      	ldr	r3, [pc, #84]	; (400d18 <pmc_enable_waitmode+0x88>)
  400cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cc4:	f003 0308 	and.w	r3, r3, #8
  400cc8:	2b00      	cmp	r3, #0
  400cca:	d0f9      	beq.n	400cc0 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400ccc:	2300      	movs	r3, #0
  400cce:	607b      	str	r3, [r7, #4]
  400cd0:	e003      	b.n	400cda <pmc_enable_waitmode+0x4a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400cd2:	bf00      	nop
  400cd4:	687b      	ldr	r3, [r7, #4]
  400cd6:	3301      	adds	r3, #1
  400cd8:	607b      	str	r3, [r7, #4]
  400cda:	687b      	ldr	r3, [r7, #4]
  400cdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  400ce0:	d3f7      	bcc.n	400cd2 <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400ce2:	bf00      	nop
  400ce4:	4b0c      	ldr	r3, [pc, #48]	; (400d18 <pmc_enable_waitmode+0x88>)
  400ce6:	6a1b      	ldr	r3, [r3, #32]
  400ce8:	f003 0308 	and.w	r3, r3, #8
  400cec:	2b00      	cmp	r3, #0
  400cee:	d0f9      	beq.n	400ce4 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400cf0:	4b09      	ldr	r3, [pc, #36]	; (400d18 <pmc_enable_waitmode+0x88>)
  400cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400cf4:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400cf6:	687b      	ldr	r3, [r7, #4]
  400cf8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400cfc:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400cfe:	687b      	ldr	r3, [r7, #4]
  400d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400d04:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  400d06:	4a04      	ldr	r2, [pc, #16]	; (400d18 <pmc_enable_waitmode+0x88>)
  400d08:	687b      	ldr	r3, [r7, #4]
  400d0a:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  400d0c:	bf00      	nop
  400d0e:	370c      	adds	r7, #12
  400d10:	46bd      	mov	sp, r7
  400d12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d16:	4770      	bx	lr
  400d18:	400e0600 	.word	0x400e0600
  400d1c:	00370004 	.word	0x00370004

00400d20 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400d20:	b590      	push	{r4, r7, lr}
  400d22:	b099      	sub	sp, #100	; 0x64
  400d24:	af00      	add	r7, sp, #0
  400d26:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	3b01      	subs	r3, #1
  400d2c:	2b04      	cmp	r3, #4
  400d2e:	f200 81a3 	bhi.w	401078 <pmc_sleep+0x358>
  400d32:	a201      	add	r2, pc, #4	; (adr r2, 400d38 <pmc_sleep+0x18>)
  400d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d38:	00400d4d 	.word	0x00400d4d
  400d3c:	00400d4d 	.word	0x00400d4d
  400d40:	00400d69 	.word	0x00400d69
  400d44:	00400d69 	.word	0x00400d69
  400d48:	00401057 	.word	0x00401057
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400d4c:	4a71      	ldr	r2, [pc, #452]	; (400f14 <pmc_sleep+0x1f4>)
  400d4e:	4b71      	ldr	r3, [pc, #452]	; (400f14 <pmc_sleep+0x1f4>)
  400d50:	691b      	ldr	r3, [r3, #16]
  400d52:	f023 0304 	bic.w	r3, r3, #4
  400d56:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400d58:	4b6f      	ldr	r3, [pc, #444]	; (400f18 <pmc_sleep+0x1f8>)
  400d5a:	2201      	movs	r2, #1
  400d5c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400d5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400d62:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  400d64:	bf30      	wfi
		__WFI();
		break;
  400d66:	e187      	b.n	401078 <pmc_sleep+0x358>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400d68:	687b      	ldr	r3, [r7, #4]
  400d6a:	2b03      	cmp	r3, #3
  400d6c:	d103      	bne.n	400d76 <pmc_sleep+0x56>
  400d6e:	2000      	movs	r0, #0
  400d70:	4b6a      	ldr	r3, [pc, #424]	; (400f1c <pmc_sleep+0x1fc>)
  400d72:	4798      	blx	r3
  400d74:	e003      	b.n	400d7e <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400d76:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400d7a:	4b68      	ldr	r3, [pc, #416]	; (400f1c <pmc_sleep+0x1fc>)
  400d7c:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400d7e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400d80:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400d84:	4b64      	ldr	r3, [pc, #400]	; (400f18 <pmc_sleep+0x1f8>)
  400d86:	2200      	movs	r2, #0
  400d88:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400d8a:	4b65      	ldr	r3, [pc, #404]	; (400f20 <pmc_sleep+0x200>)
  400d8c:	2201      	movs	r2, #1
  400d8e:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  400d90:	687b      	ldr	r3, [r7, #4]
  400d92:	2b04      	cmp	r3, #4
  400d94:	bf0c      	ite	eq
  400d96:	2301      	moveq	r3, #1
  400d98:	2300      	movne	r3, #0
  400d9a:	b2da      	uxtb	r2, r3
  400d9c:	f107 031c 	add.w	r3, r7, #28
  400da0:	653b      	str	r3, [r7, #80]	; 0x50
  400da2:	f107 0318 	add.w	r3, r7, #24
  400da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  400da8:	f107 0314 	add.w	r3, r7, #20
  400dac:	64bb      	str	r3, [r7, #72]	; 0x48
  400dae:	f107 0310 	add.w	r3, r7, #16
  400db2:	647b      	str	r3, [r7, #68]	; 0x44
  400db4:	f107 030c 	add.w	r3, r7, #12
  400db8:	643b      	str	r3, [r7, #64]	; 0x40
  400dba:	4613      	mov	r3, r2
  400dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  400dc0:	4b58      	ldr	r3, [pc, #352]	; (400f24 <pmc_sleep+0x204>)
  400dc2:	6a1b      	ldr	r3, [r3, #32]
  400dc4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  400dc6:	4b57      	ldr	r3, [pc, #348]	; (400f24 <pmc_sleep+0x204>)
  400dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dca:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  400dcc:	4b56      	ldr	r3, [pc, #344]	; (400f28 <pmc_sleep+0x208>)
  400dce:	681b      	ldr	r3, [r3, #0]
  400dd0:	623b      	str	r3, [r7, #32]
# if defined(EFC1)
	uint32_t fmr1 = EFC1->EEFC_FMR;
# endif

	if (p_osc_setting) {
  400dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400dd4:	2b00      	cmp	r3, #0
  400dd6:	d002      	beq.n	400dde <pmc_sleep+0xbe>
		*p_osc_setting = mor;
  400dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400ddc:	601a      	str	r2, [r3, #0]
	}
	if (p_pll0_setting) {
  400dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  400de0:	2b00      	cmp	r3, #0
  400de2:	d003      	beq.n	400dec <pmc_sleep+0xcc>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400de4:	4b4f      	ldr	r3, [pc, #316]	; (400f24 <pmc_sleep+0x204>)
  400de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  400de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  400dea:	601a      	str	r2, [r3, #0]
	}
	if (p_pll1_setting) {
  400dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400dee:	2b00      	cmp	r3, #0
  400df0:	d002      	beq.n	400df8 <pmc_sleep+0xd8>
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
#elif (SAM3U || SAM3XA)
		*p_pll1_setting = PMC->CKGR_UCKR;
#else
		*p_pll1_setting = 0;
  400df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  400df4:	2200      	movs	r2, #0
  400df6:	601a      	str	r2, [r3, #0]
#endif
	}
	if (p_mck_setting) {
  400df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  400dfa:	2b00      	cmp	r3, #0
  400dfc:	d002      	beq.n	400e04 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  400dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  400e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400e02:	601a      	str	r2, [r3, #0]
	}
	if (p_fmr_setting) {
  400e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400e06:	2b00      	cmp	r3, #0
  400e08:	d002      	beq.n	400e10 <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  400e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400e0c:	6a3a      	ldr	r2, [r7, #32]
  400e0e:	601a      	str	r2, [r3, #0]
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400e10:	4944      	ldr	r1, [pc, #272]	; (400f24 <pmc_sleep+0x204>)
  400e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400e14:	4b45      	ldr	r3, [pc, #276]	; (400f2c <pmc_sleep+0x20c>)
  400e16:	4313      	orrs	r3, r2
  400e18:	620b      	str	r3, [r1, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e1c:	f003 0303 	and.w	r3, r3, #3
  400e20:	2b01      	cmp	r3, #1
  400e22:	d90e      	bls.n	400e42 <pmc_sleep+0x122>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e26:	f023 0303 	bic.w	r3, r3, #3
  400e2a:	f043 0301 	orr.w	r3, r3, #1
  400e2e:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  400e30:	4a3c      	ldr	r2, [pc, #240]	; (400f24 <pmc_sleep+0x204>)
  400e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e34:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e36:	4b3b      	ldr	r3, [pc, #236]	; (400f24 <pmc_sleep+0x204>)
  400e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e3a:	f003 0308 	and.w	r3, r3, #8
  400e3e:	2b00      	cmp	r3, #0
  400e40:	d0f9      	beq.n	400e36 <pmc_sleep+0x116>
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  400e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e48:	2b00      	cmp	r3, #0
  400e4a:	d00c      	beq.n	400e66 <pmc_sleep+0x146>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400e52:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  400e54:	4a33      	ldr	r2, [pc, #204]	; (400f24 <pmc_sleep+0x204>)
  400e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e58:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e5a:	4b32      	ldr	r3, [pc, #200]	; (400f24 <pmc_sleep+0x204>)
  400e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e5e:	f003 0308 	and.w	r3, r3, #8
  400e62:	2b00      	cmp	r3, #0
  400e64:	d0f9      	beq.n	400e5a <pmc_sleep+0x13a>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  400e66:	4b32      	ldr	r3, [pc, #200]	; (400f30 <pmc_sleep+0x210>)
  400e68:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400e6a:	4b2e      	ldr	r3, [pc, #184]	; (400f24 <pmc_sleep+0x204>)
  400e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400e72:	2b00      	cmp	r3, #0
  400e74:	d0f9      	beq.n	400e6a <pmc_sleep+0x14a>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400e76:	492b      	ldr	r1, [pc, #172]	; (400f24 <pmc_sleep+0x204>)
  400e78:	4b2a      	ldr	r3, [pc, #168]	; (400f24 <pmc_sleep+0x204>)
  400e7a:	6a1a      	ldr	r2, [r3, #32]
  400e7c:	4b2d      	ldr	r3, [pc, #180]	; (400f34 <pmc_sleep+0x214>)
  400e7e:	4013      	ands	r3, r2
  400e80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e84:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400e86:	4b27      	ldr	r3, [pc, #156]	; (400f24 <pmc_sleep+0x204>)
  400e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400e8e:	2b00      	cmp	r3, #0
  400e90:	d0f9      	beq.n	400e86 <pmc_sleep+0x166>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400e92:	4a25      	ldr	r2, [pc, #148]	; (400f28 <pmc_sleep+0x208>)
  400e94:	6a3b      	ldr	r3, [r7, #32]
  400e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  400e9a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  400e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  400ea0:	2b00      	cmp	r3, #0
  400ea2:	d007      	beq.n	400eb4 <pmc_sleep+0x194>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ea4:	491f      	ldr	r1, [pc, #124]	; (400f24 <pmc_sleep+0x204>)
  400ea6:	4b1f      	ldr	r3, [pc, #124]	; (400f24 <pmc_sleep+0x204>)
  400ea8:	6a1a      	ldr	r2, [r3, #32]
  400eaa:	4b23      	ldr	r3, [pc, #140]	; (400f38 <pmc_sleep+0x218>)
  400eac:	4013      	ands	r3, r2
  400eae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400eb2:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  400eb4:	4b18      	ldr	r3, [pc, #96]	; (400f18 <pmc_sleep+0x1f8>)
  400eb6:	2201      	movs	r2, #1
  400eb8:	701a      	strb	r2, [r3, #0]
  400eba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400ebe:	b662      	cpsie	i

		pmc_enable_waitmode();
  400ec0:	4b1e      	ldr	r3, [pc, #120]	; (400f3c <pmc_sleep+0x21c>)
  400ec2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400ec4:	b672      	cpsid	i
  400ec6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  400eca:	4b13      	ldr	r3, [pc, #76]	; (400f18 <pmc_sleep+0x1f8>)
  400ecc:	2200      	movs	r2, #0
  400ece:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  400ed0:	69fc      	ldr	r4, [r7, #28]
  400ed2:	69b8      	ldr	r0, [r7, #24]
  400ed4:	6979      	ldr	r1, [r7, #20]
  400ed6:	693a      	ldr	r2, [r7, #16]
  400ed8:	68fb      	ldr	r3, [r7, #12]
  400eda:	65fc      	str	r4, [r7, #92]	; 0x5c
  400edc:	65b8      	str	r0, [r7, #88]	; 0x58
  400ede:	6579      	str	r1, [r7, #84]	; 0x54
  400ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
  400ee2:	63bb      	str	r3, [r7, #56]	; 0x38
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  400ee4:	2300      	movs	r3, #0
  400ee6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  400ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  400eea:	f003 0302 	and.w	r3, r3, #2
  400eee:	2b00      	cmp	r3, #0
  400ef0:	d02c      	beq.n	400f4c <pmc_sleep+0x22c>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ef2:	490c      	ldr	r1, [pc, #48]	; (400f24 <pmc_sleep+0x204>)
  400ef4:	4b0b      	ldr	r3, [pc, #44]	; (400f24 <pmc_sleep+0x204>)
  400ef6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400ef8:	4a11      	ldr	r2, [pc, #68]	; (400f40 <pmc_sleep+0x220>)
  400efa:	401a      	ands	r2, r3
  400efc:	4b11      	ldr	r3, [pc, #68]	; (400f44 <pmc_sleep+0x224>)
  400efe:	4313      	orrs	r3, r2
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f00:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400f02:	4908      	ldr	r1, [pc, #32]	; (400f24 <pmc_sleep+0x204>)
  400f04:	4b07      	ldr	r3, [pc, #28]	; (400f24 <pmc_sleep+0x204>)
  400f06:	6a1a      	ldr	r2, [r3, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  400f08:	4b0f      	ldr	r3, [pc, #60]	; (400f48 <pmc_sleep+0x228>)
  400f0a:	4013      	ands	r3, r2
  400f0c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400f10:	620b      	str	r3, [r1, #32]
  400f12:	e04e      	b.n	400fb2 <pmc_sleep+0x292>
  400f14:	e000ed00 	.word	0xe000ed00
  400f18:	2040000c 	.word	0x2040000c
  400f1c:	00400c71 	.word	0x00400c71
  400f20:	204004d0 	.word	0x204004d0
  400f24:	400e0600 	.word	0x400e0600
  400f28:	400e0c00 	.word	0x400e0c00
  400f2c:	00370008 	.word	0x00370008
  400f30:	00400b99 	.word	0x00400b99
  400f34:	fec8ffff 	.word	0xfec8ffff
  400f38:	ffc8fffe 	.word	0xffc8fffe
  400f3c:	00400c91 	.word	0x00400c91
  400f40:	fec8fffc 	.word	0xfec8fffc
  400f44:	01370002 	.word	0x01370002
  400f48:	ffc8ff87 	.word	0xffc8ff87
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  400f4e:	f003 0301 	and.w	r3, r3, #1
  400f52:	2b00      	cmp	r3, #0
  400f54:	d02d      	beq.n	400fb2 <pmc_sleep+0x292>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400f56:	4b4a      	ldr	r3, [pc, #296]	; (401080 <pmc_sleep+0x360>)
  400f58:	6a1b      	ldr	r3, [r3, #32]
  400f5a:	f003 0301 	and.w	r3, r3, #1
  400f5e:	2b00      	cmp	r3, #0
  400f60:	d10d      	bne.n	400f7e <pmc_sleep+0x25e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f62:	4947      	ldr	r1, [pc, #284]	; (401080 <pmc_sleep+0x360>)
  400f64:	4b46      	ldr	r3, [pc, #280]	; (401080 <pmc_sleep+0x360>)
  400f66:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400f68:	4a46      	ldr	r2, [pc, #280]	; (401084 <pmc_sleep+0x364>)
  400f6a:	401a      	ands	r2, r3
  400f6c:	4b46      	ldr	r3, [pc, #280]	; (401088 <pmc_sleep+0x368>)
  400f6e:	4313      	orrs	r3, r2
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f70:	620b      	str	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f72:	4b43      	ldr	r3, [pc, #268]	; (401080 <pmc_sleep+0x360>)
  400f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f76:	f003 0301 	and.w	r3, r3, #1
  400f7a:	2b00      	cmp	r3, #0
  400f7c:	d0f9      	beq.n	400f72 <pmc_sleep+0x252>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400f7e:	4b40      	ldr	r3, [pc, #256]	; (401080 <pmc_sleep+0x360>)
  400f80:	6a1b      	ldr	r3, [r3, #32]
  400f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400f86:	2b00      	cmp	r3, #0
  400f88:	d10b      	bne.n	400fa2 <pmc_sleep+0x282>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f8a:	493d      	ldr	r1, [pc, #244]	; (401080 <pmc_sleep+0x360>)
  400f8c:	4b3c      	ldr	r3, [pc, #240]	; (401080 <pmc_sleep+0x360>)
  400f8e:	6a1a      	ldr	r2, [r3, #32]
  400f90:	4b3e      	ldr	r3, [pc, #248]	; (40108c <pmc_sleep+0x36c>)
  400f92:	4313      	orrs	r3, r2
  400f94:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400f96:	4b3a      	ldr	r3, [pc, #232]	; (401080 <pmc_sleep+0x360>)
  400f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400f9e:	2b00      	cmp	r3, #0
  400fa0:	d0f9      	beq.n	400f96 <pmc_sleep+0x276>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400fa2:	4937      	ldr	r1, [pc, #220]	; (401080 <pmc_sleep+0x360>)
  400fa4:	4b36      	ldr	r3, [pc, #216]	; (401080 <pmc_sleep+0x360>)
  400fa6:	6a1a      	ldr	r2, [r3, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  400fa8:	4b39      	ldr	r3, [pc, #228]	; (401090 <pmc_sleep+0x370>)
  400faa:	4013      	ands	r3, r2
  400fac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400fb0:	620b      	str	r3, [r1, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
  400fb4:	4b37      	ldr	r3, [pc, #220]	; (401094 <pmc_sleep+0x374>)
  400fb6:	4013      	ands	r3, r2
  400fb8:	2b00      	cmp	r3, #0
  400fba:	d008      	beq.n	400fce <pmc_sleep+0x2ae>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400fbc:	4a30      	ldr	r2, [pc, #192]	; (401080 <pmc_sleep+0x360>)
  400fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  400fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400fc4:	6293      	str	r3, [r2, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  400fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400fc8:	f043 0302 	orr.w	r3, r3, #2
  400fcc:	637b      	str	r3, [r7, #52]	; 0x34
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400fd0:	f003 0303 	and.w	r3, r3, #3
  400fd4:	2b02      	cmp	r3, #2
  400fd6:	d105      	bne.n	400fe4 <pmc_sleep+0x2c4>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400fd8:	4b29      	ldr	r3, [pc, #164]	; (401080 <pmc_sleep+0x360>)
  400fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fdc:	f003 0302 	and.w	r3, r3, #2
  400fe0:	2b00      	cmp	r3, #0
  400fe2:	d0f9      	beq.n	400fd8 <pmc_sleep+0x2b8>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  400fe4:	4b26      	ldr	r3, [pc, #152]	; (401080 <pmc_sleep+0x360>)
  400fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fe8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400fea:	4925      	ldr	r1, [pc, #148]	; (401080 <pmc_sleep+0x360>)
  400fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ff8:	4313      	orrs	r3, r2

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400ffa:	630b      	str	r3, [r1, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400ffc:	4b20      	ldr	r3, [pc, #128]	; (401080 <pmc_sleep+0x360>)
  400ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401000:	f003 0308 	and.w	r3, r3, #8
  401004:	2b00      	cmp	r3, #0
  401006:	d0f9      	beq.n	400ffc <pmc_sleep+0x2dc>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  401008:	4a23      	ldr	r2, [pc, #140]	; (401098 <pmc_sleep+0x378>)
  40100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40100c:	6013      	str	r3, [r2, #0]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  40100e:	4a1c      	ldr	r2, [pc, #112]	; (401080 <pmc_sleep+0x360>)
  401010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401012:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401014:	4b1a      	ldr	r3, [pc, #104]	; (401080 <pmc_sleep+0x360>)
  401016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401018:	f003 0308 	and.w	r3, r3, #8
  40101c:	2b00      	cmp	r3, #0
  40101e:	d0f9      	beq.n	401014 <pmc_sleep+0x2f4>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  401020:	4b17      	ldr	r3, [pc, #92]	; (401080 <pmc_sleep+0x360>)
  401022:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  401024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401026:	4013      	ands	r3, r2
  401028:	2b00      	cmp	r3, #0
  40102a:	d0f9      	beq.n	401020 <pmc_sleep+0x300>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40102c:	4b1b      	ldr	r3, [pc, #108]	; (40109c <pmc_sleep+0x37c>)
  40102e:	2200      	movs	r2, #0
  401030:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401032:	4b1b      	ldr	r3, [pc, #108]	; (4010a0 <pmc_sleep+0x380>)
  401034:	681b      	ldr	r3, [r3, #0]
  401036:	2b00      	cmp	r3, #0
  401038:	d005      	beq.n	401046 <pmc_sleep+0x326>
			callback_clocks_restored();
  40103a:	4b19      	ldr	r3, [pc, #100]	; (4010a0 <pmc_sleep+0x380>)
  40103c:	681b      	ldr	r3, [r3, #0]
  40103e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401040:	4b17      	ldr	r3, [pc, #92]	; (4010a0 <pmc_sleep+0x380>)
  401042:	2200      	movs	r2, #0
  401044:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  401046:	4b17      	ldr	r3, [pc, #92]	; (4010a4 <pmc_sleep+0x384>)
  401048:	2201      	movs	r2, #1
  40104a:	701a      	strb	r2, [r3, #0]
  40104c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401050:	b662      	cpsie	i

		break;
  401052:	bf00      	nop
  401054:	e010      	b.n	401078 <pmc_sleep+0x358>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401056:	4a14      	ldr	r2, [pc, #80]	; (4010a8 <pmc_sleep+0x388>)
  401058:	4b13      	ldr	r3, [pc, #76]	; (4010a8 <pmc_sleep+0x388>)
  40105a:	691b      	ldr	r3, [r3, #16]
  40105c:	f043 0304 	orr.w	r3, r3, #4
  401060:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401062:	4b12      	ldr	r3, [pc, #72]	; (4010ac <pmc_sleep+0x38c>)
  401064:	4a12      	ldr	r2, [pc, #72]	; (4010b0 <pmc_sleep+0x390>)
  401066:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401068:	4b0e      	ldr	r3, [pc, #56]	; (4010a4 <pmc_sleep+0x384>)
  40106a:	2201      	movs	r2, #1
  40106c:	701a      	strb	r2, [r3, #0]
  40106e:	f3bf 8f5f 	dmb	sy
  401072:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  401074:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  401076:	bf00      	nop
#endif
	}
}
  401078:	bf00      	nop
  40107a:	3764      	adds	r7, #100	; 0x64
  40107c:	46bd      	mov	sp, r7
  40107e:	bd90      	pop	{r4, r7, pc}
  401080:	400e0600 	.word	0x400e0600
  401084:	ffc8fffc 	.word	0xffc8fffc
  401088:	00370001 	.word	0x00370001
  40108c:	01370000 	.word	0x01370000
  401090:	ffc8ff87 	.word	0xffc8ff87
  401094:	07ff0000 	.word	0x07ff0000
  401098:	400e0c00 	.word	0x400e0c00
  40109c:	204004d0 	.word	0x204004d0
  4010a0:	204004d4 	.word	0x204004d4
  4010a4:	2040000c 	.word	0x2040000c
  4010a8:	e000ed00 	.word	0xe000ed00
  4010ac:	400e1810 	.word	0x400e1810
  4010b0:	a5000004 	.word	0xa5000004

004010b4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4010b4:	b480      	push	{r7}
  4010b6:	b083      	sub	sp, #12
  4010b8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010ba:	f3ef 8310 	mrs	r3, PRIMASK
  4010be:	607b      	str	r3, [r7, #4]
  return(result);
  4010c0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010c2:	2b00      	cmp	r3, #0
  4010c4:	bf0c      	ite	eq
  4010c6:	2301      	moveq	r3, #1
  4010c8:	2300      	movne	r3, #0
  4010ca:	b2db      	uxtb	r3, r3
  4010cc:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4010ce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4010d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010d4:	4b04      	ldr	r3, [pc, #16]	; (4010e8 <cpu_irq_save+0x34>)
  4010d6:	2200      	movs	r2, #0
  4010d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4010da:	683b      	ldr	r3, [r7, #0]
}
  4010dc:	4618      	mov	r0, r3
  4010de:	370c      	adds	r7, #12
  4010e0:	46bd      	mov	sp, r7
  4010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010e6:	4770      	bx	lr
  4010e8:	2040000c 	.word	0x2040000c

004010ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4010ec:	b480      	push	{r7}
  4010ee:	b083      	sub	sp, #12
  4010f0:	af00      	add	r7, sp, #0
  4010f2:	6078      	str	r0, [r7, #4]
	return (flags);
  4010f4:	687b      	ldr	r3, [r7, #4]
  4010f6:	2b00      	cmp	r3, #0
  4010f8:	bf14      	ite	ne
  4010fa:	2301      	movne	r3, #1
  4010fc:	2300      	moveq	r3, #0
  4010fe:	b2db      	uxtb	r3, r3
}
  401100:	4618      	mov	r0, r3
  401102:	370c      	adds	r7, #12
  401104:	46bd      	mov	sp, r7
  401106:	f85d 7b04 	ldr.w	r7, [sp], #4
  40110a:	4770      	bx	lr

0040110c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  40110c:	b580      	push	{r7, lr}
  40110e:	b082      	sub	sp, #8
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401114:	6878      	ldr	r0, [r7, #4]
  401116:	4b07      	ldr	r3, [pc, #28]	; (401134 <cpu_irq_restore+0x28>)
  401118:	4798      	blx	r3
  40111a:	4603      	mov	r3, r0
  40111c:	2b00      	cmp	r3, #0
  40111e:	d005      	beq.n	40112c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401120:	4b05      	ldr	r3, [pc, #20]	; (401138 <cpu_irq_restore+0x2c>)
  401122:	2201      	movs	r2, #1
  401124:	701a      	strb	r2, [r3, #0]
  401126:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40112a:	b662      	cpsie	i
}
  40112c:	bf00      	nop
  40112e:	3708      	adds	r7, #8
  401130:	46bd      	mov	sp, r7
  401132:	bd80      	pop	{r7, pc}
  401134:	004010ed 	.word	0x004010ed
  401138:	2040000c 	.word	0x2040000c

0040113c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40113c:	b580      	push	{r7, lr}
  40113e:	b084      	sub	sp, #16
  401140:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401142:	4b1e      	ldr	r3, [pc, #120]	; (4011bc <Reset_Handler+0x80>)
  401144:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401146:	4b1e      	ldr	r3, [pc, #120]	; (4011c0 <Reset_Handler+0x84>)
  401148:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  40114a:	68fa      	ldr	r2, [r7, #12]
  40114c:	68bb      	ldr	r3, [r7, #8]
  40114e:	429a      	cmp	r2, r3
  401150:	d00c      	beq.n	40116c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401152:	e007      	b.n	401164 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401154:	68bb      	ldr	r3, [r7, #8]
  401156:	1d1a      	adds	r2, r3, #4
  401158:	60ba      	str	r2, [r7, #8]
  40115a:	68fa      	ldr	r2, [r7, #12]
  40115c:	1d11      	adds	r1, r2, #4
  40115e:	60f9      	str	r1, [r7, #12]
  401160:	6812      	ldr	r2, [r2, #0]
  401162:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401164:	68bb      	ldr	r3, [r7, #8]
  401166:	4a17      	ldr	r2, [pc, #92]	; (4011c4 <Reset_Handler+0x88>)
  401168:	4293      	cmp	r3, r2
  40116a:	d3f3      	bcc.n	401154 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40116c:	4b16      	ldr	r3, [pc, #88]	; (4011c8 <Reset_Handler+0x8c>)
  40116e:	60bb      	str	r3, [r7, #8]
  401170:	e004      	b.n	40117c <Reset_Handler+0x40>
                *pDest++ = 0;
  401172:	68bb      	ldr	r3, [r7, #8]
  401174:	1d1a      	adds	r2, r3, #4
  401176:	60ba      	str	r2, [r7, #8]
  401178:	2200      	movs	r2, #0
  40117a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40117c:	68bb      	ldr	r3, [r7, #8]
  40117e:	4a13      	ldr	r2, [pc, #76]	; (4011cc <Reset_Handler+0x90>)
  401180:	4293      	cmp	r3, r2
  401182:	d3f6      	bcc.n	401172 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401184:	4b12      	ldr	r3, [pc, #72]	; (4011d0 <Reset_Handler+0x94>)
  401186:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401188:	4a12      	ldr	r2, [pc, #72]	; (4011d4 <Reset_Handler+0x98>)
  40118a:	68fb      	ldr	r3, [r7, #12]
  40118c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401190:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401192:	4b11      	ldr	r3, [pc, #68]	; (4011d8 <Reset_Handler+0x9c>)
  401194:	4798      	blx	r3
  401196:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401198:	4a10      	ldr	r2, [pc, #64]	; (4011dc <Reset_Handler+0xa0>)
  40119a:	4b10      	ldr	r3, [pc, #64]	; (4011dc <Reset_Handler+0xa0>)
  40119c:	681b      	ldr	r3, [r3, #0]
  40119e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4011a2:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4011a4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4011a8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4011ac:	6878      	ldr	r0, [r7, #4]
  4011ae:	4b0c      	ldr	r3, [pc, #48]	; (4011e0 <Reset_Handler+0xa4>)
  4011b0:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4011b2:	4b0c      	ldr	r3, [pc, #48]	; (4011e4 <Reset_Handler+0xa8>)
  4011b4:	4798      	blx	r3

        /* Branch to main function */
        main();
  4011b6:	4b0c      	ldr	r3, [pc, #48]	; (4011e8 <Reset_Handler+0xac>)
  4011b8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4011ba:	e7fe      	b.n	4011ba <Reset_Handler+0x7e>
  4011bc:	00401d90 	.word	0x00401d90
  4011c0:	20400000 	.word	0x20400000
  4011c4:	20400440 	.word	0x20400440
  4011c8:	20400440 	.word	0x20400440
  4011cc:	204004d8 	.word	0x204004d8
  4011d0:	00400000 	.word	0x00400000
  4011d4:	e000ed00 	.word	0xe000ed00
  4011d8:	004010b5 	.word	0x004010b5
  4011dc:	e000ed88 	.word	0xe000ed88
  4011e0:	0040110d 	.word	0x0040110d
  4011e4:	00401c21 	.word	0x00401c21
  4011e8:	0040170d 	.word	0x0040170d

004011ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4011ec:	b480      	push	{r7}
  4011ee:	af00      	add	r7, sp, #0
        while (1) {
        }
  4011f0:	e7fe      	b.n	4011f0 <Dummy_Handler+0x4>
  4011f2:	bf00      	nop

004011f4 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4011f4:	b480      	push	{r7}
  4011f6:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4011f8:	4b52      	ldr	r3, [pc, #328]	; (401344 <SystemCoreClockUpdate+0x150>)
  4011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011fc:	f003 0303 	and.w	r3, r3, #3
  401200:	2b01      	cmp	r3, #1
  401202:	d014      	beq.n	40122e <SystemCoreClockUpdate+0x3a>
  401204:	2b01      	cmp	r3, #1
  401206:	d302      	bcc.n	40120e <SystemCoreClockUpdate+0x1a>
  401208:	2b02      	cmp	r3, #2
  40120a:	d038      	beq.n	40127e <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  40120c:	e07a      	b.n	401304 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40120e:	4b4e      	ldr	r3, [pc, #312]	; (401348 <SystemCoreClockUpdate+0x154>)
  401210:	695b      	ldr	r3, [r3, #20]
  401212:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401216:	2b00      	cmp	r3, #0
  401218:	d004      	beq.n	401224 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40121a:	4b4c      	ldr	r3, [pc, #304]	; (40134c <SystemCoreClockUpdate+0x158>)
  40121c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401220:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  401222:	e06f      	b.n	401304 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401224:	4b49      	ldr	r3, [pc, #292]	; (40134c <SystemCoreClockUpdate+0x158>)
  401226:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40122a:	601a      	str	r2, [r3, #0]
      }
    break;
  40122c:	e06a      	b.n	401304 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40122e:	4b45      	ldr	r3, [pc, #276]	; (401344 <SystemCoreClockUpdate+0x150>)
  401230:	6a1b      	ldr	r3, [r3, #32]
  401232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401236:	2b00      	cmp	r3, #0
  401238:	d003      	beq.n	401242 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40123a:	4b44      	ldr	r3, [pc, #272]	; (40134c <SystemCoreClockUpdate+0x158>)
  40123c:	4a44      	ldr	r2, [pc, #272]	; (401350 <SystemCoreClockUpdate+0x15c>)
  40123e:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  401240:	e060      	b.n	401304 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401242:	4b42      	ldr	r3, [pc, #264]	; (40134c <SystemCoreClockUpdate+0x158>)
  401244:	4a43      	ldr	r2, [pc, #268]	; (401354 <SystemCoreClockUpdate+0x160>)
  401246:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401248:	4b3e      	ldr	r3, [pc, #248]	; (401344 <SystemCoreClockUpdate+0x150>)
  40124a:	6a1b      	ldr	r3, [r3, #32]
  40124c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401250:	2b10      	cmp	r3, #16
  401252:	d004      	beq.n	40125e <SystemCoreClockUpdate+0x6a>
  401254:	2b20      	cmp	r3, #32
  401256:	d008      	beq.n	40126a <SystemCoreClockUpdate+0x76>
  401258:	2b00      	cmp	r3, #0
  40125a:	d00e      	beq.n	40127a <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  40125c:	e00e      	b.n	40127c <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40125e:	4b3b      	ldr	r3, [pc, #236]	; (40134c <SystemCoreClockUpdate+0x158>)
  401260:	681b      	ldr	r3, [r3, #0]
  401262:	005b      	lsls	r3, r3, #1
  401264:	4a39      	ldr	r2, [pc, #228]	; (40134c <SystemCoreClockUpdate+0x158>)
  401266:	6013      	str	r3, [r2, #0]
          break;
  401268:	e008      	b.n	40127c <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40126a:	4b38      	ldr	r3, [pc, #224]	; (40134c <SystemCoreClockUpdate+0x158>)
  40126c:	681a      	ldr	r2, [r3, #0]
  40126e:	4613      	mov	r3, r2
  401270:	005b      	lsls	r3, r3, #1
  401272:	4413      	add	r3, r2
  401274:	4a35      	ldr	r2, [pc, #212]	; (40134c <SystemCoreClockUpdate+0x158>)
  401276:	6013      	str	r3, [r2, #0]
          break;
  401278:	e000      	b.n	40127c <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  40127a:	bf00      	nop

          default:
          break;
        }
      }
    break;
  40127c:	e042      	b.n	401304 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40127e:	4b31      	ldr	r3, [pc, #196]	; (401344 <SystemCoreClockUpdate+0x150>)
  401280:	6a1b      	ldr	r3, [r3, #32]
  401282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401286:	2b00      	cmp	r3, #0
  401288:	d003      	beq.n	401292 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40128a:	4b30      	ldr	r3, [pc, #192]	; (40134c <SystemCoreClockUpdate+0x158>)
  40128c:	4a30      	ldr	r2, [pc, #192]	; (401350 <SystemCoreClockUpdate+0x15c>)
  40128e:	601a      	str	r2, [r3, #0]
  401290:	e01c      	b.n	4012cc <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401292:	4b2e      	ldr	r3, [pc, #184]	; (40134c <SystemCoreClockUpdate+0x158>)
  401294:	4a2f      	ldr	r2, [pc, #188]	; (401354 <SystemCoreClockUpdate+0x160>)
  401296:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401298:	4b2a      	ldr	r3, [pc, #168]	; (401344 <SystemCoreClockUpdate+0x150>)
  40129a:	6a1b      	ldr	r3, [r3, #32]
  40129c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012a0:	2b10      	cmp	r3, #16
  4012a2:	d004      	beq.n	4012ae <SystemCoreClockUpdate+0xba>
  4012a4:	2b20      	cmp	r3, #32
  4012a6:	d008      	beq.n	4012ba <SystemCoreClockUpdate+0xc6>
  4012a8:	2b00      	cmp	r3, #0
  4012aa:	d00e      	beq.n	4012ca <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4012ac:	e00e      	b.n	4012cc <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4012ae:	4b27      	ldr	r3, [pc, #156]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012b0:	681b      	ldr	r3, [r3, #0]
  4012b2:	005b      	lsls	r3, r3, #1
  4012b4:	4a25      	ldr	r2, [pc, #148]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012b6:	6013      	str	r3, [r2, #0]
          break;
  4012b8:	e008      	b.n	4012cc <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4012ba:	4b24      	ldr	r3, [pc, #144]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012bc:	681a      	ldr	r2, [r3, #0]
  4012be:	4613      	mov	r3, r2
  4012c0:	005b      	lsls	r3, r3, #1
  4012c2:	4413      	add	r3, r2
  4012c4:	4a21      	ldr	r2, [pc, #132]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012c6:	6013      	str	r3, [r2, #0]
          break;
  4012c8:	e000      	b.n	4012cc <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4012ca:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012cc:	4b1d      	ldr	r3, [pc, #116]	; (401344 <SystemCoreClockUpdate+0x150>)
  4012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012d0:	f003 0303 	and.w	r3, r3, #3
  4012d4:	2b02      	cmp	r3, #2
  4012d6:	d114      	bne.n	401302 <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012d8:	4b1a      	ldr	r3, [pc, #104]	; (401344 <SystemCoreClockUpdate+0x150>)
  4012da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4012dc:	4b1e      	ldr	r3, [pc, #120]	; (401358 <SystemCoreClockUpdate+0x164>)
  4012de:	4013      	ands	r3, r2
  4012e0:	0c1b      	lsrs	r3, r3, #16
  4012e2:	3301      	adds	r3, #1
  4012e4:	4a19      	ldr	r2, [pc, #100]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012e6:	6812      	ldr	r2, [r2, #0]
  4012e8:	fb02 f303 	mul.w	r3, r2, r3
  4012ec:	4a17      	ldr	r2, [pc, #92]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012ee:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012f0:	4b14      	ldr	r3, [pc, #80]	; (401344 <SystemCoreClockUpdate+0x150>)
  4012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4012f4:	b2db      	uxtb	r3, r3
  4012f6:	4a15      	ldr	r2, [pc, #84]	; (40134c <SystemCoreClockUpdate+0x158>)
  4012f8:	6812      	ldr	r2, [r2, #0]
  4012fa:	fbb2 f3f3 	udiv	r3, r2, r3
  4012fe:	4a13      	ldr	r2, [pc, #76]	; (40134c <SystemCoreClockUpdate+0x158>)
  401300:	6013      	str	r3, [r2, #0]
      }
    break;
  401302:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401304:	4b0f      	ldr	r3, [pc, #60]	; (401344 <SystemCoreClockUpdate+0x150>)
  401306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401308:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40130c:	2b70      	cmp	r3, #112	; 0x70
  40130e:	d108      	bne.n	401322 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401310:	4b0e      	ldr	r3, [pc, #56]	; (40134c <SystemCoreClockUpdate+0x158>)
  401312:	681b      	ldr	r3, [r3, #0]
  401314:	4a11      	ldr	r2, [pc, #68]	; (40135c <SystemCoreClockUpdate+0x168>)
  401316:	fba2 2303 	umull	r2, r3, r2, r3
  40131a:	085b      	lsrs	r3, r3, #1
  40131c:	4a0b      	ldr	r2, [pc, #44]	; (40134c <SystemCoreClockUpdate+0x158>)
  40131e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401320:	e00a      	b.n	401338 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401322:	4b08      	ldr	r3, [pc, #32]	; (401344 <SystemCoreClockUpdate+0x150>)
  401324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401326:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40132a:	091b      	lsrs	r3, r3, #4
  40132c:	4a07      	ldr	r2, [pc, #28]	; (40134c <SystemCoreClockUpdate+0x158>)
  40132e:	6812      	ldr	r2, [r2, #0]
  401330:	fa22 f303 	lsr.w	r3, r2, r3
  401334:	4a05      	ldr	r2, [pc, #20]	; (40134c <SystemCoreClockUpdate+0x158>)
  401336:	6013      	str	r3, [r2, #0]
  }
}
  401338:	bf00      	nop
  40133a:	46bd      	mov	sp, r7
  40133c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	400e0600 	.word	0x400e0600
  401348:	400e1810 	.word	0x400e1810
  40134c:	20400014 	.word	0x20400014
  401350:	00b71b00 	.word	0x00b71b00
  401354:	003d0900 	.word	0x003d0900
  401358:	07ff0000 	.word	0x07ff0000
  40135c:	aaaaaaab 	.word	0xaaaaaaab

00401360 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401360:	b480      	push	{r7}
  401362:	b083      	sub	sp, #12
  401364:	af00      	add	r7, sp, #0
  401366:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401368:	687b      	ldr	r3, [r7, #4]
  40136a:	4a19      	ldr	r2, [pc, #100]	; (4013d0 <system_init_flash+0x70>)
  40136c:	4293      	cmp	r3, r2
  40136e:	d804      	bhi.n	40137a <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401370:	4b18      	ldr	r3, [pc, #96]	; (4013d4 <system_init_flash+0x74>)
  401372:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401376:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401378:	e023      	b.n	4013c2 <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40137a:	687b      	ldr	r3, [r7, #4]
  40137c:	4a16      	ldr	r2, [pc, #88]	; (4013d8 <system_init_flash+0x78>)
  40137e:	4293      	cmp	r3, r2
  401380:	d803      	bhi.n	40138a <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401382:	4b14      	ldr	r3, [pc, #80]	; (4013d4 <system_init_flash+0x74>)
  401384:	4a15      	ldr	r2, [pc, #84]	; (4013dc <system_init_flash+0x7c>)
  401386:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401388:	e01b      	b.n	4013c2 <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40138a:	687b      	ldr	r3, [r7, #4]
  40138c:	4a14      	ldr	r2, [pc, #80]	; (4013e0 <system_init_flash+0x80>)
  40138e:	4293      	cmp	r3, r2
  401390:	d803      	bhi.n	40139a <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401392:	4b10      	ldr	r3, [pc, #64]	; (4013d4 <system_init_flash+0x74>)
  401394:	4a13      	ldr	r2, [pc, #76]	; (4013e4 <system_init_flash+0x84>)
  401396:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401398:	e013      	b.n	4013c2 <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40139a:	687b      	ldr	r3, [r7, #4]
  40139c:	4a12      	ldr	r2, [pc, #72]	; (4013e8 <system_init_flash+0x88>)
  40139e:	4293      	cmp	r3, r2
  4013a0:	d803      	bhi.n	4013aa <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013a2:	4b0c      	ldr	r3, [pc, #48]	; (4013d4 <system_init_flash+0x74>)
  4013a4:	4a11      	ldr	r2, [pc, #68]	; (4013ec <system_init_flash+0x8c>)
  4013a6:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4013a8:	e00b      	b.n	4013c2 <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4013aa:	687b      	ldr	r3, [r7, #4]
  4013ac:	4a10      	ldr	r2, [pc, #64]	; (4013f0 <system_init_flash+0x90>)
  4013ae:	4293      	cmp	r3, r2
  4013b0:	d804      	bhi.n	4013bc <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013b2:	4b08      	ldr	r3, [pc, #32]	; (4013d4 <system_init_flash+0x74>)
  4013b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013b8:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4013ba:	e002      	b.n	4013c2 <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013bc:	4b05      	ldr	r3, [pc, #20]	; (4013d4 <system_init_flash+0x74>)
  4013be:	4a0d      	ldr	r2, [pc, #52]	; (4013f4 <system_init_flash+0x94>)
  4013c0:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4013c2:	bf00      	nop
  4013c4:	370c      	adds	r7, #12
  4013c6:	46bd      	mov	sp, r7
  4013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	01312cff 	.word	0x01312cff
  4013d4:	400e0c00 	.word	0x400e0c00
  4013d8:	026259ff 	.word	0x026259ff
  4013dc:	04000100 	.word	0x04000100
  4013e0:	039386ff 	.word	0x039386ff
  4013e4:	04000200 	.word	0x04000200
  4013e8:	04c4b3ff 	.word	0x04c4b3ff
  4013ec:	04000300 	.word	0x04000300
  4013f0:	05f5e0ff 	.word	0x05f5e0ff
  4013f4:	04000500 	.word	0x04000500

004013f8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4013f8:	b480      	push	{r7}
  4013fa:	b083      	sub	sp, #12
  4013fc:	af00      	add	r7, sp, #0
  4013fe:	4603      	mov	r3, r0
  401400:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401402:	4909      	ldr	r1, [pc, #36]	; (401428 <NVIC_EnableIRQ+0x30>)
  401404:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401408:	095b      	lsrs	r3, r3, #5
  40140a:	79fa      	ldrb	r2, [r7, #7]
  40140c:	f002 021f 	and.w	r2, r2, #31
  401410:	2001      	movs	r0, #1
  401412:	fa00 f202 	lsl.w	r2, r0, r2
  401416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40141a:	bf00      	nop
  40141c:	370c      	adds	r7, #12
  40141e:	46bd      	mov	sp, r7
  401420:	f85d 7b04 	ldr.w	r7, [sp], #4
  401424:	4770      	bx	lr
  401426:	bf00      	nop
  401428:	e000e100 	.word	0xe000e100

0040142c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40142c:	b480      	push	{r7}
  40142e:	b083      	sub	sp, #12
  401430:	af00      	add	r7, sp, #0
  401432:	4603      	mov	r3, r0
  401434:	6039      	str	r1, [r7, #0]
  401436:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401438:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40143c:	2b00      	cmp	r3, #0
  40143e:	da0b      	bge.n	401458 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401440:	490d      	ldr	r1, [pc, #52]	; (401478 <NVIC_SetPriority+0x4c>)
  401442:	79fb      	ldrb	r3, [r7, #7]
  401444:	f003 030f 	and.w	r3, r3, #15
  401448:	3b04      	subs	r3, #4
  40144a:	683a      	ldr	r2, [r7, #0]
  40144c:	b2d2      	uxtb	r2, r2
  40144e:	0152      	lsls	r2, r2, #5
  401450:	b2d2      	uxtb	r2, r2
  401452:	440b      	add	r3, r1
  401454:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401456:	e009      	b.n	40146c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401458:	4908      	ldr	r1, [pc, #32]	; (40147c <NVIC_SetPriority+0x50>)
  40145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40145e:	683a      	ldr	r2, [r7, #0]
  401460:	b2d2      	uxtb	r2, r2
  401462:	0152      	lsls	r2, r2, #5
  401464:	b2d2      	uxtb	r2, r2
  401466:	440b      	add	r3, r1
  401468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40146c:	bf00      	nop
  40146e:	370c      	adds	r7, #12
  401470:	46bd      	mov	sp, r7
  401472:	f85d 7b04 	ldr.w	r7, [sp], #4
  401476:	4770      	bx	lr
  401478:	e000ed00 	.word	0xe000ed00
  40147c:	e000e100 	.word	0xe000e100

00401480 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401480:	b480      	push	{r7}
  401482:	b083      	sub	sp, #12
  401484:	af00      	add	r7, sp, #0
  401486:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401488:	687b      	ldr	r3, [r7, #4]
  40148a:	2b07      	cmp	r3, #7
  40148c:	d825      	bhi.n	4014da <osc_get_rate+0x5a>
  40148e:	a201      	add	r2, pc, #4	; (adr r2, 401494 <osc_get_rate+0x14>)
  401490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401494:	004014b5 	.word	0x004014b5
  401498:	004014bb 	.word	0x004014bb
  40149c:	004014c1 	.word	0x004014c1
  4014a0:	004014c7 	.word	0x004014c7
  4014a4:	004014cb 	.word	0x004014cb
  4014a8:	004014cf 	.word	0x004014cf
  4014ac:	004014d3 	.word	0x004014d3
  4014b0:	004014d7 	.word	0x004014d7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4014b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4014b8:	e010      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4014ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014be:	e00d      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4014c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014c4:	e00a      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4014c6:	4b08      	ldr	r3, [pc, #32]	; (4014e8 <osc_get_rate+0x68>)
  4014c8:	e008      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4014ca:	4b08      	ldr	r3, [pc, #32]	; (4014ec <osc_get_rate+0x6c>)
  4014cc:	e006      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4014ce:	4b08      	ldr	r3, [pc, #32]	; (4014f0 <osc_get_rate+0x70>)
  4014d0:	e004      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4014d2:	4b07      	ldr	r3, [pc, #28]	; (4014f0 <osc_get_rate+0x70>)
  4014d4:	e002      	b.n	4014dc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4014d6:	4b06      	ldr	r3, [pc, #24]	; (4014f0 <osc_get_rate+0x70>)
  4014d8:	e000      	b.n	4014dc <osc_get_rate+0x5c>
	}

	return 0;
  4014da:	2300      	movs	r3, #0
}
  4014dc:	4618      	mov	r0, r3
  4014de:	370c      	adds	r7, #12
  4014e0:	46bd      	mov	sp, r7
  4014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014e6:	4770      	bx	lr
  4014e8:	003d0900 	.word	0x003d0900
  4014ec:	007a1200 	.word	0x007a1200
  4014f0:	00b71b00 	.word	0x00b71b00

004014f4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4014f4:	b580      	push	{r7, lr}
  4014f6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4014f8:	2006      	movs	r0, #6
  4014fa:	4b05      	ldr	r3, [pc, #20]	; (401510 <sysclk_get_main_hz+0x1c>)
  4014fc:	4798      	blx	r3
  4014fe:	4602      	mov	r2, r0
  401500:	4613      	mov	r3, r2
  401502:	009b      	lsls	r3, r3, #2
  401504:	4413      	add	r3, r2
  401506:	009a      	lsls	r2, r3, #2
  401508:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40150a:	4618      	mov	r0, r3
  40150c:	bd80      	pop	{r7, pc}
  40150e:	bf00      	nop
  401510:	00401481 	.word	0x00401481

00401514 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401514:	b580      	push	{r7, lr}
  401516:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401518:	4b02      	ldr	r3, [pc, #8]	; (401524 <sysclk_get_cpu_hz+0x10>)
  40151a:	4798      	blx	r3
  40151c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40151e:	4618      	mov	r0, r3
  401520:	bd80      	pop	{r7, pc}
  401522:	bf00      	nop
  401524:	004014f5 	.word	0x004014f5

00401528 <but_Handler>:

/************************************************************************/
/* Interrupçcões                                                        */
/************************************************************************/

void but_Handler(){
  401528:	b580      	push	{r7, lr}
  40152a:	b082      	sub	sp, #8
  40152c:	af00      	add	r7, sp, #0
    /*
     *  limpa interrupcao do PIO
     */
    uint32_t pioIntStatus;
    pioIntStatus =  pio_get_interrupt_status(BUT_PIO);
  40152e:	480d      	ldr	r0, [pc, #52]	; (401564 <but_Handler+0x3c>)
  401530:	4b0d      	ldr	r3, [pc, #52]	; (401568 <but_Handler+0x40>)
  401532:	4798      	blx	r3
  401534:	6078      	str	r0, [r7, #4]
    
   /**
    *  Toggle status led
    */
   if(pio_get_output_data_status(LED_PIO, LED_PIN_MASK))
  401536:	f44f 7180 	mov.w	r1, #256	; 0x100
  40153a:	480c      	ldr	r0, [pc, #48]	; (40156c <but_Handler+0x44>)
  40153c:	4b0c      	ldr	r3, [pc, #48]	; (401570 <but_Handler+0x48>)
  40153e:	4798      	blx	r3
  401540:	4603      	mov	r3, r0
  401542:	2b00      	cmp	r3, #0
  401544:	d005      	beq.n	401552 <but_Handler+0x2a>
    pio_clear(LED_PIO, LED_PIN_MASK);
  401546:	f44f 7180 	mov.w	r1, #256	; 0x100
  40154a:	4808      	ldr	r0, [pc, #32]	; (40156c <but_Handler+0x44>)
  40154c:	4b09      	ldr	r3, [pc, #36]	; (401574 <but_Handler+0x4c>)
  40154e:	4798      	blx	r3
   else
    pio_set(LED_PIO,LED_PIN_MASK);    
}
  401550:	e004      	b.n	40155c <but_Handler+0x34>
    *  Toggle status led
    */
   if(pio_get_output_data_status(LED_PIO, LED_PIN_MASK))
    pio_clear(LED_PIO, LED_PIN_MASK);
   else
    pio_set(LED_PIO,LED_PIN_MASK);    
  401552:	f44f 7180 	mov.w	r1, #256	; 0x100
  401556:	4805      	ldr	r0, [pc, #20]	; (40156c <but_Handler+0x44>)
  401558:	4b07      	ldr	r3, [pc, #28]	; (401578 <but_Handler+0x50>)
  40155a:	4798      	blx	r3
}
  40155c:	bf00      	nop
  40155e:	3708      	adds	r7, #8
  401560:	46bd      	mov	sp, r7
  401562:	bd80      	pop	{r7, pc}
  401564:	400e0e00 	.word	0x400e0e00
  401568:	0040072d 	.word	0x0040072d
  40156c:	400e1200 	.word	0x400e1200
  401570:	00400661 	.word	0x00400661
  401574:	00400561 	.word	0x00400561
  401578:	00400545 	.word	0x00400545

0040157c <but1_Handler>:

void but1_Handler(){
  40157c:	b580      	push	{r7, lr}
  40157e:	b082      	sub	sp, #8
  401580:	af00      	add	r7, sp, #0
    /*
     *  limpa interrupcao do PIO
     */
    uint32_t pioIntStatus;
    pioIntStatus =  pio_get_interrupt_status(BUT1_PIO);
  401582:	480c      	ldr	r0, [pc, #48]	; (4015b4 <but1_Handler+0x38>)
  401584:	4b0c      	ldr	r3, [pc, #48]	; (4015b8 <but1_Handler+0x3c>)
  401586:	4798      	blx	r3
  401588:	6078      	str	r0, [r7, #4]
    
   /**
    *  Toggle status led 1
    */
   if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
  40158a:	2101      	movs	r1, #1
  40158c:	480b      	ldr	r0, [pc, #44]	; (4015bc <but1_Handler+0x40>)
  40158e:	4b0c      	ldr	r3, [pc, #48]	; (4015c0 <but1_Handler+0x44>)
  401590:	4798      	blx	r3
  401592:	4603      	mov	r3, r0
  401594:	2b00      	cmp	r3, #0
  401596:	d004      	beq.n	4015a2 <but1_Handler+0x26>
    pio_clear(LED1_PIO, LED1_PIN_MASK);
  401598:	2101      	movs	r1, #1
  40159a:	4808      	ldr	r0, [pc, #32]	; (4015bc <but1_Handler+0x40>)
  40159c:	4b09      	ldr	r3, [pc, #36]	; (4015c4 <but1_Handler+0x48>)
  40159e:	4798      	blx	r3
   else
    pio_set(LED1_PIO,LED1_PIN_MASK);    
}
  4015a0:	e003      	b.n	4015aa <but1_Handler+0x2e>
    *  Toggle status led 1
    */
   if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
    pio_clear(LED1_PIO, LED1_PIN_MASK);
   else
    pio_set(LED1_PIO,LED1_PIN_MASK);    
  4015a2:	2101      	movs	r1, #1
  4015a4:	4805      	ldr	r0, [pc, #20]	; (4015bc <but1_Handler+0x40>)
  4015a6:	4b08      	ldr	r3, [pc, #32]	; (4015c8 <but1_Handler+0x4c>)
  4015a8:	4798      	blx	r3
}
  4015aa:	bf00      	nop
  4015ac:	3708      	adds	r7, #8
  4015ae:	46bd      	mov	sp, r7
  4015b0:	bd80      	pop	{r7, pc}
  4015b2:	bf00      	nop
  4015b4:	400e1400 	.word	0x400e1400
  4015b8:	0040072d 	.word	0x0040072d
  4015bc:	400e0e00 	.word	0x400e0e00
  4015c0:	00400661 	.word	0x00400661
  4015c4:	00400561 	.word	0x00400561
  4015c8:	00400545 	.word	0x00400545

004015cc <but2_Handler>:

void but2_Handler(){
  4015cc:	b580      	push	{r7, lr}
  4015ce:	b082      	sub	sp, #8
  4015d0:	af00      	add	r7, sp, #0
    /*
     *  limpa interrupcao do PIO
     */
    uint32_t pioIntStatus;
    pioIntStatus =  pio_get_interrupt_status(BUT2_PIO);
  4015d2:	480d      	ldr	r0, [pc, #52]	; (401608 <but2_Handler+0x3c>)
  4015d4:	4b0d      	ldr	r3, [pc, #52]	; (40160c <but2_Handler+0x40>)
  4015d6:	4798      	blx	r3
  4015d8:	6078      	str	r0, [r7, #4]
    
   /**
    *  Toggle status led 2
    */
   if(pio_get_output_data_status(LED2_PIO, LED2_PIN_MASK))
  4015da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015de:	480a      	ldr	r0, [pc, #40]	; (401608 <but2_Handler+0x3c>)
  4015e0:	4b0b      	ldr	r3, [pc, #44]	; (401610 <but2_Handler+0x44>)
  4015e2:	4798      	blx	r3
  4015e4:	4603      	mov	r3, r0
  4015e6:	2b00      	cmp	r3, #0
  4015e8:	d005      	beq.n	4015f6 <but2_Handler+0x2a>
    pio_clear(LED2_PIO, LED2_PIN_MASK);
  4015ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015ee:	4806      	ldr	r0, [pc, #24]	; (401608 <but2_Handler+0x3c>)
  4015f0:	4b08      	ldr	r3, [pc, #32]	; (401614 <but2_Handler+0x48>)
  4015f2:	4798      	blx	r3
   else
    pio_set(LED2_PIO,LED2_PIN_MASK);    
}
  4015f4:	e004      	b.n	401600 <but2_Handler+0x34>
    *  Toggle status led 2
    */
   if(pio_get_output_data_status(LED2_PIO, LED2_PIN_MASK))
    pio_clear(LED2_PIO, LED2_PIN_MASK);
   else
    pio_set(LED2_PIO,LED2_PIN_MASK);    
  4015f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015fa:	4803      	ldr	r0, [pc, #12]	; (401608 <but2_Handler+0x3c>)
  4015fc:	4b06      	ldr	r3, [pc, #24]	; (401618 <but2_Handler+0x4c>)
  4015fe:	4798      	blx	r3
}
  401600:	bf00      	nop
  401602:	3708      	adds	r7, #8
  401604:	46bd      	mov	sp, r7
  401606:	bd80      	pop	{r7, pc}
  401608:	400e1200 	.word	0x400e1200
  40160c:	0040072d 	.word	0x0040072d
  401610:	00400661 	.word	0x00400661
  401614:	00400561 	.word	0x00400561
  401618:	00400545 	.word	0x00400545

0040161c <but3_Handler>:

void but3_Handler(){
  40161c:	b580      	push	{r7, lr}
  40161e:	b082      	sub	sp, #8
  401620:	af00      	add	r7, sp, #0
    /*
     *  limpa interrupcao do PIO
     */
    uint32_t pioIntStatus;
    pioIntStatus =  pio_get_interrupt_status(BUT3_PIO);
  401622:	480c      	ldr	r0, [pc, #48]	; (401654 <but3_Handler+0x38>)
  401624:	4b0c      	ldr	r3, [pc, #48]	; (401658 <but3_Handler+0x3c>)
  401626:	4798      	blx	r3
  401628:	6078      	str	r0, [r7, #4]
    
   /**
    *  Toggle status led 3
    */
   if(pio_get_output_data_status(LED3_PIO, LED3_PIN_MASK))
  40162a:	2104      	movs	r1, #4
  40162c:	480b      	ldr	r0, [pc, #44]	; (40165c <but3_Handler+0x40>)
  40162e:	4b0c      	ldr	r3, [pc, #48]	; (401660 <but3_Handler+0x44>)
  401630:	4798      	blx	r3
  401632:	4603      	mov	r3, r0
  401634:	2b00      	cmp	r3, #0
  401636:	d004      	beq.n	401642 <but3_Handler+0x26>
    pio_clear(LED3_PIO, LED3_PIN_MASK);
  401638:	2104      	movs	r1, #4
  40163a:	4808      	ldr	r0, [pc, #32]	; (40165c <but3_Handler+0x40>)
  40163c:	4b09      	ldr	r3, [pc, #36]	; (401664 <but3_Handler+0x48>)
  40163e:	4798      	blx	r3
   else
    pio_set(LED3_PIO,LED3_PIN_MASK);    
}
  401640:	e003      	b.n	40164a <but3_Handler+0x2e>
    *  Toggle status led 3
    */
   if(pio_get_output_data_status(LED3_PIO, LED3_PIN_MASK))
    pio_clear(LED3_PIO, LED3_PIN_MASK);
   else
    pio_set(LED3_PIO,LED3_PIN_MASK);    
  401642:	2104      	movs	r1, #4
  401644:	4805      	ldr	r0, [pc, #20]	; (40165c <but3_Handler+0x40>)
  401646:	4b08      	ldr	r3, [pc, #32]	; (401668 <but3_Handler+0x4c>)
  401648:	4798      	blx	r3
}
  40164a:	bf00      	nop
  40164c:	3708      	adds	r7, #8
  40164e:	46bd      	mov	sp, r7
  401650:	bd80      	pop	{r7, pc}
  401652:	bf00      	nop
  401654:	400e0e00 	.word	0x400e0e00
  401658:	0040072d 	.word	0x0040072d
  40165c:	400e1000 	.word	0x400e1000
  401660:	00400661 	.word	0x00400661
  401664:	00400561 	.word	0x00400561
  401668:	00400545 	.word	0x00400545

0040166c <led_init>:
/************************************************************************/

/**
 * @Brief Inicializa o pino do LED
 */
void led_init(int estado, uint32_t led_id, Pio *led_pio, const uint32_t led_pin_mask){
  40166c:	b590      	push	{r4, r7, lr}
  40166e:	b087      	sub	sp, #28
  401670:	af02      	add	r7, sp, #8
  401672:	60f8      	str	r0, [r7, #12]
  401674:	60b9      	str	r1, [r7, #8]
  401676:	607a      	str	r2, [r7, #4]
  401678:	603b      	str	r3, [r7, #0]
    pmc_enable_periph_clk(led_id);
  40167a:	68b8      	ldr	r0, [r7, #8]
  40167c:	4b06      	ldr	r3, [pc, #24]	; (401698 <led_init+0x2c>)
  40167e:	4798      	blx	r3
    pio_set_output(led_pio, led_pin_mask, 1, 0, 0 );
  401680:	2300      	movs	r3, #0
  401682:	9300      	str	r3, [sp, #0]
  401684:	2300      	movs	r3, #0
  401686:	2201      	movs	r2, #1
  401688:	6839      	ldr	r1, [r7, #0]
  40168a:	6878      	ldr	r0, [r7, #4]
  40168c:	4c03      	ldr	r4, [pc, #12]	; (40169c <led_init+0x30>)
  40168e:	47a0      	blx	r4
};
  401690:	bf00      	nop
  401692:	3714      	adds	r7, #20
  401694:	46bd      	mov	sp, r7
  401696:	bd90      	pop	{r4, r7, pc}
  401698:	00400bed 	.word	0x00400bed
  40169c:	004005fd 	.word	0x004005fd

004016a0 <but_init>:
/**
 * @Brief Inicializa o pino do BUT
 *  config. botao em modo entrada enquanto 
 *  ativa e configura sua interrupcao.
 */
void but_init(uint32_t but_id, Pio *but_pio, const uint32_t but_pin_mask, uint32_t attribute, void (*but_handler) (uint32_t, uint32_t)){
  4016a0:	b590      	push	{r4, r7, lr}
  4016a2:	b087      	sub	sp, #28
  4016a4:	af02      	add	r7, sp, #8
  4016a6:	60f8      	str	r0, [r7, #12]
  4016a8:	60b9      	str	r1, [r7, #8]
  4016aa:	607a      	str	r2, [r7, #4]
  4016ac:	603b      	str	r3, [r7, #0]
    /* config. pino botao em modo de entrada */
    pmc_enable_periph_clk(but_id);
  4016ae:	68f8      	ldr	r0, [r7, #12]
  4016b0:	4b10      	ldr	r3, [pc, #64]	; (4016f4 <but_init+0x54>)
  4016b2:	4798      	blx	r3
    pio_set_input(but_pio, but_pin_mask, PIO_PULLUP | PIO_DEBOUNCE); 
  4016b4:	2209      	movs	r2, #9
  4016b6:	6879      	ldr	r1, [r7, #4]
  4016b8:	68b8      	ldr	r0, [r7, #8]
  4016ba:	4b0f      	ldr	r3, [pc, #60]	; (4016f8 <but_init+0x58>)
  4016bc:	4798      	blx	r3
    
    /* config. interrupcao em borda de descida no botao do kit */
    /* indica funcao (but_Handler) a ser chamada quando houver uma interrupção */
    pio_enable_interrupt(but_pio, but_pin_mask);
  4016be:	6879      	ldr	r1, [r7, #4]
  4016c0:	68b8      	ldr	r0, [r7, #8]
  4016c2:	4b0e      	ldr	r3, [pc, #56]	; (4016fc <but_init+0x5c>)
  4016c4:	4798      	blx	r3
    pio_handler_set(but_pio, but_id, but_pin_mask, attribute, but_handler); // attribute = PIO_IT_RISE_EDGE(borda de subida) ou PIO_IT_FALL_EDGE(borda de descida) ou PIO_IT_RE_OR_HL(subida e descida)
  4016c6:	6a3b      	ldr	r3, [r7, #32]
  4016c8:	9300      	str	r3, [sp, #0]
  4016ca:	683b      	ldr	r3, [r7, #0]
  4016cc:	687a      	ldr	r2, [r7, #4]
  4016ce:	68f9      	ldr	r1, [r7, #12]
  4016d0:	68b8      	ldr	r0, [r7, #8]
  4016d2:	4c0b      	ldr	r4, [pc, #44]	; (401700 <but_init+0x60>)
  4016d4:	47a0      	blx	r4
    
    /* habilita interrupçcão do PIO que controla o botao */
    /* e configura sua prioridade                        */
    NVIC_EnableIRQ(but_id);
  4016d6:	68fb      	ldr	r3, [r7, #12]
  4016d8:	b25b      	sxtb	r3, r3
  4016da:	4618      	mov	r0, r3
  4016dc:	4b09      	ldr	r3, [pc, #36]	; (401704 <but_init+0x64>)
  4016de:	4798      	blx	r3
    NVIC_SetPriority(but_id, 1);
  4016e0:	68fb      	ldr	r3, [r7, #12]
  4016e2:	b25b      	sxtb	r3, r3
  4016e4:	2101      	movs	r1, #1
  4016e6:	4618      	mov	r0, r3
  4016e8:	4b07      	ldr	r3, [pc, #28]	; (401708 <but_init+0x68>)
  4016ea:	4798      	blx	r3
};
  4016ec:	bf00      	nop
  4016ee:	3714      	adds	r7, #20
  4016f0:	46bd      	mov	sp, r7
  4016f2:	bd90      	pop	{r4, r7, pc}
  4016f4:	00400bed 	.word	0x00400bed
  4016f8:	0040057d 	.word	0x0040057d
  4016fc:	004006f5 	.word	0x004006f5
  401700:	00400811 	.word	0x00400811
  401704:	004013f9 	.word	0x004013f9
  401708:	0040142d 	.word	0x0040142d

0040170c <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  40170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401710:	b089      	sub	sp, #36	; 0x24
  401712:	af02      	add	r7, sp, #8
	/************************************************************************/
	/* Inicialização básica do uC                                           */
	/************************************************************************/
	sysclk_init();
  401714:	4b6a      	ldr	r3, [pc, #424]	; (4018c0 <main+0x1b4>)
  401716:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  401718:	4b6a      	ldr	r3, [pc, #424]	; (4018c4 <main+0x1b8>)
  40171a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40171e:	605a      	str	r2, [r3, #4]
	/************************************************************************/
	/* Inicializao I/OS                                                     */
	/************************************************************************/
	
	/*LED e Botão Kit*/
	led_init(1,LED_PIO_ID,LED_PIO,LED_PIN_MASK);
  401720:	f44f 7380 	mov.w	r3, #256	; 0x100
  401724:	4a68      	ldr	r2, [pc, #416]	; (4018c8 <main+0x1bc>)
  401726:	210c      	movs	r1, #12
  401728:	2001      	movs	r0, #1
  40172a:	4c68      	ldr	r4, [pc, #416]	; (4018cc <main+0x1c0>)
  40172c:	47a0      	blx	r4
    but_init(BUT_PIO_ID,BUT_PIO,BUT_PIN_MASK,PIO_IT_FALL_EDGE,but_Handler);
  40172e:	4b68      	ldr	r3, [pc, #416]	; (4018d0 <main+0x1c4>)
  401730:	9300      	str	r3, [sp, #0]
  401732:	2350      	movs	r3, #80	; 0x50
  401734:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401738:	4966      	ldr	r1, [pc, #408]	; (4018d4 <main+0x1c8>)
  40173a:	200a      	movs	r0, #10
  40173c:	4c66      	ldr	r4, [pc, #408]	; (4018d8 <main+0x1cc>)
  40173e:	47a0      	blx	r4
	
	/*LED e Botão 1*/
	led_init(0,LED1_PIO_ID,LED1_PIO,LED1_PIN_MASK);
  401740:	2301      	movs	r3, #1
  401742:	4a64      	ldr	r2, [pc, #400]	; (4018d4 <main+0x1c8>)
  401744:	210a      	movs	r1, #10
  401746:	2000      	movs	r0, #0
  401748:	4c60      	ldr	r4, [pc, #384]	; (4018cc <main+0x1c0>)
  40174a:	47a0      	blx	r4
	but_init(BUT1_PIO_ID,BUT1_PIO,BUT1_PIN_MASK,PIO_IT_RISE_EDGE,but1_Handler); //Botão 1 = borda de subida
  40174c:	4b63      	ldr	r3, [pc, #396]	; (4018dc <main+0x1d0>)
  40174e:	9300      	str	r3, [sp, #0]
  401750:	2370      	movs	r3, #112	; 0x70
  401752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401756:	4962      	ldr	r1, [pc, #392]	; (4018e0 <main+0x1d4>)
  401758:	2010      	movs	r0, #16
  40175a:	4c5f      	ldr	r4, [pc, #380]	; (4018d8 <main+0x1cc>)
  40175c:	47a0      	blx	r4
	
	/*LED e Botão 2*/
	led_init(1,LED2_PIO_ID,LED2_PIO,LED2_PIN_MASK);
  40175e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401762:	4a59      	ldr	r2, [pc, #356]	; (4018c8 <main+0x1bc>)
  401764:	210c      	movs	r1, #12
  401766:	2001      	movs	r0, #1
  401768:	4c58      	ldr	r4, [pc, #352]	; (4018cc <main+0x1c0>)
  40176a:	47a0      	blx	r4
	but_init(BUT2_PIO_ID,BUT2_PIO,BUT2_PIN_MASK,PIO_IT_FALL_EDGE,but2_Handler); //Botão 2 = borda de descida
  40176c:	4b5d      	ldr	r3, [pc, #372]	; (4018e4 <main+0x1d8>)
  40176e:	9300      	str	r3, [sp, #0]
  401770:	2350      	movs	r3, #80	; 0x50
  401772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401776:	4954      	ldr	r1, [pc, #336]	; (4018c8 <main+0x1bc>)
  401778:	200c      	movs	r0, #12
  40177a:	4c57      	ldr	r4, [pc, #348]	; (4018d8 <main+0x1cc>)
  40177c:	47a0      	blx	r4
	
	/*LED e Botão 3*/
	led_init(1,LED3_PIO_ID,LED3_PIO,LED3_PIN_MASK);
  40177e:	2304      	movs	r3, #4
  401780:	4a59      	ldr	r2, [pc, #356]	; (4018e8 <main+0x1dc>)
  401782:	210b      	movs	r1, #11
  401784:	2001      	movs	r0, #1
  401786:	4c51      	ldr	r4, [pc, #324]	; (4018cc <main+0x1c0>)
  401788:	47a0      	blx	r4
	but_init(BUT3_PIO_ID,BUT3_PIO,BUT3_PIN_MASK,PIO_IT_RE_OR_HL,but3_Handler); //Botão 3 = borda de subida e descida
  40178a:	4b58      	ldr	r3, [pc, #352]	; (4018ec <main+0x1e0>)
  40178c:	9300      	str	r3, [sp, #0]
  40178e:	2320      	movs	r3, #32
  401790:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401794:	494f      	ldr	r1, [pc, #316]	; (4018d4 <main+0x1c8>)
  401796:	200a      	movs	r0, #10
  401798:	4c4f      	ldr	r4, [pc, #316]	; (4018d8 <main+0x1cc>)
  40179a:	47a0      	blx	r4

	/************************************************************************/
	/* Super loop                                                           */
	/************************************************************************/
	while(1){
		pio_set(LED_PIO, LED_PIN_MASK);	
  40179c:	f44f 7180 	mov.w	r1, #256	; 0x100
  4017a0:	4849      	ldr	r0, [pc, #292]	; (4018c8 <main+0x1bc>)
  4017a2:	4b53      	ldr	r3, [pc, #332]	; (4018f0 <main+0x1e4>)
  4017a4:	4798      	blx	r3
		
       /* entra em modo sleep */
       pmc_sleep(SLEEPMGR_SLEEP_WFI);
  4017a6:	2002      	movs	r0, #2
  4017a8:	4b52      	ldr	r3, [pc, #328]	; (4018f4 <main+0x1e8>)
  4017aa:	4798      	blx	r3
	   
	   /*blink 3s*/
	   for (char i = 0; i <=5; i++) {
  4017ac:	2300      	movs	r3, #0
  4017ae:	75fb      	strb	r3, [r7, #23]
  4017b0:	e081      	b.n	4018b6 <main+0x1aa>
		   pio_clear(LED_PIO, LED_PIN_MASK);
  4017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4017b6:	4844      	ldr	r0, [pc, #272]	; (4018c8 <main+0x1bc>)
  4017b8:	4b4f      	ldr	r3, [pc, #316]	; (4018f8 <main+0x1ec>)
  4017ba:	4798      	blx	r3
		   delay_ms(250);
  4017bc:	4b4f      	ldr	r3, [pc, #316]	; (4018fc <main+0x1f0>)
  4017be:	4798      	blx	r3
  4017c0:	4603      	mov	r3, r0
  4017c2:	4619      	mov	r1, r3
  4017c4:	f04f 0200 	mov.w	r2, #0
  4017c8:	460b      	mov	r3, r1
  4017ca:	4614      	mov	r4, r2
  4017cc:	00a0      	lsls	r0, r4, #2
  4017ce:	60f8      	str	r0, [r7, #12]
  4017d0:	68f8      	ldr	r0, [r7, #12]
  4017d2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4017d6:	60f8      	str	r0, [r7, #12]
  4017d8:	009b      	lsls	r3, r3, #2
  4017da:	60bb      	str	r3, [r7, #8]
  4017dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4017e0:	0166      	lsls	r6, r4, #5
  4017e2:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4017e6:	015d      	lsls	r5, r3, #5
  4017e8:	1aed      	subs	r5, r5, r3
  4017ea:	eb66 0604 	sbc.w	r6, r6, r4
  4017ee:	186d      	adds	r5, r5, r1
  4017f0:	eb46 0602 	adc.w	r6, r6, r2
  4017f4:	196b      	adds	r3, r5, r5
  4017f6:	eb46 0406 	adc.w	r4, r6, r6
  4017fa:	461d      	mov	r5, r3
  4017fc:	4626      	mov	r6, r4
  4017fe:	4629      	mov	r1, r5
  401800:	4632      	mov	r2, r6
  401802:	f241 732b 	movw	r3, #5931	; 0x172b
  401806:	f04f 0400 	mov.w	r4, #0
  40180a:	eb11 0a03 	adds.w	sl, r1, r3
  40180e:	eb42 0b04 	adc.w	fp, r2, r4
  401812:	4650      	mov	r0, sl
  401814:	4659      	mov	r1, fp
  401816:	4c3a      	ldr	r4, [pc, #232]	; (401900 <main+0x1f4>)
  401818:	f241 722c 	movw	r2, #5932	; 0x172c
  40181c:	f04f 0300 	mov.w	r3, #0
  401820:	47a0      	blx	r4
  401822:	4603      	mov	r3, r0
  401824:	460c      	mov	r4, r1
  401826:	4618      	mov	r0, r3
  401828:	4b36      	ldr	r3, [pc, #216]	; (401904 <main+0x1f8>)
  40182a:	4798      	blx	r3
		   pio_set(LED_PIO, LED_PIN_MASK);
  40182c:	f44f 7180 	mov.w	r1, #256	; 0x100
  401830:	4825      	ldr	r0, [pc, #148]	; (4018c8 <main+0x1bc>)
  401832:	4b2f      	ldr	r3, [pc, #188]	; (4018f0 <main+0x1e4>)
  401834:	4798      	blx	r3
		   delay_ms(250);
  401836:	4b31      	ldr	r3, [pc, #196]	; (4018fc <main+0x1f0>)
  401838:	4798      	blx	r3
  40183a:	4603      	mov	r3, r0
  40183c:	4619      	mov	r1, r3
  40183e:	f04f 0200 	mov.w	r2, #0
  401842:	460b      	mov	r3, r1
  401844:	4614      	mov	r4, r2
  401846:	00a0      	lsls	r0, r4, #2
  401848:	6078      	str	r0, [r7, #4]
  40184a:	6878      	ldr	r0, [r7, #4]
  40184c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  401850:	6078      	str	r0, [r7, #4]
  401852:	009b      	lsls	r3, r3, #2
  401854:	603b      	str	r3, [r7, #0]
  401856:	e9d7 3400 	ldrd	r3, r4, [r7]
  40185a:	ea4f 1944 	mov.w	r9, r4, lsl #5
  40185e:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  401862:	ea4f 1843 	mov.w	r8, r3, lsl #5
  401866:	ebb8 0803 	subs.w	r8, r8, r3
  40186a:	eb69 0904 	sbc.w	r9, r9, r4
  40186e:	eb18 0801 	adds.w	r8, r8, r1
  401872:	eb49 0902 	adc.w	r9, r9, r2
  401876:	eb18 0308 	adds.w	r3, r8, r8
  40187a:	eb49 0409 	adc.w	r4, r9, r9
  40187e:	4698      	mov	r8, r3
  401880:	46a1      	mov	r9, r4
  401882:	4641      	mov	r1, r8
  401884:	464a      	mov	r2, r9
  401886:	f241 732b 	movw	r3, #5931	; 0x172b
  40188a:	f04f 0400 	mov.w	r4, #0
  40188e:	eb11 0a03 	adds.w	sl, r1, r3
  401892:	eb42 0b04 	adc.w	fp, r2, r4
  401896:	4650      	mov	r0, sl
  401898:	4659      	mov	r1, fp
  40189a:	4c19      	ldr	r4, [pc, #100]	; (401900 <main+0x1f4>)
  40189c:	f241 722c 	movw	r2, #5932	; 0x172c
  4018a0:	f04f 0300 	mov.w	r3, #0
  4018a4:	47a0      	blx	r4
  4018a6:	4603      	mov	r3, r0
  4018a8:	460c      	mov	r4, r1
  4018aa:	4618      	mov	r0, r3
  4018ac:	4b15      	ldr	r3, [pc, #84]	; (401904 <main+0x1f8>)
  4018ae:	4798      	blx	r3
		
       /* entra em modo sleep */
       pmc_sleep(SLEEPMGR_SLEEP_WFI);
	   
	   /*blink 3s*/
	   for (char i = 0; i <=5; i++) {
  4018b0:	7dfb      	ldrb	r3, [r7, #23]
  4018b2:	3301      	adds	r3, #1
  4018b4:	75fb      	strb	r3, [r7, #23]
  4018b6:	7dfb      	ldrb	r3, [r7, #23]
  4018b8:	2b05      	cmp	r3, #5
  4018ba:	f67f af7a 	bls.w	4017b2 <main+0xa6>
		   pio_clear(LED_PIO, LED_PIN_MASK);
		   delay_ms(250);
		   pio_set(LED_PIO, LED_PIN_MASK);
		   delay_ms(250);
	   }	   
	};
  4018be:	e76d      	b.n	40179c <main+0x90>
  4018c0:	0040049d 	.word	0x0040049d
  4018c4:	400e1850 	.word	0x400e1850
  4018c8:	400e1200 	.word	0x400e1200
  4018cc:	0040166d 	.word	0x0040166d
  4018d0:	00401529 	.word	0x00401529
  4018d4:	400e0e00 	.word	0x400e0e00
  4018d8:	004016a1 	.word	0x004016a1
  4018dc:	0040157d 	.word	0x0040157d
  4018e0:	400e1400 	.word	0x400e1400
  4018e4:	004015cd 	.word	0x004015cd
  4018e8:	400e1000 	.word	0x400e1000
  4018ec:	0040161d 	.word	0x0040161d
  4018f0:	00400545 	.word	0x00400545
  4018f4:	00400d21 	.word	0x00400d21
  4018f8:	00400561 	.word	0x00400561
  4018fc:	00401515 	.word	0x00401515
  401900:	00401909 	.word	0x00401909
  401904:	20400001 	.word	0x20400001

00401908 <__aeabi_uldivmod>:
  401908:	b953      	cbnz	r3, 401920 <__aeabi_uldivmod+0x18>
  40190a:	b94a      	cbnz	r2, 401920 <__aeabi_uldivmod+0x18>
  40190c:	2900      	cmp	r1, #0
  40190e:	bf08      	it	eq
  401910:	2800      	cmpeq	r0, #0
  401912:	bf1c      	itt	ne
  401914:	f04f 31ff 	movne.w	r1, #4294967295
  401918:	f04f 30ff 	movne.w	r0, #4294967295
  40191c:	f000 b97e 	b.w	401c1c <__aeabi_idiv0>
  401920:	f1ad 0c08 	sub.w	ip, sp, #8
  401924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401928:	f000 f806 	bl	401938 <__udivmoddi4>
  40192c:	f8dd e004 	ldr.w	lr, [sp, #4]
  401930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401934:	b004      	add	sp, #16
  401936:	4770      	bx	lr

00401938 <__udivmoddi4>:
  401938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40193c:	468c      	mov	ip, r1
  40193e:	460e      	mov	r6, r1
  401940:	4604      	mov	r4, r0
  401942:	9d08      	ldr	r5, [sp, #32]
  401944:	2b00      	cmp	r3, #0
  401946:	d150      	bne.n	4019ea <__udivmoddi4+0xb2>
  401948:	428a      	cmp	r2, r1
  40194a:	4617      	mov	r7, r2
  40194c:	d96c      	bls.n	401a28 <__udivmoddi4+0xf0>
  40194e:	fab2 fe82 	clz	lr, r2
  401952:	f1be 0f00 	cmp.w	lr, #0
  401956:	d00b      	beq.n	401970 <__udivmoddi4+0x38>
  401958:	f1ce 0420 	rsb	r4, lr, #32
  40195c:	fa20 f404 	lsr.w	r4, r0, r4
  401960:	fa01 f60e 	lsl.w	r6, r1, lr
  401964:	ea44 0c06 	orr.w	ip, r4, r6
  401968:	fa02 f70e 	lsl.w	r7, r2, lr
  40196c:	fa00 f40e 	lsl.w	r4, r0, lr
  401970:	ea4f 4917 	mov.w	r9, r7, lsr #16
  401974:	0c22      	lsrs	r2, r4, #16
  401976:	fbbc f0f9 	udiv	r0, ip, r9
  40197a:	fa1f f887 	uxth.w	r8, r7
  40197e:	fb09 c610 	mls	r6, r9, r0, ip
  401982:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  401986:	fb00 f308 	mul.w	r3, r0, r8
  40198a:	42b3      	cmp	r3, r6
  40198c:	d909      	bls.n	4019a2 <__udivmoddi4+0x6a>
  40198e:	19f6      	adds	r6, r6, r7
  401990:	f100 32ff 	add.w	r2, r0, #4294967295
  401994:	f080 8122 	bcs.w	401bdc <__udivmoddi4+0x2a4>
  401998:	42b3      	cmp	r3, r6
  40199a:	f240 811f 	bls.w	401bdc <__udivmoddi4+0x2a4>
  40199e:	3802      	subs	r0, #2
  4019a0:	443e      	add	r6, r7
  4019a2:	1af6      	subs	r6, r6, r3
  4019a4:	b2a2      	uxth	r2, r4
  4019a6:	fbb6 f3f9 	udiv	r3, r6, r9
  4019aa:	fb09 6613 	mls	r6, r9, r3, r6
  4019ae:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4019b2:	fb03 f808 	mul.w	r8, r3, r8
  4019b6:	45a0      	cmp	r8, r4
  4019b8:	d909      	bls.n	4019ce <__udivmoddi4+0x96>
  4019ba:	19e4      	adds	r4, r4, r7
  4019bc:	f103 32ff 	add.w	r2, r3, #4294967295
  4019c0:	f080 810a 	bcs.w	401bd8 <__udivmoddi4+0x2a0>
  4019c4:	45a0      	cmp	r8, r4
  4019c6:	f240 8107 	bls.w	401bd8 <__udivmoddi4+0x2a0>
  4019ca:	3b02      	subs	r3, #2
  4019cc:	443c      	add	r4, r7
  4019ce:	ebc8 0404 	rsb	r4, r8, r4
  4019d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4019d6:	2100      	movs	r1, #0
  4019d8:	2d00      	cmp	r5, #0
  4019da:	d062      	beq.n	401aa2 <__udivmoddi4+0x16a>
  4019dc:	fa24 f40e 	lsr.w	r4, r4, lr
  4019e0:	2300      	movs	r3, #0
  4019e2:	602c      	str	r4, [r5, #0]
  4019e4:	606b      	str	r3, [r5, #4]
  4019e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019ea:	428b      	cmp	r3, r1
  4019ec:	d907      	bls.n	4019fe <__udivmoddi4+0xc6>
  4019ee:	2d00      	cmp	r5, #0
  4019f0:	d055      	beq.n	401a9e <__udivmoddi4+0x166>
  4019f2:	2100      	movs	r1, #0
  4019f4:	e885 0041 	stmia.w	r5, {r0, r6}
  4019f8:	4608      	mov	r0, r1
  4019fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019fe:	fab3 f183 	clz	r1, r3
  401a02:	2900      	cmp	r1, #0
  401a04:	f040 8090 	bne.w	401b28 <__udivmoddi4+0x1f0>
  401a08:	42b3      	cmp	r3, r6
  401a0a:	d302      	bcc.n	401a12 <__udivmoddi4+0xda>
  401a0c:	4282      	cmp	r2, r0
  401a0e:	f200 80f8 	bhi.w	401c02 <__udivmoddi4+0x2ca>
  401a12:	1a84      	subs	r4, r0, r2
  401a14:	eb66 0603 	sbc.w	r6, r6, r3
  401a18:	2001      	movs	r0, #1
  401a1a:	46b4      	mov	ip, r6
  401a1c:	2d00      	cmp	r5, #0
  401a1e:	d040      	beq.n	401aa2 <__udivmoddi4+0x16a>
  401a20:	e885 1010 	stmia.w	r5, {r4, ip}
  401a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a28:	b912      	cbnz	r2, 401a30 <__udivmoddi4+0xf8>
  401a2a:	2701      	movs	r7, #1
  401a2c:	fbb7 f7f2 	udiv	r7, r7, r2
  401a30:	fab7 fe87 	clz	lr, r7
  401a34:	f1be 0f00 	cmp.w	lr, #0
  401a38:	d135      	bne.n	401aa6 <__udivmoddi4+0x16e>
  401a3a:	1bf3      	subs	r3, r6, r7
  401a3c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401a40:	fa1f fc87 	uxth.w	ip, r7
  401a44:	2101      	movs	r1, #1
  401a46:	fbb3 f0f8 	udiv	r0, r3, r8
  401a4a:	0c22      	lsrs	r2, r4, #16
  401a4c:	fb08 3610 	mls	r6, r8, r0, r3
  401a50:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  401a54:	fb0c f300 	mul.w	r3, ip, r0
  401a58:	42b3      	cmp	r3, r6
  401a5a:	d907      	bls.n	401a6c <__udivmoddi4+0x134>
  401a5c:	19f6      	adds	r6, r6, r7
  401a5e:	f100 32ff 	add.w	r2, r0, #4294967295
  401a62:	d202      	bcs.n	401a6a <__udivmoddi4+0x132>
  401a64:	42b3      	cmp	r3, r6
  401a66:	f200 80ce 	bhi.w	401c06 <__udivmoddi4+0x2ce>
  401a6a:	4610      	mov	r0, r2
  401a6c:	1af6      	subs	r6, r6, r3
  401a6e:	b2a2      	uxth	r2, r4
  401a70:	fbb6 f3f8 	udiv	r3, r6, r8
  401a74:	fb08 6613 	mls	r6, r8, r3, r6
  401a78:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  401a7c:	fb0c fc03 	mul.w	ip, ip, r3
  401a80:	45a4      	cmp	ip, r4
  401a82:	d907      	bls.n	401a94 <__udivmoddi4+0x15c>
  401a84:	19e4      	adds	r4, r4, r7
  401a86:	f103 32ff 	add.w	r2, r3, #4294967295
  401a8a:	d202      	bcs.n	401a92 <__udivmoddi4+0x15a>
  401a8c:	45a4      	cmp	ip, r4
  401a8e:	f200 80b5 	bhi.w	401bfc <__udivmoddi4+0x2c4>
  401a92:	4613      	mov	r3, r2
  401a94:	ebcc 0404 	rsb	r4, ip, r4
  401a98:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401a9c:	e79c      	b.n	4019d8 <__udivmoddi4+0xa0>
  401a9e:	4629      	mov	r1, r5
  401aa0:	4628      	mov	r0, r5
  401aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401aa6:	f1ce 0120 	rsb	r1, lr, #32
  401aaa:	fa06 f30e 	lsl.w	r3, r6, lr
  401aae:	fa07 f70e 	lsl.w	r7, r7, lr
  401ab2:	fa20 f901 	lsr.w	r9, r0, r1
  401ab6:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401aba:	40ce      	lsrs	r6, r1
  401abc:	ea49 0903 	orr.w	r9, r9, r3
  401ac0:	fbb6 faf8 	udiv	sl, r6, r8
  401ac4:	ea4f 4419 	mov.w	r4, r9, lsr #16
  401ac8:	fb08 661a 	mls	r6, r8, sl, r6
  401acc:	fa1f fc87 	uxth.w	ip, r7
  401ad0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  401ad4:	fb0a f20c 	mul.w	r2, sl, ip
  401ad8:	429a      	cmp	r2, r3
  401ada:	fa00 f40e 	lsl.w	r4, r0, lr
  401ade:	d90a      	bls.n	401af6 <__udivmoddi4+0x1be>
  401ae0:	19db      	adds	r3, r3, r7
  401ae2:	f10a 31ff 	add.w	r1, sl, #4294967295
  401ae6:	f080 8087 	bcs.w	401bf8 <__udivmoddi4+0x2c0>
  401aea:	429a      	cmp	r2, r3
  401aec:	f240 8084 	bls.w	401bf8 <__udivmoddi4+0x2c0>
  401af0:	f1aa 0a02 	sub.w	sl, sl, #2
  401af4:	443b      	add	r3, r7
  401af6:	1a9b      	subs	r3, r3, r2
  401af8:	fa1f f989 	uxth.w	r9, r9
  401afc:	fbb3 f1f8 	udiv	r1, r3, r8
  401b00:	fb08 3311 	mls	r3, r8, r1, r3
  401b04:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  401b08:	fb01 f60c 	mul.w	r6, r1, ip
  401b0c:	429e      	cmp	r6, r3
  401b0e:	d907      	bls.n	401b20 <__udivmoddi4+0x1e8>
  401b10:	19db      	adds	r3, r3, r7
  401b12:	f101 32ff 	add.w	r2, r1, #4294967295
  401b16:	d26b      	bcs.n	401bf0 <__udivmoddi4+0x2b8>
  401b18:	429e      	cmp	r6, r3
  401b1a:	d969      	bls.n	401bf0 <__udivmoddi4+0x2b8>
  401b1c:	3902      	subs	r1, #2
  401b1e:	443b      	add	r3, r7
  401b20:	1b9b      	subs	r3, r3, r6
  401b22:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  401b26:	e78e      	b.n	401a46 <__udivmoddi4+0x10e>
  401b28:	f1c1 0e20 	rsb	lr, r1, #32
  401b2c:	fa22 f40e 	lsr.w	r4, r2, lr
  401b30:	408b      	lsls	r3, r1
  401b32:	4323      	orrs	r3, r4
  401b34:	fa20 f70e 	lsr.w	r7, r0, lr
  401b38:	fa06 f401 	lsl.w	r4, r6, r1
  401b3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401b40:	fa26 f60e 	lsr.w	r6, r6, lr
  401b44:	433c      	orrs	r4, r7
  401b46:	fbb6 f9fc 	udiv	r9, r6, ip
  401b4a:	0c27      	lsrs	r7, r4, #16
  401b4c:	fb0c 6619 	mls	r6, ip, r9, r6
  401b50:	fa1f f883 	uxth.w	r8, r3
  401b54:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  401b58:	fb09 f708 	mul.w	r7, r9, r8
  401b5c:	42b7      	cmp	r7, r6
  401b5e:	fa02 f201 	lsl.w	r2, r2, r1
  401b62:	fa00 fa01 	lsl.w	sl, r0, r1
  401b66:	d908      	bls.n	401b7a <__udivmoddi4+0x242>
  401b68:	18f6      	adds	r6, r6, r3
  401b6a:	f109 30ff 	add.w	r0, r9, #4294967295
  401b6e:	d241      	bcs.n	401bf4 <__udivmoddi4+0x2bc>
  401b70:	42b7      	cmp	r7, r6
  401b72:	d93f      	bls.n	401bf4 <__udivmoddi4+0x2bc>
  401b74:	f1a9 0902 	sub.w	r9, r9, #2
  401b78:	441e      	add	r6, r3
  401b7a:	1bf6      	subs	r6, r6, r7
  401b7c:	b2a0      	uxth	r0, r4
  401b7e:	fbb6 f4fc 	udiv	r4, r6, ip
  401b82:	fb0c 6614 	mls	r6, ip, r4, r6
  401b86:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  401b8a:	fb04 f808 	mul.w	r8, r4, r8
  401b8e:	45b8      	cmp	r8, r7
  401b90:	d907      	bls.n	401ba2 <__udivmoddi4+0x26a>
  401b92:	18ff      	adds	r7, r7, r3
  401b94:	f104 30ff 	add.w	r0, r4, #4294967295
  401b98:	d228      	bcs.n	401bec <__udivmoddi4+0x2b4>
  401b9a:	45b8      	cmp	r8, r7
  401b9c:	d926      	bls.n	401bec <__udivmoddi4+0x2b4>
  401b9e:	3c02      	subs	r4, #2
  401ba0:	441f      	add	r7, r3
  401ba2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  401ba6:	ebc8 0707 	rsb	r7, r8, r7
  401baa:	fba0 8902 	umull	r8, r9, r0, r2
  401bae:	454f      	cmp	r7, r9
  401bb0:	4644      	mov	r4, r8
  401bb2:	464e      	mov	r6, r9
  401bb4:	d314      	bcc.n	401be0 <__udivmoddi4+0x2a8>
  401bb6:	d029      	beq.n	401c0c <__udivmoddi4+0x2d4>
  401bb8:	b365      	cbz	r5, 401c14 <__udivmoddi4+0x2dc>
  401bba:	ebba 0304 	subs.w	r3, sl, r4
  401bbe:	eb67 0706 	sbc.w	r7, r7, r6
  401bc2:	fa07 fe0e 	lsl.w	lr, r7, lr
  401bc6:	40cb      	lsrs	r3, r1
  401bc8:	40cf      	lsrs	r7, r1
  401bca:	ea4e 0303 	orr.w	r3, lr, r3
  401bce:	e885 0088 	stmia.w	r5, {r3, r7}
  401bd2:	2100      	movs	r1, #0
  401bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bd8:	4613      	mov	r3, r2
  401bda:	e6f8      	b.n	4019ce <__udivmoddi4+0x96>
  401bdc:	4610      	mov	r0, r2
  401bde:	e6e0      	b.n	4019a2 <__udivmoddi4+0x6a>
  401be0:	ebb8 0402 	subs.w	r4, r8, r2
  401be4:	eb69 0603 	sbc.w	r6, r9, r3
  401be8:	3801      	subs	r0, #1
  401bea:	e7e5      	b.n	401bb8 <__udivmoddi4+0x280>
  401bec:	4604      	mov	r4, r0
  401bee:	e7d8      	b.n	401ba2 <__udivmoddi4+0x26a>
  401bf0:	4611      	mov	r1, r2
  401bf2:	e795      	b.n	401b20 <__udivmoddi4+0x1e8>
  401bf4:	4681      	mov	r9, r0
  401bf6:	e7c0      	b.n	401b7a <__udivmoddi4+0x242>
  401bf8:	468a      	mov	sl, r1
  401bfa:	e77c      	b.n	401af6 <__udivmoddi4+0x1be>
  401bfc:	3b02      	subs	r3, #2
  401bfe:	443c      	add	r4, r7
  401c00:	e748      	b.n	401a94 <__udivmoddi4+0x15c>
  401c02:	4608      	mov	r0, r1
  401c04:	e70a      	b.n	401a1c <__udivmoddi4+0xe4>
  401c06:	3802      	subs	r0, #2
  401c08:	443e      	add	r6, r7
  401c0a:	e72f      	b.n	401a6c <__udivmoddi4+0x134>
  401c0c:	45c2      	cmp	sl, r8
  401c0e:	d3e7      	bcc.n	401be0 <__udivmoddi4+0x2a8>
  401c10:	463e      	mov	r6, r7
  401c12:	e7d1      	b.n	401bb8 <__udivmoddi4+0x280>
  401c14:	4629      	mov	r1, r5
  401c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c1a:	bf00      	nop

00401c1c <__aeabi_idiv0>:
  401c1c:	4770      	bx	lr
  401c1e:	bf00      	nop

00401c20 <__libc_init_array>:
  401c20:	b570      	push	{r4, r5, r6, lr}
  401c22:	4e0f      	ldr	r6, [pc, #60]	; (401c60 <__libc_init_array+0x40>)
  401c24:	4d0f      	ldr	r5, [pc, #60]	; (401c64 <__libc_init_array+0x44>)
  401c26:	1b76      	subs	r6, r6, r5
  401c28:	10b6      	asrs	r6, r6, #2
  401c2a:	bf18      	it	ne
  401c2c:	2400      	movne	r4, #0
  401c2e:	d005      	beq.n	401c3c <__libc_init_array+0x1c>
  401c30:	3401      	adds	r4, #1
  401c32:	f855 3b04 	ldr.w	r3, [r5], #4
  401c36:	4798      	blx	r3
  401c38:	42a6      	cmp	r6, r4
  401c3a:	d1f9      	bne.n	401c30 <__libc_init_array+0x10>
  401c3c:	4e0a      	ldr	r6, [pc, #40]	; (401c68 <__libc_init_array+0x48>)
  401c3e:	4d0b      	ldr	r5, [pc, #44]	; (401c6c <__libc_init_array+0x4c>)
  401c40:	1b76      	subs	r6, r6, r5
  401c42:	f000 f88f 	bl	401d64 <_init>
  401c46:	10b6      	asrs	r6, r6, #2
  401c48:	bf18      	it	ne
  401c4a:	2400      	movne	r4, #0
  401c4c:	d006      	beq.n	401c5c <__libc_init_array+0x3c>
  401c4e:	3401      	adds	r4, #1
  401c50:	f855 3b04 	ldr.w	r3, [r5], #4
  401c54:	4798      	blx	r3
  401c56:	42a6      	cmp	r6, r4
  401c58:	d1f9      	bne.n	401c4e <__libc_init_array+0x2e>
  401c5a:	bd70      	pop	{r4, r5, r6, pc}
  401c5c:	bd70      	pop	{r4, r5, r6, pc}
  401c5e:	bf00      	nop
  401c60:	00401d70 	.word	0x00401d70
  401c64:	00401d70 	.word	0x00401d70
  401c68:	00401d78 	.word	0x00401d78
  401c6c:	00401d70 	.word	0x00401d70

00401c70 <register_fini>:
  401c70:	4b02      	ldr	r3, [pc, #8]	; (401c7c <register_fini+0xc>)
  401c72:	b113      	cbz	r3, 401c7a <register_fini+0xa>
  401c74:	4802      	ldr	r0, [pc, #8]	; (401c80 <register_fini+0x10>)
  401c76:	f000 b805 	b.w	401c84 <atexit>
  401c7a:	4770      	bx	lr
  401c7c:	00000000 	.word	0x00000000
  401c80:	00401c91 	.word	0x00401c91

00401c84 <atexit>:
  401c84:	2300      	movs	r3, #0
  401c86:	4601      	mov	r1, r0
  401c88:	461a      	mov	r2, r3
  401c8a:	4618      	mov	r0, r3
  401c8c:	f000 b814 	b.w	401cb8 <__register_exitproc>

00401c90 <__libc_fini_array>:
  401c90:	b538      	push	{r3, r4, r5, lr}
  401c92:	4d07      	ldr	r5, [pc, #28]	; (401cb0 <__libc_fini_array+0x20>)
  401c94:	4c07      	ldr	r4, [pc, #28]	; (401cb4 <__libc_fini_array+0x24>)
  401c96:	1b2c      	subs	r4, r5, r4
  401c98:	10a4      	asrs	r4, r4, #2
  401c9a:	d005      	beq.n	401ca8 <__libc_fini_array+0x18>
  401c9c:	3c01      	subs	r4, #1
  401c9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401ca2:	4798      	blx	r3
  401ca4:	2c00      	cmp	r4, #0
  401ca6:	d1f9      	bne.n	401c9c <__libc_fini_array+0xc>
  401ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401cac:	f000 b864 	b.w	401d78 <_fini>
  401cb0:	00401d88 	.word	0x00401d88
  401cb4:	00401d84 	.word	0x00401d84

00401cb8 <__register_exitproc>:
  401cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401cbc:	4c25      	ldr	r4, [pc, #148]	; (401d54 <__register_exitproc+0x9c>)
  401cbe:	6825      	ldr	r5, [r4, #0]
  401cc0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  401cc4:	4606      	mov	r6, r0
  401cc6:	4688      	mov	r8, r1
  401cc8:	4692      	mov	sl, r2
  401cca:	4699      	mov	r9, r3
  401ccc:	b3c4      	cbz	r4, 401d40 <__register_exitproc+0x88>
  401cce:	6860      	ldr	r0, [r4, #4]
  401cd0:	281f      	cmp	r0, #31
  401cd2:	dc17      	bgt.n	401d04 <__register_exitproc+0x4c>
  401cd4:	1c43      	adds	r3, r0, #1
  401cd6:	b176      	cbz	r6, 401cf6 <__register_exitproc+0x3e>
  401cd8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  401cdc:	2201      	movs	r2, #1
  401cde:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  401ce2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  401ce6:	4082      	lsls	r2, r0
  401ce8:	4311      	orrs	r1, r2
  401cea:	2e02      	cmp	r6, #2
  401cec:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  401cf0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  401cf4:	d01e      	beq.n	401d34 <__register_exitproc+0x7c>
  401cf6:	3002      	adds	r0, #2
  401cf8:	6063      	str	r3, [r4, #4]
  401cfa:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  401cfe:	2000      	movs	r0, #0
  401d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d04:	4b14      	ldr	r3, [pc, #80]	; (401d58 <__register_exitproc+0xa0>)
  401d06:	b303      	cbz	r3, 401d4a <__register_exitproc+0x92>
  401d08:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401d0c:	f3af 8000 	nop.w
  401d10:	4604      	mov	r4, r0
  401d12:	b1d0      	cbz	r0, 401d4a <__register_exitproc+0x92>
  401d14:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  401d18:	2700      	movs	r7, #0
  401d1a:	e880 0088 	stmia.w	r0, {r3, r7}
  401d1e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401d22:	4638      	mov	r0, r7
  401d24:	2301      	movs	r3, #1
  401d26:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  401d2a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  401d2e:	2e00      	cmp	r6, #0
  401d30:	d0e1      	beq.n	401cf6 <__register_exitproc+0x3e>
  401d32:	e7d1      	b.n	401cd8 <__register_exitproc+0x20>
  401d34:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  401d38:	430a      	orrs	r2, r1
  401d3a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  401d3e:	e7da      	b.n	401cf6 <__register_exitproc+0x3e>
  401d40:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  401d44:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401d48:	e7c1      	b.n	401cce <__register_exitproc+0x16>
  401d4a:	f04f 30ff 	mov.w	r0, #4294967295
  401d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d52:	bf00      	nop
  401d54:	00401d60 	.word	0x00401d60
  401d58:	00000000 	.word	0x00000000
  401d5c:	00000043 	.word	0x00000043

00401d60 <_global_impure_ptr>:
  401d60:	20400018                                ..@ 

00401d64 <_init>:
  401d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d66:	bf00      	nop
  401d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d6a:	bc08      	pop	{r3}
  401d6c:	469e      	mov	lr, r3
  401d6e:	4770      	bx	lr

00401d70 <__init_array_start>:
  401d70:	00401c71 	.word	0x00401c71

00401d74 <__frame_dummy_init_array_entry>:
  401d74:	00400165                                e.@.

00401d78 <_fini>:
  401d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d7a:	bf00      	nop
  401d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d7e:	bc08      	pop	{r3}
  401d80:	469e      	mov	lr, r3
  401d82:	4770      	bx	lr

00401d84 <__fini_array_start>:
  401d84:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <g_interrupt_enabled>:
2040000c:	0001 0000                                   ....

20400010 <ul_flash_in_wait_mode>:
20400010:	0000 0020                                   .. .

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
2040004c:	1d5c 0040 0000 0000 0000 0000 0000 0000     \.@.............
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
